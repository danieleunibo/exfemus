// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __MATHEMATICS_hh__
#define __MATHEMATICS_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
#endif



#ifndef __SALOME__GenericObj_hh_EXTERNAL_GUARD__
#define __SALOME__GenericObj_hh_EXTERNAL_GUARD__
#include <SALOME_GenericObj.hh>
#endif
#ifndef __SALOME__Exception_hh_EXTERNAL_GUARD__
#define __SALOME__Exception_hh_EXTERNAL_GUARD__
#include <SALOME_Exception.hh>
#endif
#ifndef __SALOMEDS_hh_EXTERNAL_GUARD__
#define __SALOMEDS_hh_EXTERNAL_GUARD__
#include <SALOMEDS.hh>
#endif
#ifndef __SALOME__PyNode_hh_EXTERNAL_GUARD__
#define __SALOME__PyNode_hh_EXTERNAL_GUARD__
#include <SALOME_PyNode.hh>
#endif
#ifndef __SALOME__Component_hh_EXTERNAL_GUARD__
#define __SALOME__Component_hh_EXTERNAL_GUARD__
#include <SALOME_Component.hh>
#endif
#ifndef __SALOME__Ports_hh_EXTERNAL_GUARD__
#define __SALOME__Ports_hh_EXTERNAL_GUARD__
#include <SALOME_Ports.hh>
#endif
#ifndef __DSC__Engines_hh_EXTERNAL_GUARD__
#define __DSC__Engines_hh_EXTERNAL_GUARD__
#include <DSC_Engines.hh>
#endif
#ifndef __SALOME__PACOExtension_hh_EXTERNAL_GUARD__
#define __SALOME__PACOExtension_hh_EXTERNAL_GUARD__
#include <SALOME_PACOExtension.hh>
#endif
#ifndef __SALOME__Comm_hh_EXTERNAL_GUARD__
#define __SALOME__Comm_hh_EXTERNAL_GUARD__
#include <SALOME_Comm.hh>
#endif
#ifndef __SALOME__Parametric_hh_EXTERNAL_GUARD__
#define __SALOME__Parametric_hh_EXTERNAL_GUARD__
#include <SALOME_Parametric.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE MATHEMATICS_ORB

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_stringvec;

  class stringvec_var;

  class stringvec : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef stringvec_var _var_type;
    inline stringvec() {}
    inline stringvec(const stringvec& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline stringvec(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline stringvec(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline stringvec& operator = (const stringvec& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class stringvec_out;

  class stringvec_var {
  public:
    inline stringvec_var() : _pd_seq(0) {}
    inline stringvec_var(stringvec* _s) : _pd_seq(_s) {}
    inline stringvec_var(const stringvec_var& _s) {
      if( _s._pd_seq )  _pd_seq = new stringvec(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~stringvec_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline stringvec_var& operator = (stringvec* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline stringvec_var& operator = (const stringvec_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new stringvec;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline stringvec* operator -> () { return _pd_seq; }
    inline const stringvec* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator stringvec& () const { return *_pd_seq; }
#else
    inline operator const stringvec& () const { return *_pd_seq; }
    inline operator stringvec& () { return *_pd_seq; }
#endif
      
    inline const stringvec& in() const { return *_pd_seq; }
    inline stringvec&       inout()    { return *_pd_seq; }
    inline stringvec*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline stringvec* _retn() { stringvec* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class stringvec_out;
    
  private:
    stringvec* _pd_seq;
  };

  class stringvec_out {
  public:
    inline stringvec_out(stringvec*& _s) : _data(_s) { _data = 0; }
    inline stringvec_out(stringvec_var& _s)
      : _data(_s._pd_seq) { _s = (stringvec*) 0; }
    inline stringvec_out(const stringvec_out& _s) : _data(_s._data) {}
    inline stringvec_out& operator = (const stringvec_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline stringvec_out& operator = (stringvec* _s) {
      _data = _s;
      return *this;
    }
    inline operator stringvec*&()  { return _data; }
    inline stringvec*& ptr()       { return _data; }
    inline stringvec* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    stringvec*& _data;

  private:
    stringvec_out();
    stringvec_out& operator=(const stringvec_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_dblevec;

  class dblevec_var;

  class dblevec : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef dblevec_var _var_type;
    inline dblevec() {}
    inline dblevec(const dblevec& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline dblevec(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline dblevec(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline dblevec& operator = (const dblevec& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class dblevec_out;

  class dblevec_var {
  public:
    inline dblevec_var() : _pd_seq(0) {}
    inline dblevec_var(dblevec* _s) : _pd_seq(_s) {}
    inline dblevec_var(const dblevec_var& _s) {
      if( _s._pd_seq )  _pd_seq = new dblevec(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~dblevec_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline dblevec_var& operator = (dblevec* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline dblevec_var& operator = (const dblevec_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new dblevec;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline dblevec* operator -> () { return _pd_seq; }
    inline const dblevec* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator dblevec& () const { return *_pd_seq; }
#else
    inline operator const dblevec& () const { return *_pd_seq; }
    inline operator dblevec& () { return *_pd_seq; }
#endif
      
    inline const dblevec& in() const { return *_pd_seq; }
    inline dblevec&       inout()    { return *_pd_seq; }
    inline dblevec*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline dblevec* _retn() { dblevec* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class dblevec_out;
    
  private:
    dblevec* _pd_seq;
  };

  class dblevec_out {
  public:
    inline dblevec_out(dblevec*& _s) : _data(_s) { _data = 0; }
    inline dblevec_out(dblevec_var& _s)
      : _data(_s._pd_seq) { _s = (dblevec*) 0; }
    inline dblevec_out(const dblevec_out& _s) : _data(_s._data) {}
    inline dblevec_out& operator = (const dblevec_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline dblevec_out& operator = (dblevec* _s) {
      _data = _s;
      return *this;
    }
    inline operator dblevec*&()  { return _data; }
    inline dblevec*& ptr()       { return _data; }
    inline dblevec* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    dblevec*& _data;

  private:
    dblevec_out();
    dblevec_out& operator=(const dblevec_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_intvec;

  class intvec_var;

  class intvec : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 >  {
  public:
    typedef intvec_var _var_type;
    inline intvec() {}
    inline intvec(const intvec& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_s) {}

    inline intvec(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max) {}
    inline intvec(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Long* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline intvec& operator = (const intvec& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class intvec_out;

  class intvec_var {
  public:
    inline intvec_var() : _pd_seq(0) {}
    inline intvec_var(intvec* _s) : _pd_seq(_s) {}
    inline intvec_var(const intvec_var& _s) {
      if( _s._pd_seq )  _pd_seq = new intvec(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~intvec_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline intvec_var& operator = (intvec* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline intvec_var& operator = (const intvec_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new intvec;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Long& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline intvec* operator -> () { return _pd_seq; }
    inline const intvec* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator intvec& () const { return *_pd_seq; }
#else
    inline operator const intvec& () const { return *_pd_seq; }
    inline operator intvec& () { return *_pd_seq; }
#endif
      
    inline const intvec& in() const { return *_pd_seq; }
    inline intvec&       inout()    { return *_pd_seq; }
    inline intvec*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline intvec* _retn() { intvec* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class intvec_out;
    
  private:
    intvec* _pd_seq;
  };

  class intvec_out {
  public:
    inline intvec_out(intvec*& _s) : _data(_s) { _data = 0; }
    inline intvec_out(intvec_var& _s)
      : _data(_s._pd_seq) { _s = (intvec*) 0; }
    inline intvec_out(const intvec_out& _s) : _data(_s._data) {}
    inline intvec_out& operator = (const intvec_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline intvec_out& operator = (intvec* _s) {
      _data = _s;
      return *this;
    }
    inline operator intvec*&()  { return _data; }
    inline intvec*& ptr()       { return _data; }
    inline intvec* operator->() { return _data; }

    inline ::CORBA::Long& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    intvec*& _data;

  private:
    intvec_out();
    intvec_out& operator=(const intvec_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_dataref;

  typedef Engines::dataref dataref;
  typedef Engines::dataref_var dataref_var;
  typedef Engines::dataref_out dataref_out;

#ifndef __MATHEMATICS__ORB_mMATH__Gen__
#define __MATHEMATICS__ORB_mMATH__Gen__

  class MATH_Gen;
  class _objref_MATH_Gen;
  class _impl_MATH_Gen;
  
  typedef _objref_MATH_Gen* MATH_Gen_ptr;
  typedef MATH_Gen_ptr MATH_GenRef;

  class MATH_Gen_Helper {
  public:
    typedef MATH_Gen_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MATH_Gen, MATH_Gen_Helper> MATH_Gen_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MATH_Gen,MATH_Gen_Helper > MATH_Gen_out;

#endif

  // interface MATH_Gen
  class MATH_Gen {
  public:
    // Declarations for this interface type.
    typedef MATH_Gen_ptr _ptr_type;
    typedef MATH_Gen_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_MATH_Gen :
    public virtual Engines::_objref_EngineComponent
  {
  public:
    ::CORBA::Double sum(const ::MATHEMATICS_ORB::dblevec& tab);
    ::CORBA::Double squareroot(::CORBA::Double x);
    ::CORBA::Double plus(::CORBA::Double x, ::CORBA::Double y);
    ::CORBA::Double minus(::CORBA::Double x, ::CORBA::Double y);
    ::CORBA::Double times(::CORBA::Double x, ::CORBA::Double y);
    ::CORBA::Double sinx(::CORBA::Double x);

    inline _objref_MATH_Gen()  { _PR_setobj(0); }  // nil
    _objref_MATH_Gen(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MATH_Gen();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MATH_Gen(const _objref_MATH_Gen&);
    _objref_MATH_Gen& operator = (const _objref_MATH_Gen&);
    // not implemented

    friend class MATH_Gen;
  };

  class _pof_MATH_Gen : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MATH_Gen() : _OMNI_NS(proxyObjectFactory)(MATH_Gen::_PD_repoId) {}
    virtual ~_pof_MATH_Gen();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MATH_Gen :
    public virtual Engines::_impl_EngineComponent
  {
  public:
    virtual ~_impl_MATH_Gen();

    virtual ::CORBA::Double sum(const ::MATHEMATICS_ORB::dblevec& tab) = 0;
    virtual ::CORBA::Double squareroot(::CORBA::Double x) = 0;
    virtual ::CORBA::Double plus(::CORBA::Double x, ::CORBA::Double y) = 0;
    virtual ::CORBA::Double minus(::CORBA::Double x, ::CORBA::Double y) = 0;
    virtual ::CORBA::Double times(::CORBA::Double x, ::CORBA::Double y) = 0;
    virtual ::CORBA::Double sinx(::CORBA::Double x) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MATH_Gen;

_CORBA_MODULE_END



_CORBA_MODULE POA_MATHEMATICS_ORB
_CORBA_MODULE_BEG

  class MATH_Gen :
    public virtual MATHEMATICS_ORB::_impl_MATH_Gen,
    public virtual POA_Engines::EngineComponent
  {
  public:
    virtual ~MATH_Gen();

    inline ::MATHEMATICS_ORB::MATH_Gen_ptr _this() {
      return (::MATHEMATICS_ORB::MATH_Gen_ptr) _do_this(::MATHEMATICS_ORB::MATH_Gen::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_MATHEMATICS_ORB
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const MATHEMATICS_ORB::stringvec& _s);
void operator<<=(::CORBA::Any& _a, MATHEMATICS_ORB::stringvec* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MATHEMATICS_ORB::stringvec*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MATHEMATICS_ORB::stringvec*& _sp);

void operator<<=(::CORBA::Any& _a, const MATHEMATICS_ORB::dblevec& _s);
void operator<<=(::CORBA::Any& _a, MATHEMATICS_ORB::dblevec* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MATHEMATICS_ORB::dblevec*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MATHEMATICS_ORB::dblevec*& _sp);

void operator<<=(::CORBA::Any& _a, const MATHEMATICS_ORB::intvec& _s);
void operator<<=(::CORBA::Any& _a, MATHEMATICS_ORB::intvec* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MATHEMATICS_ORB::intvec*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MATHEMATICS_ORB::intvec*& _sp);

void operator<<=(::CORBA::Any& _a, MATHEMATICS_ORB::MATH_Gen_ptr _s);
void operator<<=(::CORBA::Any& _a, MATHEMATICS_ORB::MATH_Gen_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MATHEMATICS_ORB::MATH_Gen_ptr& _s);



inline void
MATHEMATICS_ORB::MATH_Gen::_marshalObjRef(::MATHEMATICS_ORB::MATH_Gen_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MATHEMATICS
#endif

#endif  // __MATHEMATICS_hh__


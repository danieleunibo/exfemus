// Copyright (C) 2007-2013  CEA/DEN, EDF R&D, OPEN CASCADE
//
// Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
// CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

//  File   : SALOMEDS.idl
//  Author : Yves FRICAUD
//
/*!  \file SALOMEDS.idl  \brief This file contains a set of interfaces used for creation, management
  and modification of the %Study
*/

#ifndef _SALOMEDS_IDL_
#define _SALOMEDS_IDL_

#include "SALOME_Exception.idl"
#include "SALOME_GenericObj.idl"

/*! \brief
     This package contains the interfaces used for creation, management
     and modification of the %Study
*/
module SALOMEDS
{
/*! \brief Name of the file in which the %Study is saved.
*/
  typedef string URL;

/*! \brief Main identifier of an object in %SALOME application
*/
  typedef string ID;

/*! \brief While saving the data, IOR is transformed into persistent reference
*/
  typedef string PersistentReference;

/*! \brief IOR of the study in %SALOME application
*/
  typedef string SalomeReference;

/*! \brief List of the names of studies which are currently open in this %SALOME session.

Since %SALOME is a multi-study application, it allows to open a lot of studies
during each working session.
*/
  typedef sequence<string> ListOfOpenStudies;
//! List of file names
  typedef sequence<string> ListOfFileNames;
//! List of modification dates of a study
  typedef sequence<string> ListOfDates ;
//! An unbounded sequence of strings
  typedef sequence<string> ListOfStrings ;
//! An unbounded sequence of sequence of strings
  typedef sequence<ListOfStrings> ListOfListOfStrings ;
//! A byte stream which is used for binary data transfer between different components
  typedef sequence<octet> TMPFile;

  // Reference to other objects is treated with function AddReference
  // and ReferencedObject
  // All other type of attributes defined in AttributeType enum are
  // treated with AddAdttribute and GetAttribute
  // The difference is made because Reference attribute don't contain
  // strings but reference to ID of other objects

  interface GenericAttribute;
  interface Study;
  interface StudyManager;
  interface StudyBuilder;
  interface SObject;
  interface SComponent;
  interface SComponentIterator;
  interface ChildIterator;
  interface Driver;
  interface AttributeStudyProperties;
  interface AttributeParameter;
  interface UseCaseIterator;
  interface UseCaseBuilder;

  interface Observer
  {
    oneway void notifyObserverID(in string theID, in long event);
  };


//! List of attributes of %SObjects
  typedef sequence<GenericAttribute> ListOfAttributes;

//! Exception indicating that this feature hasn't been implemented in %SALOME application.
  exception NotImplemented {};


  //===========================================================================
 /*! \brief %Study Interface

    The purpose of the %Study is to manage the data produced by various components of %SALOME platform.
   Most of the %Study operations are handled by the StudyManager and the StudyBuilder.
   What is left in the %Study interface are elementary inquiries.
   (Incidentally, we recall that a CORBA attribute is implemented as a pair of get
      and set methods.) A %Study is explored by a set of tools, mainly iterators
    , which are described further. Nevertheless, the %Study
     interface allows the search of an object by name or by ID.
     \note
     <BR><VAR>The Path </VAR>of an object in %SALOME application is much alike a standard path of a file.
    In general it's a string of names of directories divided by a slash '/'.
     <BR><VAR>The Context</VAR> is the current directory of an object.</P>
*/

  interface Study
  {

//! Invalid study context
    exception StudyInvalidContext {};
//! Invalid study component
    exception StudyInvalidComponent {};
//! Invalid directory of the %study exception
    exception StudyInvalidDirectory {};
//! Exception pointing that this name of the study has already been used.
    exception StudyNameAlreadyUsed {};
//! study object already exists
    exception StudyObjectAlreadyExists {};
//! Invalid name of the %study exception
    exception StudyNameError {};
//! Invalid study comment 
    exception StudyCommentError {};

/*! \brief The name of the %Study

   This is equivalent to the methods setName() & getName()
*/
    attribute string     Name; // equivalent to setName() & getName()
/*! \brief The ID of the %Study

   This is equivalent to the methods setID() & getID()
*/
    attribute short      StudyId;
//! Sequence containing %SObjects
    typedef sequence<SObject> ListOfSObject;
//!  Get the persistent reference to the %Study.
    PersistentReference  GetPersistentReference();
//! Get a transient reference to the %Study.
    SalomeReference      GetTransientReference();

/*! \brief indicate whether the %Study is empty

    \return True if the %Study is empty
*/
    boolean IsEmpty();
/*! \brief  Find a %SComponent by its name.

   \param aComponentName    It's a string value in the Comment Attribute of the Component,
    which is looked for, defining the data type of this Component.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    SComponent FindComponent  (in string aComponentName);

/*! \brief  Find a %SComponent by ID of the according %SObject
*/
    SComponent FindComponentID(in ID aComponentID);
/*! \brief  Find a %SObject by the Name Attribute of this %SObject

    \param anObjectName String parameter defining the name of the object
    \return The obtained %SObject

<em>See \ref example19 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    SObject       FindObject      (in string anObjectName);
/*! \brief  Find a %SObject by its ID

    \param aObjectID This parameter defines the ID of the required object
    \return The obtained %SObject
*/
    SObject       FindObjectID    (in ID aObjectID);
/*! \brief Create a %SObject by its ID

    \param aObjectID This parameter defines the ID of the required object
    \return The created %SObject
*/
    SObject       CreateObjectID    (in ID aObjectID);
/*!  \brief Find a %SObject by IOR of the object belonging to this %SObject.

    \param anObjectName This parameter defines the IOR of the object
    \return The obtained %SObject
*/
    SObject       FindObjectIOR   (in ID aObjectIOR);
/*! \brief  Find in the study all %SObjects produced by a given %Component.

    \param anObjectName The Name Attribute of the searched %SObjects should correspond to <VAR>anObjectName</VAR>.
    \param aComponentName The name of the component, which objects are searched for.
*/
    ListOfSObject FindObjectByName(in string anObjectName, in string aComponentName);
/*! \brief  Find a %SObject by the path to it.

    \param thePath The path to the required %SObject.
    \return The obtained %SObject.
*/
    SObject FindObjectByPath(in string thePath);
/*! \brief Get the path to the %SObject.
*/
    string  GetObjectPath(in Object theObject);

/*! \brief  Set the context of the %Study.

    \param thePath String parameter defining the context of the study.

<em>See \ref example23 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void SetContext(in string thePath);
/*!  \brief Get the context of the %Study.
    
<em>See \ref example23 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string GetContext();
/*!  \brief Get a list of names of objects corresponding to the context.

   \note  If the parameter <VAR>theContext</VAR> is empty, then the current context will be used.
*/
    ListOfStrings GetObjectNames(in string theContext);
/*! \brief Get a list of names of directories and subdirectories corresponding to the context.

   \note  If the parameter <VAR>theContext</VAR> is empty, then the current context will be used.
*/
    ListOfStrings GetDirectoryNames(in string theContext);
/*! \brief  Get a list of names of Files corresponding to the context.

    \note  If the parameter <VAR>theContext</VAR> is empty, then the current context will be used.
*/
    ListOfStrings GetFileNames(in string theContext);
/*! \brief Get a list of names of Components corresponding to the context.

   \note  If the parameter <VAR>theContext</VAR> is empty, then the current context will be used.
*/
    ListOfStrings GetComponentNames(in string theContext);
/*!  \brief Create a new iterator of child levels of the given %SObject.

    \param aSO The given %SObject
    \return A new iterator of child levels of the given %SObject.
*/
    ChildIterator      NewChildIterator(in SObject aSO);

/*!  \brief Create a new iterator of the %SComponents.

    \return A new iterator of the %SComponents.
*/
    SComponentIterator NewComponentIterator();

/*! \brief  Create a new %StudyBuilder to add or modify an object in the study.

   \return A new %StudyBuilder.

<em>See \ref example20 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    StudyBuilder NewBuilder() ;
/*! \brief Labels dependency

    Updates the map with IOR attribute. It's an inner method used for optimization.
*/
    void UpdateIORLabelMap(in string anIOR, in string anEntry);

/*! \brief Getting properties of the study

   Returns the attribute, which contains the properties of this study.

<em>See \ref example20 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    AttributeStudyProperties GetProperties();
/*! \brief  Indicate whether the %study has been saved
*/
    attribute boolean IsSaved;
/*! \brief  Indicate whether the %study has been modified and not saved.

  Returns True if the %study has been modified and not saved.
*/
    boolean IsModified();

/*! \brief  Mark the %study as being modified and not saved.
*/
    void Modified();

/*! \brief  Indicate the file where the %study has been saved
*/
    attribute string  URL;

/*! \brief List of %SObjects

    Returns the list of %SObjects which refers to %anObject.
*/
    ListOfSObject FindDependances(in SObject anObject);

/*! \brief The date of the last saving of the study

    Returns the date of the last saving of study with format: "DD/MM/YYYY HH:MM"
*/
    string GetLastModificationDate();
/*! \brief The list of modification dates of the study

    Returns the list of modification dates (without creation date) with format "DD/MM/YYYY HH:MM".
      Note : the first modification begins the list.
*/
    ListOfDates GetModificationsDate();
/*! \brief Object conversion.

    Converts an object into IOR.
    \return    IOR
*/
    string ConvertObjectToIOR(in Object theObject);
/*! \brief Object conversion.

    Converts IOR into an object.
    \return    An object
*/
    Object ConvertIORToObject(in string theIOR);

/*!  \brief Get a new %UseCaseBuilder.
*/
    UseCaseBuilder  GetUseCaseBuilder();

/*! \brief  Close the components in the study, remove itself from the %StudyManager.
*/
    void Close();

/*! \brief  Enable (if isEnabled = True)/disable automatic addition of new %SObjects to the use case.
*/
    void EnableUseCaseAutoFilling(in boolean isEnabled);

/*!
    Functions for internal usage only
*/
    void AddPostponed(in string theIOR);

    void AddCreatedPostponed(in string theIOR);

    void RemovePostponed(in long theUndoLimit);

    void UndoPostponed(in long theWay);

    boolean DumpStudy(in string thePath,
                      in string theBaseName,
                      in boolean isPublished,
                      in boolean isMultiFile);

/*! \brief  Get an AttributeParameter used to store common parameters for given %theSavePoint.

    \param theID identifies a common parameters set (Example: "Interface Applicative")
    \param theSavePoint is number of a set of parameters as there can be several sets
*/
    AttributeParameter GetCommonParameters(in string theID, in long theSavePoint);

/*! \brief  Get an AttributeParameter used to store parameters for given %theModuleName.

    \param theID identifies a common parameters set (Example: "Interface Applicative")
    \param theModuleName is a name of the module (Example: "Geometry")
    \param theSavePoint is number of a set of parameters as there can be several sets
*/
    AttributeParameter GetModuleParameters(in string theID, in string theModuleName, in long theSavePoint);


/*! \brief Get a default Python script to restore visual parameters for given %theModuleName.

    \param theModuleName is a name of the module (Example: "Geometry")
    \param indent is a string to use for script indentation
*/
    string GetDefaultScript(in string theModuleName, in string indent);

/*!
    Private method, returns an implementation of this Study.
   \param theHostname is a hostname of the caller
   \param thePID is a process ID of the caller
   \param isLocal is set True if the Study is launched locally with the caller
*/
    long long GetLocalImpl(in string theHostname, in long thePID, out boolean isLocal);


/*! \brief  Mark this Study as being locked by the given locker. 

    The lock status can be checked by method IsStudyLocked
    \param theLockerID identifies a locker of the study can be for ex. IOR of the engine that locks the study.
*/
    void SetStudyLock(in string theLockerID);

/*! \brief Indicate if the Study is locked

   Returns True if the Study was marked locked. 
*/
    boolean IsStudyLocked();

/*! \brief  Mark this Study as being unlocked by the given locker. 

     The lock status can be checked by method IsStudyLocked
    \param theLockerID identifies a locker of the study can be for ex. IOR of the engine that unlocks the study.
*/
    void UnLockStudy(in string theLockerID);

/*! \brief  Get the list of IDs of the Study's lockers. 
*/
    ListOfStrings GetLockerID();

/*! \brief  Create real variable with Name theVarName and value theValue 

    (or set if variable value into theValue already exists)
    \param theVarName is a name of the variable
    \param theVarName is a value of the variable.
*/
    void SetReal( in string theVarName, in double theValue );

/*! \brief  Create integer variable with Name theVarName and value theValue 

    (or set if variable value into theValue already exists)
    \param theVarName is a name of the variable
    \param theVarName is a value of the variable.
*/
    void SetInteger( in string theVarName, in long theValue );
/*! \brief  Create boolean variable with Name theVarName and value theValue 

    (or set if variable value into theValue already exists)
    \param theVarName is a name of the variable
    \param theVarName is a value of the variable.
*/
    void SetBoolean( in string theVarName, in boolean theValue );

/*! \brief  Create string variable with Name theVarName and value theValue 

    (or set if variable value into theValue already exists)
    \param theVarName is a name of the variable
    \param theVarName is a value of the variable.
*/
    void SetString( in string theVarName, in string theValue );

/*! \brief  Set current value as double for string variable
*/
    void SetStringAsDouble( in string theVarName, in double theValue );

/*! \brief Get value of a real variable

    \param theVarName is a name of the variable.
*/
    double GetReal( in string theVarName );

/*! \brief Get value of an integer variable

    \param theVarName is a name of the variable.
*/
    long GetInteger( in string theVarName );

/*! \brief Get value of a boolean variable

    \param theVarName is a name of the variable.
*/
    boolean GetBoolean( in string theVarName );

/*! \brief Get value of a string variable

    \param theVarName is a name of the variable.
*/
    string GetString( in string theVarName );
    

/*! \brief Indicate if a variable is real

    Return true if variable is real otherwise return false.
    \param theVarName is a name of the variable.
*/
    boolean IsReal( in string theVarName );

/*! \brief Indicate if a variable is integer

    Return true if variable is integer otherwise return false.
    \param theVarName is a name of the variable.
*/
    boolean IsInteger( in string theVarName );

/*! \brief Indicate if a variable is boolean

    Return true if variable is boolean otherwise return false.
    \param theVarName is a name of the variable.
*/
    boolean IsBoolean( in string theVarName );

/*! \brief Indicate if a variable is string

    Return true if variable is string otherwise return false.
    \param theVarName is a name of the variable.
*/
    boolean IsString( in string theVarName );

/*! \brief Indicate if a variable exists in the study

    Return true if variable exists in the study,
    otherwise return false.
    \param theVarName is a name of the variable.
*/
    boolean IsVariable( in string theVarName );

/*! \brief Get names of all variables from the study.
*/
    ListOfStrings GetVariableNames();

/*! \brief Remove a variable

   Remove variable with the specified name from the study with substitution of its value.

   \param theVarName Name of the variable.
   \return Status of operation.
*/
    boolean RemoveVariable( in string theVarName );

/*! \brief Rename a variable

   Rename variable with the specified name within the study.

   \param theVarName Name of the variable.
   \param theNewVarName New name for the variable.
   \return Status of operation.
*/
    boolean RenameVariable( in string theVarName, in string theNewVarName );

/*! \brief Indicate whether variable is used

   Check that variable is used in the study.

   \param theVarName Name of the variable.
   \return Variable usage.
*/
    boolean IsVariableUsed( in string theVarName );

/*! \brief Parse variables used for object creation

   \param string with variables, separated by special symbol. 
   \return Variables list.
*/
    ListOfListOfStrings ParseVariables( in string theVars );

/*!
     Attach an observer to the Study

    \param theObserver
*/
     void attach(in SALOMEDS::Observer theObserver, in boolean modify);   
  };

  //===========================================================================
 /*! \brief %SimanStudy Interface

    The Siman (simulation management) study is an interface extension to the %Study
    with functions for working with SIMAN server. Is allows to get data from SIMAN (check-out operation)
    and to store it back (check-in operation).
    This interface is correctly working if SALOME is compiled with SimanIO library, launched with siman
    option and  connection to SIMAN server is established and alive. Only one study per application,
    checked out from the SIMAN is SimanStudy. For other studies all functionality is unaccessible.
*/

  interface SimanStudy
  {

//! No connection with SIMAN server
    exception SimanStudyNoConnection {};
//! There is no SimanStudy with: study with checked out data.
    exception SimanStudyNotExists {};

/*! \brief The ID of the study in SIMAN server

   This is equivalent to the methods setStudyId() & getStudyId()
*/
    attribute string      StudyId;
    
/*! \brief The ID of the scenario in SIMAN server

   This is equivalent to the methods setScenarioId() & getScenarioId()
*/
    attribute string      ScenarioId;
/*! \brief The ID of the user in SIMAN server

   This is equivalent to the methods setUserId() & getUserId()
*/
    attribute string      UserId;

/*! \brief Get data from SIMAN and put it to the given study

   This method is called for just created study to make it referenced
   by this Siman study. Also it fills this study by the checked out
   data from SIMAN server.
   Warning: StudyID, ScenarioID and User Id must be set before calling of this method!

   \param theTarget referenced study for checking out
*/
    void CheckOut(in Study theTarget);

/*! \brief Get data from the source study and store in SIMAN
    
    It works only with already checked out study.
    \param theModuleName name of the module the check in must be perfrormed for. If empty, check in is performed for all modules.
*/
    void CheckIn(in string theModuleName);

/*! \brief Returns the %Study with checked out data

   If study is null, there is no such study in this application instance, or Salome was
   launched without siman option.
*/
    Study getReferencedStudy();

};

  //==========================================================================
/*! \brief %Study Builder Interface

  The purpose of the Builder is to add and/or remove objects and attributes.
  A %StudyBuilder is linked to a %Study. A
  command management is provided for the undo/redo functionalities.
  \note
  <BR><VAR>The Tag</VAR> of an item in %SALOME application is a symbolic description of
  item's position in the tree-type structure of the browser. In general it has the following
  form: <TT>0:2:1:1</TT>
*/
  //==========================================================================

  interface StudyBuilder
  {
/*! \brief %LockProtection Exception

    This exception is raised while attempting to modify a locked %study.
*/
    exception LockProtection {};
/*! \brief Creation of a new %SComponent.

   Creates a new %SComponent
   \param ComponentDataType    Data type of the %SComponent which will be created.

<em>See \ref example17 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    SComponent NewComponent(in string ComponentDataType) raises(LockProtection);
/*! \brief Definition of the instance to the %SComponent

    Defines the instance to the %SComponent.
*/
    void       DefineComponentInstance (in SComponent aComponent,in Object ComponentIOR) raises(LockProtection);
        
/*! \brief Deletion of a %SComponent

  Removes a %SComponent.
*/
    void       RemoveComponent(in SComponent aComponent) raises(LockProtection);

/*! \brief Creation of a new %SObject

   Creates a new %SObject under a definite father %SObject.

   \param theFatherObject The father %SObject under which this one should be created.
   \return New %SObject

<em>See \ref example18 for an example of this method usage in batchmode of %SALOME application.</em>

*/

    SObject NewObject      (in SObject theFatherObject) raises(LockProtection);

/*! \brief Creation of a new %SObject with a definite %tag

   Creates a new %SObject with a definite %tag.

   \param atag Long value corresponding to the tag of the new %SObject.
   \return New %SObject

*/
    SObject NewObjectToTag (in SObject theFatherObject, in long atag) raises(LockProtection);
/*! \brief Deletion of the %SObject

  Removes a %SObject from the %StudyBuilder.

  \param anObject The %SObject to be deleted.
*/
    void    RemoveObject   (in SObject anObject) raises(LockProtection);
/*! \brief Deletion of the %SObject with all his child objects.

  Removes the %SObject with all his child objects.

  \param anObject The %SObject to be deleted with all child objects.
*/
    void    RemoveObjectWithChildren(in SObject anObject) raises(LockProtection);

/*!
   Loads a %SComponent.

<em>See \ref example19 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void  LoadWith (in SComponent sco, in Driver Engine) raises (SALOME::SALOME_Exception);
/*!
   Loads a %SObject.

   \param sco %SObject to be loaded.
*/
    void  Load (in SObject sco);

/*! \brief Looking for or creating an attribute assigned to the %SObject

    Allows to find or create an attribute of a specific type which is assigned to the object.
    \param anObject        The %SObject corresponding to the attribute which is looked for.
    \param aTypeOfAttribute     Type of the attribute.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/

    GenericAttribute FindOrCreateAttribute(in  SObject        anObject,
	                                 in  string         aTypeOfAttribute) raises(LockProtection);

/*! \brief Looking for an attribute assigned to a %SObject

    Allows to find an attribute of a specific type which is assigned to the object.
    \param anObject        The %SObject corresponding to the attribute which is looked for.
    \param aTypeOfAttribute     Type of the attribute.
    \param anAttribute       Where the attribute is placed if it's found.
    \return True if it finds an attribute.
 */

    boolean FindAttribute(in  SObject        anObject,
				 out GenericAttribute anAttribute,
				 in  string         aTypeOfAttribute);
/*! \brief Deleting the attribute assigned to the %SObject

    Removes the attribute of a specific type which is assigned to the object.
    \param anObject        The %SObject corresponding to the attribute.
    \param aTypeOfAttribute     Type of the attribute.

<em>See \ref example17 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void RemoveAttribute(in  SObject        anObject,
			 in  string         aTypeOfAttribute) raises(LockProtection);
/*!
    Adds a reference between %anObject and %theReferencedObject.
    \param anObject The %SObject which will get a reference
    \param theReferencedObject The %SObject having a reference
*/

    void Addreference(in SObject anObject,
		      in SObject theReferencedObject) ;

/*!
    Removes a reference from %anObject to another object.
    \param anObject The %SObject which contains a reference
*/

    void RemoveReference(in SObject anObject) ;

/*!
   Adds a directory in the %Study.
   \param theName String parameter defining the name of the directory.

<em>See \ref example23 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void AddDirectory(in string theName) raises(LockProtection);

/*! \brief Identification of the %SObject's substructure.

      Identification of the %SObject's substructure by GUID.


      \param anObject The %SObject which will be identified
      \param theGUID GUID has the following format "00000000-0000-0000-0000-000000000000"
*/

     void SetGUID(in SObject anObject, in string theGUID) raises(LockProtection);
/*!
Searches for a definite %SObject with a definite GUID and returns True if it finds it.

\param anObject A definite %SObject which will be identified
\param theGUID GUID has the following format "00000000-0000-0000-0000-000000000000"
*/
     boolean IsGUID(in SObject anObject, in string theGUID);

/*! \brief Creation of a new command

   Creates a new command which can contain several different actions.
   
<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void NewCommand(); // command management
/*! \brief Execution of the command

   Commits all actions declared within this command.

   \exception LockProtection This exception is raised, when trying to perform this command a study, which is protected for modifications.

<em>See \ref example16 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void CommitCommand() raises(LockProtection); // command management
/*!
    Returns True if at this moment there is a command under execution.
*/
    boolean HasOpenCommand();
/*! \brief Cancelation of the command

    Cancels all actions declared within the command.
    
<em>See \ref example17 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void AbortCommand(); // command management
/*! \brief Undolimit

    The number of actions which can be undone
*/
    attribute long  UndoLimit;
/*! \brief Undo method

    Cancels all actions of the last command.

    \exception LockProtection This exception is raised, when trying to perform this command a study, which is protected for modifications.

<em>See \ref example16 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void Undo() raises (LockProtection);
/*! \brief Redo method

    Redoes all actions of the last command.

\exception LockProtection This exception is raised, when trying to perform this command a study, which is protected for modifications.

<em>See \ref example16 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void Redo() raises (LockProtection);
/*!
    Returns True if at this moment there are any actions which can be canceled.
    
<em>See \ref example16 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean GetAvailableUndos();
/*!
    Returns True if at this moment there are any actions which can be redone.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean GetAvailableRedos();
/*!
    Puts name attribute with the given string value to the given %SObject

    \param theSO Existing SObject to set name attribute.
    \param theValue The value to be set to the name attribute.
*/
    void SetName(in SObject theSO, in string theValue) raises (LockProtection);

/*!
    Puts comment attribute with the given string value to the given %SObject

    \param theSO Existing SObject to set comment attribute.
    \param theValue The value to be set to the comment attribute.
*/
    void SetComment(in SObject theSO, in string theValue) raises (LockProtection);

/*!
    Puts IOR attribute with the given string value to the given %SObject

    \param theSO Existing SObject to set IOR attribute.
    \param theValue The value to be set to the IOR attribute.
*/
    void SetIOR(in SObject theSO, in string theValue) raises (LockProtection);
  };

  //==========================================================================
/*! \brief %Study Manager interface

    The purpose of the Manager is to manipulate the %Studies. You will find in this
    interface the methods to create, open,
    close, and save a %Study. Since a %SALOME session is multi-document, you will
    also find the methods allowing to navigate
    through the collection of studies present in a session.
*/
  //==========================================================================

  interface StudyManager
  {
/*!
    Determines whether the server has already been loaded or not.
*/
    void ping();

    void Shutdown();

/*!
    Returns the PID of the server
*/
    long getPID();

/*!
    Shutdown the StudyManager process.
*/    
    oneway void ShutdownWithExit();

/*! \brief Creation of a new study

     Creates a new study with a definite name.

     \param study_name String parameter defining the name of the study

<em>See \ref example17 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    Study NewStudy(in string study_name);

/*! \brief Open a study

     Reads and activates the structure of the study %Objects.
     \param aStudyUrl The path to the study
    \warning This method doesn't activate the corba objects. Only a component can do it.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    Study Open (in URL aStudyUrl) raises (SALOME::SALOME_Exception);

/*! \brief Closing the study

    Closes a study.
*/
    void  Close(in Study aStudy);
/*! \brief Saving the study in a HDF file (or files).

    Saves a study.

    \param theMultiFile If this parameter is True the study will be saved in several files.

<em>See \ref example19 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean  Save(in  Study aStudy, in boolean theMultiFile);
/*! \brief Saving a study in a ASCII file (or files).

    Saves a study in an ASCII format file (or files).
    \param theMultiFile If this parameter is True the study will be saved in several files.
*/
    boolean  SaveASCII(in  Study aStudy, in boolean theMultiFile);
/*! \brief Saving the study in a specified HDF file (or files).

    Saves the study in a specified file (or files).
    \param aUrl The path to the definite file in whcih the study will be saved
    \param aStudy The study which will be saved
    \param theMultiFile If this parameter is True the study will be saved in several files.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    boolean  SaveAs(in URL   aUrl, // if the file already exists
		in Study aStudy,
		in boolean theMultiFile); // overwrite (as option)
/*! \brief Saving the study in a specified ASCII file (or files).

    Saves the study in a specified ASCII file (or files).

    \param aUrl The path to the definite file in whcih the study will be saved
    \param aStudy The study which will be saved
    \param theMultiFile If this parameter is True the study will be saved in several files.
*/
    boolean  SaveAsASCII(in URL   aUrl, // if the file already exists
		      in Study aStudy,
		      in boolean theMultiFile); // overwrite (as option)


/*! \brief List of open studies.

Gets the list of open studies

    \return A list of open studies in the current session.
*/
    ListOfOpenStudies GetOpenStudies();

/*! \brief Getting a particular %Study picked by name

    Activates a particular %Study
    among the session collection picking it by name.
    \param aStudyName The name of the study
*/
    Study GetStudyByName  (in string aStudyName);

/*! \brief Getting a particular %Study picked by ID

    Activates a particular %Study
    among the session collection picking it by ID.
    \param aStudyID The ID of the study
*/
    Study GetStudyByID  (in short aStudyID);

    // copy/paste methods

/*!
    Returns True, if the given %SObject can be copied to the clipboard.
*/
    boolean CanCopy(in SObject theObject);
/*!
    Returns True, if the given %SObject is copied to the clipboard.
    \param theObject The %SObject which will be copied
*/
    boolean Copy(in SObject theObject);
/*!
    Returns True, if the object from the clipboard can be pasted to the given %SObject.
    \param theObject The %SObject stored in the clipboard.
*/
    boolean CanPaste(in SObject theObject);
/*!
    Returns the %SObject in which the object from the clipboard was pasted to.
    \param theObject The %SObject which will be pasted
    \exception SALOMEDS::StudyBuilder::LockProtection This exception is raised, when trying to paste
    an object into a study, which is protected for modifications.
*/
    SObject Paste(in SObject theObject) raises (SALOMEDS::StudyBuilder::LockProtection);

/*! \brief Object conversion.

    Converts an object into IOR.
    \return    IOR
*/
    string ConvertObjectToIOR(in Object theObject);
/*! \brief Object conversion.
	    
    Converts IOR into an object.
    \return    An object
*/
    Object ConvertIORToObject(in string theIOR); 

/*!
    Private method, returns an implementation of this StudyManager.
   \param theHostname is a hostname of the caller
   \param thePID is a process ID of the caller
   \param isLocal is set True if the StudyManager is launched locally with the caller
*/
    long long GetLocalImpl(in string theHostname, in long thePID, out boolean isLocal); 

/*! \brief Returns the siman study based on the given study.
	    
    Creates a new Siman study, or returns just a previously created.
    \return Siman study, or none if it is not siman mode
*/
    SimanStudy GetSimanStudy();

  };


  //==========================================================================
/*! \brief %SObject interface

   The objects in the %study are built by the %StudyBuilder. The %SObject interface
   provides methods for elementary inquiries, like getting an object %ID or its attribuites.
 \note
 
   <BR><VAR>Tag</VAR> of an item in %SALOME application is an integer value uniquely defining an item
   in the tree-type data structure.
   <BR><VAR>ID</VAR> of an item is a description of item's position in the tree-type data structure.
   ID is a list of tags and it has the following form: <TT>0:2:1:1</TT>.
*/
  //==========================================================================

  interface SObject : SALOME::GenericObj
  {
/*! Name of the %SObject
*/
    attribute string Name; // equivalent to setName() & getName()

/*! Returns true if the %SObject does not belong to any %Study
*/
    boolean IsNull();

/*! Gets an object %ID

   \return ID of the %SObject.
*/
    ID GetID();
/*!  Acquisition of the father %Component of the %SObject

  \return The father %Component of the %SObject.
*/
    SComponent GetFatherComponent();
/*! Acquisition of the father %SObject of the %SObject

   \return the father %SObject of the given %SObject.
*/
    SObject    GetFather();
/*! Gets the %tag of a %SObject

    \return the %tag of a %SObject.
*/
    short      Tag();
/*! Gets the depth of a %SObject

    \return the depth of a %SObject.
*/
    short      Depth();
/*! Looks for subobjects of a given %SObject.

    \param atag Tag of the given %SObject
    \return True if it finds a subobject of the %SObject with a definite tag as well as the required subobject.
*/

    boolean FindSubObject (in long atag, out SObject obj);
/*! Looks for attributes of a given %SObject

   \param aTypeOfAttribute String value defining the type of the required attribute of the given %SObject.
   \return True if it finds an attribute of a definite type of the given %SObject as well as the discovered attribute.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    boolean FindAttribute(out GenericAttribute anAttribute,
				  in  string         aTypeOfAttribute);
/*! Looks for a %SObject which the given %SObject refers to.

    \return The object which the given %SObject refers to as well as True if it finds
    this object.
*/
    boolean ReferencedObject(out SObject obj); // A REVOIR
/*! Gets all attributes of a given %SObject

    \return The list of all attributes of the given %SObject.

<em>See \ref example17 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    ListOfAttributes     GetAllAttributes();
/*! Gets the study of a given %SObject.

    \return The study containing the given %SObject.
*/
    Study GetStudy();

/*! Gets the CORBA object by its own IOR attribute.
    Returns nil, if can't.

    \return The CORBA object of the %SObject.
*/
    Object GetObject();

/*!
    Returns the name attribute value of this SObject.
    Returns empty string if there is no name attribute.
*/
    string GetName();

/*!
    Returns the comment attribute value of this SObject.
    Returns empty string if there is no comment attribute.
*/
    string GetComment();

/*!
    Returns the IOR attribute value of this SObject.
    Returns empty string if there is no IOR attribute.
*/
    string GetIOR();

/*!
    Set an attribute value (of type string)
   \param name the name of the attribute
   \param value the value of the attribute
*/
    void SetAttrString(in string name, in string value);

/*!
    Private method, returns an implementation of this SObject.
   \param theHostname is a hostname of the caller
   \param thePID is a process ID of the caller
   \param isLocal is set True if the SObject is launched locally with the caller
*/
    long long GetLocalImpl(in string theHostname, in long thePID, out boolean isLocal);
  };


  //==========================================================================
/*! \brief %Generic attribute interface

   %Generic attribute is a base interface for all attributes which can be assigned to the SObjects created in the study.
*/
  //==========================================================================
  interface GenericAttribute : SALOME::GenericObj
  {
/*! \brief Exception locking all changes

    This exception locks all modifications in attributes.
*/
    exception LockProtection {};
/*! \brief Method CheckLocked

   Checks whether the %Study is protected for modifications.

   \note <BR>This exception is raised only outside a transaction.
*/
    void CheckLocked() raises (LockProtection);

    //! Get Type
    string Type();

    //! Get the class type
    string GetClassType(); 	
	
    //! Get SObject
    SObject GetSObject();

  //!  Private method, returns an implementation of this GenericAttribute.
/*!
   \param theHostname is a hostname of the caller
   \param thePID is a process ID of the caller
   \param isLocal is set True if the GenericAttribute is launched locally with the caller
*/
    long long GetLocalImpl(in string theHostname, in long thePID, out boolean isLocal);
  };



  //==========================================================================
/*! \brief %SComponent interface

   The %SComponent interface establishes in the study a permanent assocition to the Components integrated into %SALOME platform.
   The %SComponent interface is a specialization of the %SObject interface.
   It inherits the most of its methods from the %SObject interface.
*/
  //==========================================================================
  interface SComponent : SObject
  {
/*! \brief Gets the data type of the given %SComponent

    \return The data type of this %SComponent.
*/
    string  ComponentDataType();
/*! \brief Gets the IOR of the given component

  \return True (if there is an instance of the given component) and its IOR.
*/
    boolean ComponentIOR (out ID theID); //returns True if there is an instance
                                         //In this case ID identifies this one
  };


  //==========================================================================
/*! \brief %SComponentIterator interface

  This interface contains the methods allowing to iterate over all components in the list.
  The search is started from the first %SComponent in the list.
*/
  //==========================================================================
  interface SComponentIterator : SALOME::GenericObj
  {
/*!
\brief Activates the %SComponentIterator.
*/
    void Init();
/*!  \brief Method More

   \return True if there is one more %SComponent in the list.
*/
    boolean More();
/*!
\brief Moves the iterator to the next %SComponent in the list.
*/
    void Next();
/*!
    \brief Returns the %SComponent corresponding to the current %SComponent found by the iterator.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    SComponent Value();
  };

  //==========================================================================
/*! \brief %ChildIterator interface

    This interface contains methods which allow to iterate over all child
    levels.
*/
  //==========================================================================
  interface ChildIterator : SALOME::GenericObj
  {
/*!

\brief Activates the %ChildIterator.
*/
    void Init();
/*!

\brief Activates the %ChildIterator for all child levels.

\param allLevels If this boolean parameter is True, the %ChildIterator will be activated for all child levels.
*/
    void InitEx(in boolean allLevels);
/*! \brief Method More

   \return True if there is one more %ChildIterator in the list.
*/
    boolean More();
/*!
    \brief Passes the iterator to the next level.
*/
    void Next();
/*!
    \brief Returns the %SObject corresponding to the current object found by the iterator.
*/
    SObject Value();
  };

  //==========================================================================
  //==========================================================================
/*! \brief Interface of the %UseCaseIterator.

   This interface contains a set of methods used for iteration over the objects in the use case.
*/
  interface UseCaseIterator : SALOME::GenericObj
  {
/*!
Activates the %UseCaseIterator.
\param allLevels If the value of this parameter is True the Iterator is activated for all subobjects.
*/
    void Init(in boolean allLevels);
/*! Method More

    \return True if the %UseCaseIterator finds one more object.
*/
    boolean More();
/*!
    Passes the iterator to the next object.
*/
    void Next();
/*!
    Returns the %SObject corresponding to the current object found by the Iterator.
*/
    SObject Value();
  };

  //==========================================================================
  //==========================================================================
/*! \brief Interface of the %UseCaseBuilder

   Use case in the study represents a user-managed subtree, containing all or some of the objects which exist in the study.
   The %UseCaseBuilder interface contains a set of methods used for management of the use case in the study.
*/
  interface UseCaseBuilder : SALOME::GenericObj
  {
/*!
   Adds to the use case an object as a child of the current object of the use case.

   \param theObject The added %SObject.
   \return True if this %SObject has been added in the use case.
*/
    boolean Append(in SObject theObject);
/*!
   Removes an object from the use case.

   \param theObject The deleted %SObject
   \return True if this %SObject has been deleted from the use case.
*/
    boolean Remove(in SObject theObject);
/*!
   Adds a child object <VAR>theObject</VAR> to the given father <VAR>theFather</VAR> object in the use case.
*/
    boolean AppendTo(in SObject theFather, in SObject theObject);
/*!
    Inserts in the use case the object <VAR>theFirst</VAR> before the object <VAR>theNext</VAR>.
*/
    boolean InsertBefore(in SObject theFirst, in SObject theNext);
/*!
    Sets the current object of the use case.
*/
    boolean SetCurrentObject(in SObject theObject);
/*!
    Makes the root object to be the current object of the use case.
*/
    boolean SetRootCurrent();
/*!
   Returns True if the given object <VAR>theObject</VAR> of the use case has child objects.
*/
    boolean HasChildren(in SObject theObject);
/*!
   Returns True if children of the given object <VAR>theObject</VAR> of the use case tree were sorted successfully.
*/
    boolean SortChildren(in SObject theObject, in boolean theAscendingOrder);
/*!
   Gets father object of the given object <VAR>theObject</VAR> in the use cases tree.
*/
    SObject GetFather(in SObject theObject);
/*!
   Sets the name of the use case.
*/
    boolean SetName(in string theName);
/*!
   Gets the name of the use case.
*/
    string GetName();
/*!
   Returns True if the given object <VAR>theObject</VAR> represents a use case.
*/
    boolean IsUseCase(in SObject theObject);
/*!
   Returns True if the given object <VAR>theObject</VAR> is included in the use cases tree on any level.
*/
    boolean IsUseCaseNode(in SObject theObject);
/*!
    Gets the current object of the use case.
*/
    SObject GetCurrentObject();
/*!
    Creates a new use case in the use case browser.
*/
    SObject AddUseCase(in string theName);
/*!
    Returns the %UseCaseIterator for the given object <VAR>theObject</VAR> in the use case.
*/
    UseCaseIterator GetUseCaseIterator(in SObject theObject);
  };
  //==========================================================================
/*! \brief %Driver interface

This class represents a common tool for all components integrated into SALOME application, that allows them to communicate with the study. It contains a set of methods which
can be called by any component and which provide the following functionality:
<ul>
    <li> publishing in the study of the objects created by a definite component
    <li> saving/loading of the data created by a definite component. These methods are called by the StudyManager when loading/saving a study containing the data created by a definite component.
    <li> transforming of the transient references into persistant references (or vice versa) of the SObjects when saving (or loading) a study
    <li> copy/paste common functionality. These methods can be called by any component in order to copy/paste its object created in the study
</ul>

*/
  //==========================================================================
  interface Driver
  {

    /*! \brief Saving the data produced by a definite component.

        This method is called by the StudyManager when saving a study.
       \param theComponent    %SComponent corresponding to this Component
       \param theURL  The path to the file in which the data will be saved.
       \param isMultiFile  If the value of this boolean parameter is True, the data will be saved in several files.
       \return A byte stream TMPFile that contains all saved data

<em>See \ref example19 for an example of this method usage in batchmode of %SALOME application.</em>

     */


    TMPFile Save(in SComponent theComponent, in string theURL, in boolean isMultiFile);

/*! \brief Saving the data in ASCII format produced by a definite component.

        This method is called by the StudyManager when saving a study in ASCII format.
       \param theComponent    %SComponent corresponding to this Component
       \param theURL  The path to the file in which the data will be saved.
       \param isMultiFile  If the value of this boolean parameter is True, the data will be saved in several files.
       \return A byte stream TMPFile that will contain all saved data

<em>See \ref example19 for an example of this method usage in batchmode of %SALOME application.</em>

     */
    TMPFile SaveASCII(in SComponent theComponent, in string theURL, in boolean isMultiFile);

    /*! \brief Loading the data.

       This method is called by the StudyManager when opening a study.
       \param theComponent      %SComponent corresponding to this Component
       \param theStream   The file which contains all data saved by the component on Save method
       \param isMultiFile  If the value of this boolean parameter is True, the data will be loaded from several files

     */

    boolean Load(in SComponent theComponent, in TMPFile theStream, in string theURL, in boolean isMultiFile);

    /*! \brief Loading the data from files in ASCII format.

       This method is called by the StudyManager when opening a study.
       \param theComponent      %SComponent corresponding to this Component
       \param theStream   The file which contains all data saved by the component on Save method
       \param isMultiFile  If the value of this boolean parameter is True, the data will be loaded from several files

     */

    boolean LoadASCII(in SComponent theComponent, in TMPFile theStream, in string theURL, in boolean isMultiFile);

    /*! \brief Closing of the study

      This method Close is called by the StudyManager when closing a study.
    \param aSComponent The according %SComponent
     */

    void Close (in SComponent aSComponent);
    //void Close ( in string  aIORSComponent);

    /*! Gets the type of the data

        \return The type of data produced by the Component in the study.
     */

     string ComponentDataType();

    // Driver Transient -> persistent called for each object in study
/*!
   Transforms IOR of a given %SObject into PersistentID. It is called for each
   object in the %study.
\note <br> In %SALOME the objects which are present in an active study are identified by an IOR, when this
study is saved these references are transformed into persintent IDs.

   \param theSObject The given %SObject.
   \param IORString The IOR of the given %SObject.
   \param isMultiFile If this parameter is True the study containing the given %SObject is stored in several files.
   \param isASCII If this parameter is True the study containing the given %SObject is stored in ASCII format.

   \return The persistent ID of the given %SObject

*/
    string IORToLocalPersistentID (in SObject theSObject,
				   in string IORString,
				   in boolean isMultiFile,
				   in boolean isASCII);
/*!
  Transforms PersistentID into IOR of the object. It is called for each
   object in the %study.

   \note <br> In %SALOME the objects which are present in an saved study (file) are identified by a persistent ID, when this
study is open, these references are transformed into persintent IORs.

   \param theSObject The given %SObject.
   \param IORString The IOR of the given %SObject.
   \param isMultiFile If this parameter is True the study containing the given %SObject is stored in several files.
   \param isASCII If this parameter is True the study containing the given %SObject is stored in ASCII format.

   \return The IOR of the given %SObject

*/
    string LocalPersistentIDToIOR (in SObject theSObject,
				   in string aLocalPersistentID,
				   in boolean isMultiFile,
				   in boolean isASCII)
      raises (SALOME::SALOME_Exception);

    // Publishing in the study
/*! Publishing in the study

    \return True if the given %Component can publish a definite object with a given IOR in the %study.
    \param theIOR The IOR of a definite object
*/
    boolean CanPublishInStudy(in Object theIOR) raises (SALOME::SALOME_Exception);
/*! \brief Publishing in the study

   Publishes the given object in the %study, using the algorithm of this component.
    \param theStudy     The %study in which the object is published
    \param theSObject     If this parameter is null the object is published for the first time. Otherwise
    this parameter should contain a reference to the object published earlier
    \param theObject      The object which is published
    \param theName      The name of the published object. If this parameter is empty, the name is generated
    automatically by the component.

    \return The published %SObject.
*/
    SObject PublishInStudy(in Study theStudy, in SObject theSObject, in Object theObject, in string theName);

    // copy/paste methods

/*!
    Returns True, if the given %SObject can be copied to the clipboard.

    \param theObject The given %SObject which should be copied.
*/
    boolean CanCopy(in SObject theObject);
/*!
    Returns the object %ID and the %TMPFile of the object from the given %SObject.
*/
    TMPFile CopyFrom(in SObject theObject, out long theObjectID);
/*!
    Returns True, if the component can paste the object with given %ID of the component with name <VAR>theComponentName</VAR>.
*/
    boolean CanPaste(in string theComponentName, in long theObjectID);
/*!
    Returns the %SObject of the pasted object.
*/
    SObject PasteInto(in TMPFile theStream, in long theObjectID, in SObject theObject);

  };
};

#endif

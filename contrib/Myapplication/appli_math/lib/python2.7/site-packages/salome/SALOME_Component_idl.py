# Python stubs generated by omniidl from /dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_Component.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "SALOME_GenericObj.idl"
import SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOME_Exception.idl"
import SALOME_Exception_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOMEDS.idl"
import SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("SALOMEDS__POA")
# #include "SALOME_PyNode.idl"
import SALOME_PyNode_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")

#
# Start of module "Engines"
#
__name__ = "Engines"
_0_Engines = omniORB.openModule("Engines", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_Component.idl")
_0_Engines__POA = omniORB.openModule("Engines__POA", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_Component.idl")


# typedef ... TMPFile
class TMPFile:
    _NP_RepositoryId = "IDL:Engines/TMPFile:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.TMPFile = TMPFile
_0_Engines._d_TMPFile  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_Engines._ad_TMPFile = (omniORB.tcInternal.tv_alias, TMPFile._NP_RepositoryId, "TMPFile", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_Engines._tc_TMPFile = omniORB.tcInternal.createTypeCode(_0_Engines._ad_TMPFile)
omniORB.registerType(TMPFile._NP_RepositoryId, _0_Engines._ad_TMPFile, _0_Engines._tc_TMPFile)
del TMPFile

# struct KeyValuePair
_0_Engines.KeyValuePair = omniORB.newEmptyClass()
class KeyValuePair (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Engines/KeyValuePair:1.0"

    def __init__(self, key, value):
        self.key = key
        self.value = value

_0_Engines.KeyValuePair = KeyValuePair
_0_Engines._d_KeyValuePair  = (omniORB.tcInternal.tv_struct, KeyValuePair, KeyValuePair._NP_RepositoryId, "KeyValuePair", "key", (omniORB.tcInternal.tv_string,0), "value", omniORB.tcInternal.tv_any)
_0_Engines._tc_KeyValuePair = omniORB.tcInternal.createTypeCode(_0_Engines._d_KeyValuePair)
omniORB.registerType(KeyValuePair._NP_RepositoryId, _0_Engines._d_KeyValuePair, _0_Engines._tc_KeyValuePair)
del KeyValuePair

# struct dataref
_0_Engines.dataref = omniORB.newEmptyClass()
class dataref (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Engines/dataref:1.0"

    def __init__(self, ref):
        self.ref = ref

_0_Engines.dataref = dataref
_0_Engines._d_dataref  = (omniORB.tcInternal.tv_struct, dataref, dataref._NP_RepositoryId, "dataref", "ref", (omniORB.tcInternal.tv_string,0))
_0_Engines._tc_dataref = omniORB.tcInternal.createTypeCode(_0_Engines._d_dataref)
omniORB.registerType(dataref._NP_RepositoryId, _0_Engines._d_dataref, _0_Engines._tc_dataref)
del dataref

# typedef ... FieldsDict
class FieldsDict:
    _NP_RepositoryId = "IDL:Engines/FieldsDict:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.FieldsDict = FieldsDict
_0_Engines._d_FieldsDict  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/KeyValuePair:1.0"], 0)
_0_Engines._ad_FieldsDict = (omniORB.tcInternal.tv_alias, FieldsDict._NP_RepositoryId, "FieldsDict", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/KeyValuePair:1.0"], 0))
_0_Engines._tc_FieldsDict = omniORB.tcInternal.createTypeCode(_0_Engines._ad_FieldsDict)
omniORB.registerType(FieldsDict._NP_RepositoryId, _0_Engines._ad_FieldsDict, _0_Engines._tc_FieldsDict)
del FieldsDict

# typedef ... ListOfOptions
class ListOfOptions:
    _NP_RepositoryId = "IDL:Engines/ListOfOptions:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.ListOfOptions = ListOfOptions
_0_Engines._d_ListOfOptions  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_Engines._ad_ListOfOptions = (omniORB.tcInternal.tv_alias, ListOfOptions._NP_RepositoryId, "ListOfOptions", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_Engines._tc_ListOfOptions = omniORB.tcInternal.createTypeCode(_0_Engines._ad_ListOfOptions)
omniORB.registerType(ListOfOptions._NP_RepositoryId, _0_Engines._ad_ListOfOptions, _0_Engines._tc_ListOfOptions)
del ListOfOptions

# typedef ... ListOfIdentifiers
class ListOfIdentifiers:
    _NP_RepositoryId = "IDL:Engines/ListOfIdentifiers:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.ListOfIdentifiers = ListOfIdentifiers
_0_Engines._d_ListOfIdentifiers  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_Engines._ad_ListOfIdentifiers = (omniORB.tcInternal.tv_alias, ListOfIdentifiers._NP_RepositoryId, "ListOfIdentifiers", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_Engines._tc_ListOfIdentifiers = omniORB.tcInternal.createTypeCode(_0_Engines._ad_ListOfIdentifiers)
omniORB.registerType(ListOfIdentifiers._NP_RepositoryId, _0_Engines._ad_ListOfIdentifiers, _0_Engines._tc_ListOfIdentifiers)
del ListOfIdentifiers

# interface EngineComponent;
_0_Engines._d_EngineComponent = (omniORB.tcInternal.tv_objref, "IDL:Engines/EngineComponent:1.0", "EngineComponent")
omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"] = _0_Engines._d_EngineComponent

# interface fileRef;
_0_Engines._d_fileRef = (omniORB.tcInternal.tv_objref, "IDL:Engines/fileRef:1.0", "fileRef")
omniORB.typeMapping["IDL:Engines/fileRef:1.0"] = _0_Engines._d_fileRef

# interface fileTransfer;
_0_Engines._d_fileTransfer = (omniORB.tcInternal.tv_objref, "IDL:Engines/fileTransfer:1.0", "fileTransfer")
omniORB.typeMapping["IDL:Engines/fileTransfer:1.0"] = _0_Engines._d_fileTransfer

# interface Salome_file;
_0_Engines._d_Salome_file = (omniORB.tcInternal.tv_objref, "IDL:Engines/Salome_file:1.0", "Salome_file")
omniORB.typeMapping["IDL:Engines/Salome_file:1.0"] = _0_Engines._d_Salome_file

# interface DataContainer;
_0_Engines._d_DataContainer = (omniORB.tcInternal.tv_objref, "IDL:Engines/DataContainer:1.0", "DataContainer")
omniORB.typeMapping["IDL:Engines/DataContainer:1.0"] = _0_Engines._d_DataContainer

# typedef ... ListOfData
class ListOfData:
    _NP_RepositoryId = "IDL:Engines/ListOfData:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.ListOfData = ListOfData
_0_Engines._d_ListOfData  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/DataContainer:1.0"], 0)
_0_Engines._ad_ListOfData = (omniORB.tcInternal.tv_alias, ListOfData._NP_RepositoryId, "ListOfData", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/DataContainer:1.0"], 0))
_0_Engines._tc_ListOfData = omniORB.tcInternal.createTypeCode(_0_Engines._ad_ListOfData)
omniORB.registerType(ListOfData._NP_RepositoryId, _0_Engines._ad_ListOfData, _0_Engines._tc_ListOfData)
del ListOfData

# interface Container
_0_Engines._d_Container = (omniORB.tcInternal.tv_objref, "IDL:Engines/Container:1.0", "Container")
omniORB.typeMapping["IDL:Engines/Container:1.0"] = _0_Engines._d_Container
_0_Engines.Container = omniORB.newEmptyClass()
class Container :
    _NP_RepositoryId = _0_Engines._d_Container[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.Container = Container
_0_Engines._tc_Container = omniORB.tcInternal.createTypeCode(_0_Engines._d_Container)
omniORB.registerType(Container._NP_RepositoryId, _0_Engines._d_Container, _0_Engines._tc_Container)

# Container operations and attributes
Container._d_load_component_Library = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, (omniORB.tcInternal.tv_string,0)), None)
Container._d_create_component_instance = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"], ), None)
Container._d_create_component_instance_env = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:Engines/FieldsDict:1.0"]), (omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"], (omniORB.tcInternal.tv_string,0)), None)
Container._d_find_component_instance = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"], ), None)
Container._d_load_impl = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"], ), None)
Container._d_remove_impl = ((omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"], ), (), None)
Container._d_finalize_removal = ((), (), None)
Container._d_ping = ((), (), None)
Container._d__get_name = ((),((omniORB.tcInternal.tv_string,0),),None)
Container._d__get_workingdir = ((),((omniORB.tcInternal.tv_string,0),),None)
Container._d__get_logfilename = ((),((omniORB.tcInternal.tv_string,0),),None)
Container._d__set_logfilename = (((omniORB.tcInternal.tv_string,0),),(),None)
Container._d_Shutdown = ((), (), None)
Container._d_getHostName = ((), ((omniORB.tcInternal.tv_string,0), ), None)
Container._d_getPID = ((), (omniORB.tcInternal.tv_long, ), None)
Container._d_Kill_impl = ((), (omniORB.tcInternal.tv_boolean, ), None)
Container._d_createFileRef = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/fileRef:1.0"], ), None)
Container._d_createSalome_file = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/Salome_file:1.0"], ), None)
Container._d_getFileTransfer = ((), (omniORB.typeMapping["IDL:Engines/fileTransfer:1.0"], ), None)
Container._d_copyFile = ((omniORB.typeMapping["IDL:Engines/Container:1.0"], (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
Container._d_createPyNode = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/PyNode:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Container._d_createPyScriptNode = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/PyScriptNode:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})

# Container object reference
class _objref_Container (CORBA.Object):
    _NP_RepositoryId = Container._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def load_component_Library(self, *args):
        return _omnipy.invoke(self, "load_component_Library", _0_Engines.Container._d_load_component_Library, args)

    def create_component_instance(self, *args):
        return _omnipy.invoke(self, "create_component_instance", _0_Engines.Container._d_create_component_instance, args)

    def create_component_instance_env(self, *args):
        return _omnipy.invoke(self, "create_component_instance_env", _0_Engines.Container._d_create_component_instance_env, args)

    def find_component_instance(self, *args):
        return _omnipy.invoke(self, "find_component_instance", _0_Engines.Container._d_find_component_instance, args)

    def load_impl(self, *args):
        return _omnipy.invoke(self, "load_impl", _0_Engines.Container._d_load_impl, args)

    def remove_impl(self, *args):
        return _omnipy.invoke(self, "remove_impl", _0_Engines.Container._d_remove_impl, args)

    def finalize_removal(self, *args):
        return _omnipy.invoke(self, "finalize_removal", _0_Engines.Container._d_finalize_removal, args)

    def ping(self, *args):
        return _omnipy.invoke(self, "ping", _0_Engines.Container._d_ping, args)

    def _get_name(self, *args):
        return _omnipy.invoke(self, "_get_name", _0_Engines.Container._d__get_name, args)

    def _get_workingdir(self, *args):
        return _omnipy.invoke(self, "_get_workingdir", _0_Engines.Container._d__get_workingdir, args)

    def _get_logfilename(self, *args):
        return _omnipy.invoke(self, "_get_logfilename", _0_Engines.Container._d__get_logfilename, args)

    def _set_logfilename(self, *args):
        return _omnipy.invoke(self, "_set_logfilename", _0_Engines.Container._d__set_logfilename, args)

    def Shutdown(self, *args):
        return _omnipy.invoke(self, "Shutdown", _0_Engines.Container._d_Shutdown, args)

    def getHostName(self, *args):
        return _omnipy.invoke(self, "getHostName", _0_Engines.Container._d_getHostName, args)

    def getPID(self, *args):
        return _omnipy.invoke(self, "getPID", _0_Engines.Container._d_getPID, args)

    def Kill_impl(self, *args):
        return _omnipy.invoke(self, "Kill_impl", _0_Engines.Container._d_Kill_impl, args)

    def createFileRef(self, *args):
        return _omnipy.invoke(self, "createFileRef", _0_Engines.Container._d_createFileRef, args)

    def createSalome_file(self, *args):
        return _omnipy.invoke(self, "createSalome_file", _0_Engines.Container._d_createSalome_file, args)

    def getFileTransfer(self, *args):
        return _omnipy.invoke(self, "getFileTransfer", _0_Engines.Container._d_getFileTransfer, args)

    def copyFile(self, *args):
        return _omnipy.invoke(self, "copyFile", _0_Engines.Container._d_copyFile, args)

    def createPyNode(self, *args):
        return _omnipy.invoke(self, "createPyNode", _0_Engines.Container._d_createPyNode, args)

    def createPyScriptNode(self, *args):
        return _omnipy.invoke(self, "createPyScriptNode", _0_Engines.Container._d_createPyScriptNode, args)

    __methods__ = ["load_component_Library", "create_component_instance", "create_component_instance_env", "find_component_instance", "load_impl", "remove_impl", "finalize_removal", "ping", "_get_name", "_get_workingdir", "_get_logfilename", "_set_logfilename", "Shutdown", "getHostName", "getPID", "Kill_impl", "createFileRef", "createSalome_file", "getFileTransfer", "copyFile", "createPyNode", "createPyScriptNode"] + CORBA.Object.__methods__

omniORB.registerObjref(Container._NP_RepositoryId, _objref_Container)
_0_Engines._objref_Container = _objref_Container
del Container, _objref_Container

# Container skeleton
__name__ = "Engines__POA"
class Container (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.Container._NP_RepositoryId


    _omni_op_d = {"load_component_Library": _0_Engines.Container._d_load_component_Library, "create_component_instance": _0_Engines.Container._d_create_component_instance, "create_component_instance_env": _0_Engines.Container._d_create_component_instance_env, "find_component_instance": _0_Engines.Container._d_find_component_instance, "load_impl": _0_Engines.Container._d_load_impl, "remove_impl": _0_Engines.Container._d_remove_impl, "finalize_removal": _0_Engines.Container._d_finalize_removal, "ping": _0_Engines.Container._d_ping, "_get_name": _0_Engines.Container._d__get_name, "_get_workingdir": _0_Engines.Container._d__get_workingdir, "_get_logfilename": _0_Engines.Container._d__get_logfilename, "_set_logfilename": _0_Engines.Container._d__set_logfilename, "Shutdown": _0_Engines.Container._d_Shutdown, "getHostName": _0_Engines.Container._d_getHostName, "getPID": _0_Engines.Container._d_getPID, "Kill_impl": _0_Engines.Container._d_Kill_impl, "createFileRef": _0_Engines.Container._d_createFileRef, "createSalome_file": _0_Engines.Container._d_createSalome_file, "getFileTransfer": _0_Engines.Container._d_getFileTransfer, "copyFile": _0_Engines.Container._d_copyFile, "createPyNode": _0_Engines.Container._d_createPyNode, "createPyScriptNode": _0_Engines.Container._d_createPyScriptNode}

Container._omni_skeleton = Container
_0_Engines__POA.Container = Container
omniORB.registerSkeleton(Container._NP_RepositoryId, Container)
del Container
__name__ = "Engines"

# interface DataContainer
_0_Engines._d_DataContainer = (omniORB.tcInternal.tv_objref, "IDL:Engines/DataContainer:1.0", "DataContainer")
omniORB.typeMapping["IDL:Engines/DataContainer:1.0"] = _0_Engines._d_DataContainer
_0_Engines.DataContainer = omniORB.newEmptyClass()
class DataContainer :
    _NP_RepositoryId = _0_Engines._d_DataContainer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.DataContainer = DataContainer
_0_Engines._tc_DataContainer = omniORB.tcInternal.createTypeCode(_0_Engines._d_DataContainer)
omniORB.registerType(DataContainer._NP_RepositoryId, _0_Engines._d_DataContainer, _0_Engines._tc_DataContainer)

# DataContainer operations and attributes
DataContainer._d_get = ((), (omniORB.typeMapping["IDL:Engines/TMPFile:1.0"], ), None)
DataContainer._d_name = ((), ((omniORB.tcInternal.tv_string,0), ), None)
DataContainer._d_identifier = ((), ((omniORB.tcInternal.tv_string,0), ), None)
DataContainer._d_extension = ((), ((omniORB.tcInternal.tv_string,0), ), None)
DataContainer._d_setExtension = (((omniORB.tcInternal.tv_string,0), ), (), None)

# DataContainer object reference
class _objref_DataContainer (CORBA.Object):
    _NP_RepositoryId = DataContainer._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def get(self, *args):
        return _omnipy.invoke(self, "get", _0_Engines.DataContainer._d_get, args)

    def name(self, *args):
        return _omnipy.invoke(self, "name", _0_Engines.DataContainer._d_name, args)

    def identifier(self, *args):
        return _omnipy.invoke(self, "identifier", _0_Engines.DataContainer._d_identifier, args)

    def extension(self, *args):
        return _omnipy.invoke(self, "extension", _0_Engines.DataContainer._d_extension, args)

    def setExtension(self, *args):
        return _omnipy.invoke(self, "setExtension", _0_Engines.DataContainer._d_setExtension, args)

    __methods__ = ["get", "name", "identifier", "extension", "setExtension"] + CORBA.Object.__methods__

omniORB.registerObjref(DataContainer._NP_RepositoryId, _objref_DataContainer)
_0_Engines._objref_DataContainer = _objref_DataContainer
del DataContainer, _objref_DataContainer

# DataContainer skeleton
__name__ = "Engines__POA"
class DataContainer (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.DataContainer._NP_RepositoryId


    _omni_op_d = {"get": _0_Engines.DataContainer._d_get, "name": _0_Engines.DataContainer._d_name, "identifier": _0_Engines.DataContainer._d_identifier, "extension": _0_Engines.DataContainer._d_extension, "setExtension": _0_Engines.DataContainer._d_setExtension}

DataContainer._omni_skeleton = DataContainer
_0_Engines__POA.DataContainer = DataContainer
omniORB.registerSkeleton(DataContainer._NP_RepositoryId, DataContainer)
del DataContainer
__name__ = "Engines"

# interface EngineComponent
_0_Engines._d_EngineComponent = (omniORB.tcInternal.tv_objref, "IDL:Engines/EngineComponent:1.0", "EngineComponent")
omniORB.typeMapping["IDL:Engines/EngineComponent:1.0"] = _0_Engines._d_EngineComponent
_0_Engines.EngineComponent = omniORB.newEmptyClass()
class EngineComponent :
    _NP_RepositoryId = _0_Engines._d_EngineComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.EngineComponent = EngineComponent
_0_Engines._tc_EngineComponent = omniORB.tcInternal.createTypeCode(_0_Engines._d_EngineComponent)
omniORB.registerType(EngineComponent._NP_RepositoryId, _0_Engines._d_EngineComponent, _0_Engines._tc_EngineComponent)

# EngineComponent operations and attributes
EngineComponent._d__get_instanceName = ((),((omniORB.tcInternal.tv_string,0),),None)
EngineComponent._d__get_interfaceName = ((),((omniORB.tcInternal.tv_string,0),),None)
EngineComponent._d_ping = ((), (), None)
EngineComponent._d_getStudyId = ((), (omniORB.tcInternal.tv_long, ), None)
EngineComponent._d_destroy = ((), (), None)
EngineComponent._d_GetContainerRef = ((), (omniORB.typeMapping["IDL:Engines/Container:1.0"], ), None)
EngineComponent._d_setProperties = ((omniORB.typeMapping["IDL:Engines/FieldsDict:1.0"], ), (), None)
EngineComponent._d_getProperties = ((), (omniORB.typeMapping["IDL:Engines/FieldsDict:1.0"], ), None)
EngineComponent._d_SetOption = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
EngineComponent._d_GetOption = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
EngineComponent._d_Names = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
EngineComponent._d_Kill_impl = ((), (omniORB.tcInternal.tv_boolean, ), None)
EngineComponent._d_Stop_impl = ((), (omniORB.tcInternal.tv_boolean, ), None)
EngineComponent._d_Suspend_impl = ((), (omniORB.tcInternal.tv_boolean, ), None)
EngineComponent._d_Resume_impl = ((), (omniORB.tcInternal.tv_boolean, ), None)
EngineComponent._d_CpuUsed_impl = ((), (omniORB.tcInternal.tv_long, ), None)
EngineComponent._d_DumpPython = ((omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:Engines/TMPFile:1.0"], omniORB.tcInternal.tv_boolean), None)
EngineComponent._d_getInputFileToService = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/Salome_file:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
EngineComponent._d_checkInputFilesToService = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
EngineComponent._d_setInputFileToService = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/Salome_file:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
EngineComponent._d_getOutputFileToService = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/Salome_file:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
EngineComponent._d_checkOutputFilesToService = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
EngineComponent._d_setOutputFileToService = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:Engines/Salome_file:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
EngineComponent._d_hasObjectInfo = ((), (omniORB.tcInternal.tv_boolean, ), None)
EngineComponent._d_getObjectInfo = ((omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
EngineComponent._d_getVersion = ((), ((omniORB.tcInternal.tv_string,0), ), None)
EngineComponent._d_importData = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:Engines/DataContainer:1.0"], omniORB.typeMapping["IDL:Engines/ListOfOptions:1.0"]), (omniORB.typeMapping["IDL:Engines/ListOfIdentifiers:1.0"], ), None)
EngineComponent._d_getModifiedData = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:Engines/ListOfData:1.0"], ), None)

# EngineComponent object reference
class _objref_EngineComponent (CORBA.Object):
    _NP_RepositoryId = EngineComponent._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_instanceName(self, *args):
        return _omnipy.invoke(self, "_get_instanceName", _0_Engines.EngineComponent._d__get_instanceName, args)

    def _get_interfaceName(self, *args):
        return _omnipy.invoke(self, "_get_interfaceName", _0_Engines.EngineComponent._d__get_interfaceName, args)

    def ping(self, *args):
        return _omnipy.invoke(self, "ping", _0_Engines.EngineComponent._d_ping, args)

    def getStudyId(self, *args):
        return _omnipy.invoke(self, "getStudyId", _0_Engines.EngineComponent._d_getStudyId, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_Engines.EngineComponent._d_destroy, args)

    def GetContainerRef(self, *args):
        return _omnipy.invoke(self, "GetContainerRef", _0_Engines.EngineComponent._d_GetContainerRef, args)

    def setProperties(self, *args):
        return _omnipy.invoke(self, "setProperties", _0_Engines.EngineComponent._d_setProperties, args)

    def getProperties(self, *args):
        return _omnipy.invoke(self, "getProperties", _0_Engines.EngineComponent._d_getProperties, args)

    def SetOption(self, *args):
        return _omnipy.invoke(self, "SetOption", _0_Engines.EngineComponent._d_SetOption, args)

    def GetOption(self, *args):
        return _omnipy.invoke(self, "GetOption", _0_Engines.EngineComponent._d_GetOption, args)

    def Names(self, *args):
        return _omnipy.invoke(self, "Names", _0_Engines.EngineComponent._d_Names, args)

    def Kill_impl(self, *args):
        return _omnipy.invoke(self, "Kill_impl", _0_Engines.EngineComponent._d_Kill_impl, args)

    def Stop_impl(self, *args):
        return _omnipy.invoke(self, "Stop_impl", _0_Engines.EngineComponent._d_Stop_impl, args)

    def Suspend_impl(self, *args):
        return _omnipy.invoke(self, "Suspend_impl", _0_Engines.EngineComponent._d_Suspend_impl, args)

    def Resume_impl(self, *args):
        return _omnipy.invoke(self, "Resume_impl", _0_Engines.EngineComponent._d_Resume_impl, args)

    def CpuUsed_impl(self, *args):
        return _omnipy.invoke(self, "CpuUsed_impl", _0_Engines.EngineComponent._d_CpuUsed_impl, args)

    def DumpPython(self, *args):
        return _omnipy.invoke(self, "DumpPython", _0_Engines.EngineComponent._d_DumpPython, args)

    def getInputFileToService(self, *args):
        return _omnipy.invoke(self, "getInputFileToService", _0_Engines.EngineComponent._d_getInputFileToService, args)

    def checkInputFilesToService(self, *args):
        return _omnipy.invoke(self, "checkInputFilesToService", _0_Engines.EngineComponent._d_checkInputFilesToService, args)

    def setInputFileToService(self, *args):
        return _omnipy.invoke(self, "setInputFileToService", _0_Engines.EngineComponent._d_setInputFileToService, args)

    def getOutputFileToService(self, *args):
        return _omnipy.invoke(self, "getOutputFileToService", _0_Engines.EngineComponent._d_getOutputFileToService, args)

    def checkOutputFilesToService(self, *args):
        return _omnipy.invoke(self, "checkOutputFilesToService", _0_Engines.EngineComponent._d_checkOutputFilesToService, args)

    def setOutputFileToService(self, *args):
        return _omnipy.invoke(self, "setOutputFileToService", _0_Engines.EngineComponent._d_setOutputFileToService, args)

    def hasObjectInfo(self, *args):
        return _omnipy.invoke(self, "hasObjectInfo", _0_Engines.EngineComponent._d_hasObjectInfo, args)

    def getObjectInfo(self, *args):
        return _omnipy.invoke(self, "getObjectInfo", _0_Engines.EngineComponent._d_getObjectInfo, args)

    def getVersion(self, *args):
        return _omnipy.invoke(self, "getVersion", _0_Engines.EngineComponent._d_getVersion, args)

    def importData(self, *args):
        return _omnipy.invoke(self, "importData", _0_Engines.EngineComponent._d_importData, args)

    def getModifiedData(self, *args):
        return _omnipy.invoke(self, "getModifiedData", _0_Engines.EngineComponent._d_getModifiedData, args)

    __methods__ = ["_get_instanceName", "_get_interfaceName", "ping", "getStudyId", "destroy", "GetContainerRef", "setProperties", "getProperties", "SetOption", "GetOption", "Names", "Kill_impl", "Stop_impl", "Suspend_impl", "Resume_impl", "CpuUsed_impl", "DumpPython", "getInputFileToService", "checkInputFilesToService", "setInputFileToService", "getOutputFileToService", "checkOutputFilesToService", "setOutputFileToService", "hasObjectInfo", "getObjectInfo", "getVersion", "importData", "getModifiedData"] + CORBA.Object.__methods__

omniORB.registerObjref(EngineComponent._NP_RepositoryId, _objref_EngineComponent)
_0_Engines._objref_EngineComponent = _objref_EngineComponent
del EngineComponent, _objref_EngineComponent

# EngineComponent skeleton
__name__ = "Engines__POA"
class EngineComponent (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.EngineComponent._NP_RepositoryId


    _omni_op_d = {"_get_instanceName": _0_Engines.EngineComponent._d__get_instanceName, "_get_interfaceName": _0_Engines.EngineComponent._d__get_interfaceName, "ping": _0_Engines.EngineComponent._d_ping, "getStudyId": _0_Engines.EngineComponent._d_getStudyId, "destroy": _0_Engines.EngineComponent._d_destroy, "GetContainerRef": _0_Engines.EngineComponent._d_GetContainerRef, "setProperties": _0_Engines.EngineComponent._d_setProperties, "getProperties": _0_Engines.EngineComponent._d_getProperties, "SetOption": _0_Engines.EngineComponent._d_SetOption, "GetOption": _0_Engines.EngineComponent._d_GetOption, "Names": _0_Engines.EngineComponent._d_Names, "Kill_impl": _0_Engines.EngineComponent._d_Kill_impl, "Stop_impl": _0_Engines.EngineComponent._d_Stop_impl, "Suspend_impl": _0_Engines.EngineComponent._d_Suspend_impl, "Resume_impl": _0_Engines.EngineComponent._d_Resume_impl, "CpuUsed_impl": _0_Engines.EngineComponent._d_CpuUsed_impl, "DumpPython": _0_Engines.EngineComponent._d_DumpPython, "getInputFileToService": _0_Engines.EngineComponent._d_getInputFileToService, "checkInputFilesToService": _0_Engines.EngineComponent._d_checkInputFilesToService, "setInputFileToService": _0_Engines.EngineComponent._d_setInputFileToService, "getOutputFileToService": _0_Engines.EngineComponent._d_getOutputFileToService, "checkOutputFilesToService": _0_Engines.EngineComponent._d_checkOutputFilesToService, "setOutputFileToService": _0_Engines.EngineComponent._d_setOutputFileToService, "hasObjectInfo": _0_Engines.EngineComponent._d_hasObjectInfo, "getObjectInfo": _0_Engines.EngineComponent._d_getObjectInfo, "getVersion": _0_Engines.EngineComponent._d_getVersion, "importData": _0_Engines.EngineComponent._d_importData, "getModifiedData": _0_Engines.EngineComponent._d_getModifiedData}

EngineComponent._omni_skeleton = EngineComponent
_0_Engines__POA.EngineComponent = EngineComponent
omniORB.registerSkeleton(EngineComponent._NP_RepositoryId, EngineComponent)
del EngineComponent
__name__ = "Engines"

# interface ImportableComponent
_0_Engines._d_ImportableComponent = (omniORB.tcInternal.tv_objref, "IDL:Engines/ImportableComponent:1.0", "ImportableComponent")
omniORB.typeMapping["IDL:Engines/ImportableComponent:1.0"] = _0_Engines._d_ImportableComponent
_0_Engines.ImportableComponent = omniORB.newEmptyClass()
class ImportableComponent :
    _NP_RepositoryId = _0_Engines._d_ImportableComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.ImportableComponent = ImportableComponent
_0_Engines._tc_ImportableComponent = omniORB.tcInternal.createTypeCode(_0_Engines._d_ImportableComponent)
omniORB.registerType(ImportableComponent._NP_RepositoryId, _0_Engines._d_ImportableComponent, _0_Engines._tc_ImportableComponent)

# ImportableComponent operations and attributes
ImportableComponent._d_GetImportableFormats = ((), (omniORB.typeMapping["IDL:SALOME/StringSeq:1.0"], ), None)
ImportableComponent._d_ImportDataAs = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:SALOME/GenericObj:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)

# ImportableComponent object reference
class _objref_ImportableComponent (CORBA.Object):
    _NP_RepositoryId = ImportableComponent._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def GetImportableFormats(self, *args):
        return _omnipy.invoke(self, "GetImportableFormats", _0_Engines.ImportableComponent._d_GetImportableFormats, args)

    def ImportDataAs(self, *args):
        return _omnipy.invoke(self, "ImportDataAs", _0_Engines.ImportableComponent._d_ImportDataAs, args)

    __methods__ = ["GetImportableFormats", "ImportDataAs"] + CORBA.Object.__methods__

omniORB.registerObjref(ImportableComponent._NP_RepositoryId, _objref_ImportableComponent)
_0_Engines._objref_ImportableComponent = _objref_ImportableComponent
del ImportableComponent, _objref_ImportableComponent

# ImportableComponent skeleton
__name__ = "Engines__POA"
class ImportableComponent (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.ImportableComponent._NP_RepositoryId


    _omni_op_d = {"GetImportableFormats": _0_Engines.ImportableComponent._d_GetImportableFormats, "ImportDataAs": _0_Engines.ImportableComponent._d_ImportDataAs}

ImportableComponent._omni_skeleton = ImportableComponent
_0_Engines__POA.ImportableComponent = ImportableComponent
omniORB.registerSkeleton(ImportableComponent._NP_RepositoryId, ImportableComponent)
del ImportableComponent
__name__ = "Engines"

# typedef ... fileBlock
class fileBlock:
    _NP_RepositoryId = "IDL:Engines/fileBlock:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.fileBlock = fileBlock
_0_Engines._d_fileBlock  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_Engines._ad_fileBlock = (omniORB.tcInternal.tv_alias, fileBlock._NP_RepositoryId, "fileBlock", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_Engines._tc_fileBlock = omniORB.tcInternal.createTypeCode(_0_Engines._ad_fileBlock)
omniORB.registerType(fileBlock._NP_RepositoryId, _0_Engines._ad_fileBlock, _0_Engines._tc_fileBlock)
del fileBlock

# interface fileTransfer
_0_Engines._d_fileTransfer = (omniORB.tcInternal.tv_objref, "IDL:Engines/fileTransfer:1.0", "fileTransfer")
omniORB.typeMapping["IDL:Engines/fileTransfer:1.0"] = _0_Engines._d_fileTransfer
_0_Engines.fileTransfer = omniORB.newEmptyClass()
class fileTransfer (_0_SALOME.GenericObj):
    _NP_RepositoryId = _0_Engines._d_fileTransfer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.fileTransfer = fileTransfer
_0_Engines._tc_fileTransfer = omniORB.tcInternal.createTypeCode(_0_Engines._d_fileTransfer)
omniORB.registerType(fileTransfer._NP_RepositoryId, _0_Engines._d_fileTransfer, _0_Engines._tc_fileTransfer)

# fileTransfer operations and attributes
fileTransfer._d_open = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), None)
fileTransfer._d_openW = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), None)
fileTransfer._d_close = ((omniORB.tcInternal.tv_long, ), (), None)
fileTransfer._d_getBlock = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:Engines/fileBlock:1.0"], ), None)
fileTransfer._d_putBlock = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:Engines/fileBlock:1.0"]), (), None)

# fileTransfer object reference
class _objref_fileTransfer (_0_SALOME._objref_GenericObj):
    _NP_RepositoryId = fileTransfer._NP_RepositoryId

    def __init__(self):
        _0_SALOME._objref_GenericObj.__init__(self)

    def open(self, *args):
        return _omnipy.invoke(self, "open", _0_Engines.fileTransfer._d_open, args)

    def openW(self, *args):
        return _omnipy.invoke(self, "openW", _0_Engines.fileTransfer._d_openW, args)

    def close(self, *args):
        return _omnipy.invoke(self, "close", _0_Engines.fileTransfer._d_close, args)

    def getBlock(self, *args):
        return _omnipy.invoke(self, "getBlock", _0_Engines.fileTransfer._d_getBlock, args)

    def putBlock(self, *args):
        return _omnipy.invoke(self, "putBlock", _0_Engines.fileTransfer._d_putBlock, args)

    __methods__ = ["open", "openW", "close", "getBlock", "putBlock"] + _0_SALOME._objref_GenericObj.__methods__

omniORB.registerObjref(fileTransfer._NP_RepositoryId, _objref_fileTransfer)
_0_Engines._objref_fileTransfer = _objref_fileTransfer
del fileTransfer, _objref_fileTransfer

# fileTransfer skeleton
__name__ = "Engines__POA"
class fileTransfer (_0_SALOME__POA.GenericObj):
    _NP_RepositoryId = _0_Engines.fileTransfer._NP_RepositoryId


    _omni_op_d = {"open": _0_Engines.fileTransfer._d_open, "openW": _0_Engines.fileTransfer._d_openW, "close": _0_Engines.fileTransfer._d_close, "getBlock": _0_Engines.fileTransfer._d_getBlock, "putBlock": _0_Engines.fileTransfer._d_putBlock}
    _omni_op_d.update(_0_SALOME__POA.GenericObj._omni_op_d)

fileTransfer._omni_skeleton = fileTransfer
_0_Engines__POA.fileTransfer = fileTransfer
omniORB.registerSkeleton(fileTransfer._NP_RepositoryId, fileTransfer)
del fileTransfer
__name__ = "Engines"

# struct file
_0_Engines.file = omniORB.newEmptyClass()
class file (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Engines/file:1.0"

    def __init__(self, file_name, path, type, source_file_name, status, node, container):
        self.file_name = file_name
        self.path = path
        self.type = type
        self.source_file_name = source_file_name
        self.status = status
        self.node = node
        self.container = container

_0_Engines.file = file
_0_Engines._d_file  = (omniORB.tcInternal.tv_struct, file, file._NP_RepositoryId, "file", "file_name", (omniORB.tcInternal.tv_string,0), "path", (omniORB.tcInternal.tv_string,0), "type", (omniORB.tcInternal.tv_string,0), "source_file_name", (omniORB.tcInternal.tv_string,0), "status", (omniORB.tcInternal.tv_string,0), "node", omniORB.tcInternal.tv_long, "container", omniORB.typeMapping["IDL:Engines/Container:1.0"])
_0_Engines._tc_file = omniORB.tcInternal.createTypeCode(_0_Engines._d_file)
omniORB.registerType(file._NP_RepositoryId, _0_Engines._d_file, _0_Engines._tc_file)
del file

# typedef ... files
class files:
    _NP_RepositoryId = "IDL:Engines/files:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.files = files
_0_Engines._d_files  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/file:1.0"], 0)
_0_Engines._ad_files = (omniORB.tcInternal.tv_alias, files._NP_RepositoryId, "files", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Engines/file:1.0"], 0))
_0_Engines._tc_files = omniORB.tcInternal.createTypeCode(_0_Engines._ad_files)
omniORB.registerType(files._NP_RepositoryId, _0_Engines._ad_files, _0_Engines._tc_files)
del files

# struct SfState
_0_Engines.SfState = omniORB.newEmptyClass()
class SfState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Engines/SfState:1.0"

    def __init__(self, name, hdf5_file_name, number_of_files, files_ok):
        self.name = name
        self.hdf5_file_name = hdf5_file_name
        self.number_of_files = number_of_files
        self.files_ok = files_ok

_0_Engines.SfState = SfState
_0_Engines._d_SfState  = (omniORB.tcInternal.tv_struct, SfState, SfState._NP_RepositoryId, "SfState", "name", (omniORB.tcInternal.tv_string,0), "hdf5_file_name", (omniORB.tcInternal.tv_string,0), "number_of_files", omniORB.tcInternal.tv_long, "files_ok", omniORB.tcInternal.tv_boolean)
_0_Engines._tc_SfState = omniORB.tcInternal.createTypeCode(_0_Engines._d_SfState)
omniORB.registerType(SfState._NP_RepositoryId, _0_Engines._d_SfState, _0_Engines._tc_SfState)
del SfState

# interface Salome_file
_0_Engines._d_Salome_file = (omniORB.tcInternal.tv_objref, "IDL:Engines/Salome_file:1.0", "Salome_file")
omniORB.typeMapping["IDL:Engines/Salome_file:1.0"] = _0_Engines._d_Salome_file
_0_Engines.Salome_file = omniORB.newEmptyClass()
class Salome_file (_0_Engines.fileTransfer):
    _NP_RepositoryId = _0_Engines._d_Salome_file[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.Salome_file = Salome_file
_0_Engines._tc_Salome_file = omniORB.tcInternal.createTypeCode(_0_Engines._d_Salome_file)
omniORB.registerType(Salome_file._NP_RepositoryId, _0_Engines._d_Salome_file, _0_Engines._tc_Salome_file)

# Salome_file operations and attributes
Salome_file._d_load = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_save = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_save_all = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_setLocalFile = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_setDistributedFile = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_connect = ((omniORB.typeMapping["IDL:Engines/Salome_file:1.0"], ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_connectDistributedFile = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Engines/Salome_file:1.0"]), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_setDistributedSourceFile = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_recvFiles = ((), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_removeFile = (((omniORB.tcInternal.tv_string,0), ), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_removeFiles = ((), (), None)
Salome_file._d_getFilesInfos = ((), (omniORB.typeMapping["IDL:Engines/files:1.0"], ), None)
Salome_file._d_getFileInfos = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Engines/file:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Salome_file._d_getSalome_fileState = ((), (omniORB.typeMapping["IDL:Engines/SfState:1.0"], ), None)
Salome_file._d_setContainer = ((omniORB.typeMapping["IDL:Engines/Container:1.0"], ), (), None)

# Salome_file object reference
class _objref_Salome_file (_0_Engines._objref_fileTransfer):
    _NP_RepositoryId = Salome_file._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_fileTransfer.__init__(self)

    def load(self, *args):
        return _omnipy.invoke(self, "load", _0_Engines.Salome_file._d_load, args)

    def save(self, *args):
        return _omnipy.invoke(self, "save", _0_Engines.Salome_file._d_save, args)

    def save_all(self, *args):
        return _omnipy.invoke(self, "save_all", _0_Engines.Salome_file._d_save_all, args)

    def setLocalFile(self, *args):
        return _omnipy.invoke(self, "setLocalFile", _0_Engines.Salome_file._d_setLocalFile, args)

    def setDistributedFile(self, *args):
        return _omnipy.invoke(self, "setDistributedFile", _0_Engines.Salome_file._d_setDistributedFile, args)

    def connect(self, *args):
        return _omnipy.invoke(self, "connect", _0_Engines.Salome_file._d_connect, args)

    def connectDistributedFile(self, *args):
        return _omnipy.invoke(self, "connectDistributedFile", _0_Engines.Salome_file._d_connectDistributedFile, args)

    def setDistributedSourceFile(self, *args):
        return _omnipy.invoke(self, "setDistributedSourceFile", _0_Engines.Salome_file._d_setDistributedSourceFile, args)

    def recvFiles(self, *args):
        return _omnipy.invoke(self, "recvFiles", _0_Engines.Salome_file._d_recvFiles, args)

    def removeFile(self, *args):
        return _omnipy.invoke(self, "removeFile", _0_Engines.Salome_file._d_removeFile, args)

    def removeFiles(self, *args):
        return _omnipy.invoke(self, "removeFiles", _0_Engines.Salome_file._d_removeFiles, args)

    def getFilesInfos(self, *args):
        return _omnipy.invoke(self, "getFilesInfos", _0_Engines.Salome_file._d_getFilesInfos, args)

    def getFileInfos(self, *args):
        return _omnipy.invoke(self, "getFileInfos", _0_Engines.Salome_file._d_getFileInfos, args)

    def getSalome_fileState(self, *args):
        return _omnipy.invoke(self, "getSalome_fileState", _0_Engines.Salome_file._d_getSalome_fileState, args)

    def setContainer(self, *args):
        return _omnipy.invoke(self, "setContainer", _0_Engines.Salome_file._d_setContainer, args)

    __methods__ = ["load", "save", "save_all", "setLocalFile", "setDistributedFile", "connect", "connectDistributedFile", "setDistributedSourceFile", "recvFiles", "removeFile", "removeFiles", "getFilesInfos", "getFileInfos", "getSalome_fileState", "setContainer"] + _0_Engines._objref_fileTransfer.__methods__

omniORB.registerObjref(Salome_file._NP_RepositoryId, _objref_Salome_file)
_0_Engines._objref_Salome_file = _objref_Salome_file
del Salome_file, _objref_Salome_file

# Salome_file skeleton
__name__ = "Engines__POA"
class Salome_file (_0_Engines__POA.fileTransfer):
    _NP_RepositoryId = _0_Engines.Salome_file._NP_RepositoryId


    _omni_op_d = {"load": _0_Engines.Salome_file._d_load, "save": _0_Engines.Salome_file._d_save, "save_all": _0_Engines.Salome_file._d_save_all, "setLocalFile": _0_Engines.Salome_file._d_setLocalFile, "setDistributedFile": _0_Engines.Salome_file._d_setDistributedFile, "connect": _0_Engines.Salome_file._d_connect, "connectDistributedFile": _0_Engines.Salome_file._d_connectDistributedFile, "setDistributedSourceFile": _0_Engines.Salome_file._d_setDistributedSourceFile, "recvFiles": _0_Engines.Salome_file._d_recvFiles, "removeFile": _0_Engines.Salome_file._d_removeFile, "removeFiles": _0_Engines.Salome_file._d_removeFiles, "getFilesInfos": _0_Engines.Salome_file._d_getFilesInfos, "getFileInfos": _0_Engines.Salome_file._d_getFileInfos, "getSalome_fileState": _0_Engines.Salome_file._d_getSalome_fileState, "setContainer": _0_Engines.Salome_file._d_setContainer}
    _omni_op_d.update(_0_Engines__POA.fileTransfer._omni_op_d)

Salome_file._omni_skeleton = Salome_file
_0_Engines__POA.Salome_file = Salome_file
omniORB.registerSkeleton(Salome_file._NP_RepositoryId, Salome_file)
del Salome_file
__name__ = "Engines"

# interface fileRef
_0_Engines._d_fileRef = (omniORB.tcInternal.tv_objref, "IDL:Engines/fileRef:1.0", "fileRef")
omniORB.typeMapping["IDL:Engines/fileRef:1.0"] = _0_Engines._d_fileRef
_0_Engines.fileRef = omniORB.newEmptyClass()
class fileRef :
    _NP_RepositoryId = _0_Engines._d_fileRef[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.fileRef = fileRef
_0_Engines._tc_fileRef = omniORB.tcInternal.createTypeCode(_0_Engines._d_fileRef)
omniORB.registerType(fileRef._NP_RepositoryId, _0_Engines._d_fileRef, _0_Engines._tc_fileRef)

# fileRef operations and attributes
fileRef._d__get_origFileName = ((),((omniORB.tcInternal.tv_string,0),),None)
fileRef._d__get_refMachine = ((),((omniORB.tcInternal.tv_string,0),),None)
fileRef._d_getContainer = ((), (omniORB.typeMapping["IDL:Engines/Container:1.0"], ), None)
fileRef._d_addRef = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
fileRef._d_getRef = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# fileRef object reference
class _objref_fileRef (CORBA.Object):
    _NP_RepositoryId = fileRef._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_origFileName(self, *args):
        return _omnipy.invoke(self, "_get_origFileName", _0_Engines.fileRef._d__get_origFileName, args)

    def _get_refMachine(self, *args):
        return _omnipy.invoke(self, "_get_refMachine", _0_Engines.fileRef._d__get_refMachine, args)

    def getContainer(self, *args):
        return _omnipy.invoke(self, "getContainer", _0_Engines.fileRef._d_getContainer, args)

    def addRef(self, *args):
        return _omnipy.invoke(self, "addRef", _0_Engines.fileRef._d_addRef, args)

    def getRef(self, *args):
        return _omnipy.invoke(self, "getRef", _0_Engines.fileRef._d_getRef, args)

    __methods__ = ["_get_origFileName", "_get_refMachine", "getContainer", "addRef", "getRef"] + CORBA.Object.__methods__

omniORB.registerObjref(fileRef._NP_RepositoryId, _objref_fileRef)
_0_Engines._objref_fileRef = _objref_fileRef
del fileRef, _objref_fileRef

# fileRef skeleton
__name__ = "Engines__POA"
class fileRef (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.fileRef._NP_RepositoryId


    _omni_op_d = {"_get_origFileName": _0_Engines.fileRef._d__get_origFileName, "_get_refMachine": _0_Engines.fileRef._d__get_refMachine, "getContainer": _0_Engines.fileRef._d_getContainer, "addRef": _0_Engines.fileRef._d_addRef, "getRef": _0_Engines.fileRef._d_getRef}

fileRef._omni_skeleton = fileRef
_0_Engines__POA.fileRef = fileRef
omniORB.registerSkeleton(fileRef._NP_RepositoryId, fileRef)
del fileRef
__name__ = "Engines"

#
# End of module "Engines"
#
__name__ = "SALOME_Component_idl"

_exported_modules = ( "Engines", )

# The end.

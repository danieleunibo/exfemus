// Copyright (C) 2006-2013  CEA/DEN, EDF R&D
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef __ECHO_IDL__
#define __ECHO_IDL__

module eo{
  enum ExceptionType
  {
    COMM,             /*!< Communication problem */
    BAD_PARAM,        /*!< Bad User parameters */
    INTERNAL_ERROR    /*!< Application level problem, irrecoverable */
  };

  struct ExceptionStruct
  {
    ExceptionType type; /*!<Type of the exception.*/
    string        text; /*!<Message which is shown when the exception is raised.*/
    string        sourceFile; /*!<The source file where the exception is raised.*/
    unsigned long lineNumber; /*!<Line number where the exception is raised.*/
  };

  exception SALOME_Exception
  {
    ExceptionStruct details; /*!<Structure of the exception.*/
  };

  typedef sequence<double> DoubleVec ;
  typedef sequence<long> IntVec;
  typedef sequence<string> StrVec;
  typedef sequence<Object> ObjectVec;
  typedef sequence<DoubleVec> DoubleVecVec;
  typedef sequence<ObjectVec> ObjectVecVec;

  interface Obj
  {
    long echoLong(in long i);
  };
  interface C:Obj
  {
  };
  interface D
  {
    long echoLong2(in long i);
  };
  interface E:C,D
  {
  };

  typedef sequence<Obj> ObjVec ;

  interface Echo
  {
    string echoString(in string mesg);
    long echoLong(in long i) raises (SALOME_Exception);
    void echoDouble(in double i,out double j) ;
    void echoDoubleVec(in DoubleVec i,out DoubleVec j) ;
    void echoDoubleVecVec(in DoubleVecVec i,out DoubleVecVec j) ;
    void echoIntVec(in IntVec i,out IntVec j) ;
    void echoStrVec(in StrVec i,out StrVec j) ;
    void echoObj2(in Obj i,out Obj j) ;
    void echoD(in D i,out D j) ;
    void echoC(in C i,out C j) ;
    void echoObjectVec(in ObjectVec i,out ObjectVec j) ;
    void echoObjectVecVec(in ObjectVecVec i,out ObjectVecVec j) ;
    Obj echoObj(in long i,in Obj o,in long k,out Obj p);
    void createObj(in long i,out Obj p);
    void createC(out C p);
    void echoAll(in double d,in long l,in string m,in Obj o,out double dd,out long ll,out string s,out Obj p);
  };
  interface SubEcho:Echo
  {
  };
};

#endif 

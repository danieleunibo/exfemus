# Python stubs generated by omniidl from /dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_PACOExtension.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "SALOME_GenericObj.idl"
import SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOME_Exception.idl"
import SALOME_Exception_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOMEDS.idl"
import SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("SALOMEDS__POA")
# #include "SALOME_PyNode.idl"
import SALOME_PyNode_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Component.idl"
import SALOME_Component_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Ports.idl"
import SALOME_Ports_idl
_0_Ports = omniORB.openModule("Ports")
_0_Ports__POA = omniORB.openModule("Ports__POA")
# #include "DSC_Engines.idl"
import DSC_Engines_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")

#
# Start of module "Engines"
#
__name__ = "Engines"
_0_Engines = omniORB.openModule("Engines", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_PACOExtension.idl")
_0_Engines__POA = omniORB.openModule("Engines__POA", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_PACOExtension.idl")


# interface Parallel_Component
_0_Engines._d_Parallel_Component = (omniORB.tcInternal.tv_objref, "IDL:Engines/Parallel_Component:1.0", "Parallel_Component")
omniORB.typeMapping["IDL:Engines/Parallel_Component:1.0"] = _0_Engines._d_Parallel_Component
_0_Engines.Parallel_Component = omniORB.newEmptyClass()
class Parallel_Component (_0_Engines.EngineComponent):
    _NP_RepositoryId = _0_Engines._d_Parallel_Component[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.Parallel_Component = Parallel_Component
_0_Engines._tc_Parallel_Component = omniORB.tcInternal.createTypeCode(_0_Engines._d_Parallel_Component)
omniORB.registerType(Parallel_Component._NP_RepositoryId, _0_Engines._d_Parallel_Component, _0_Engines._tc_Parallel_Component)

# Parallel_Component operations and attributes
Parallel_Component._d_send_parallel_proxy_object = ((omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], ), (), None)

# Parallel_Component object reference
class _objref_Parallel_Component (_0_Engines._objref_EngineComponent):
    _NP_RepositoryId = Parallel_Component._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_EngineComponent.__init__(self)

    def send_parallel_proxy_object(self, *args):
        return _omnipy.invoke(self, "send_parallel_proxy_object", _0_Engines.Parallel_Component._d_send_parallel_proxy_object, args)

    __methods__ = ["send_parallel_proxy_object"] + _0_Engines._objref_EngineComponent.__methods__

omniORB.registerObjref(Parallel_Component._NP_RepositoryId, _objref_Parallel_Component)
_0_Engines._objref_Parallel_Component = _objref_Parallel_Component
del Parallel_Component, _objref_Parallel_Component

# Parallel_Component skeleton
__name__ = "Engines__POA"
class Parallel_Component (_0_Engines__POA.EngineComponent):
    _NP_RepositoryId = _0_Engines.Parallel_Component._NP_RepositoryId


    _omni_op_d = {"send_parallel_proxy_object": _0_Engines.Parallel_Component._d_send_parallel_proxy_object}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)

Parallel_Component._omni_skeleton = Parallel_Component
_0_Engines__POA.Parallel_Component = Parallel_Component
omniORB.registerSkeleton(Parallel_Component._NP_RepositoryId, Parallel_Component)
del Parallel_Component
__name__ = "Engines"

# interface PACO_Container
_0_Engines._d_PACO_Container = (omniORB.tcInternal.tv_objref, "IDL:Engines/PACO_Container:1.0", "PACO_Container")
omniORB.typeMapping["IDL:Engines/PACO_Container:1.0"] = _0_Engines._d_PACO_Container
_0_Engines.PACO_Container = omniORB.newEmptyClass()
class PACO_Container (_0_Engines.Container):
    _NP_RepositoryId = _0_Engines._d_PACO_Container[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.PACO_Container = PACO_Container
_0_Engines._tc_PACO_Container = omniORB.tcInternal.createTypeCode(_0_Engines._d_PACO_Container)
omniORB.registerType(PACO_Container._NP_RepositoryId, _0_Engines._d_PACO_Container, _0_Engines._tc_PACO_Container)

# PACO_Container operations and attributes
PACO_Container._d_create_paco_component_node_instance = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
PACO_Container._d_updateInstanceNumber = ((), (), None)

# PACO_Container object reference
class _objref_PACO_Container (_0_Engines._objref_Container):
    _NP_RepositoryId = PACO_Container._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_Container.__init__(self)

    def create_paco_component_node_instance(self, *args):
        return _omnipy.invoke(self, "create_paco_component_node_instance", _0_Engines.PACO_Container._d_create_paco_component_node_instance, args)

    def updateInstanceNumber(self, *args):
        return _omnipy.invoke(self, "updateInstanceNumber", _0_Engines.PACO_Container._d_updateInstanceNumber, args)

    __methods__ = ["create_paco_component_node_instance", "updateInstanceNumber"] + _0_Engines._objref_Container.__methods__

omniORB.registerObjref(PACO_Container._NP_RepositoryId, _objref_PACO_Container)
_0_Engines._objref_PACO_Container = _objref_PACO_Container
del PACO_Container, _objref_PACO_Container

# PACO_Container skeleton
__name__ = "Engines__POA"
class PACO_Container (_0_Engines__POA.Container):
    _NP_RepositoryId = _0_Engines.PACO_Container._NP_RepositoryId


    _omni_op_d = {"create_paco_component_node_instance": _0_Engines.PACO_Container._d_create_paco_component_node_instance, "updateInstanceNumber": _0_Engines.PACO_Container._d_updateInstanceNumber}
    _omni_op_d.update(_0_Engines__POA.Container._omni_op_d)

PACO_Container._omni_skeleton = PACO_Container
_0_Engines__POA.PACO_Container = PACO_Container
omniORB.registerSkeleton(PACO_Container._NP_RepositoryId, PACO_Container)
del PACO_Container
__name__ = "Engines"

# interface Parallel_DSC
_0_Engines._d_Parallel_DSC = (omniORB.tcInternal.tv_objref, "IDL:Engines/Parallel_DSC:1.0", "Parallel_DSC")
omniORB.typeMapping["IDL:Engines/Parallel_DSC:1.0"] = _0_Engines._d_Parallel_DSC
_0_Engines.Parallel_DSC = omniORB.newEmptyClass()
class Parallel_DSC (_0_Engines.Superv_Component, _0_Engines.Parallel_Component):
    _NP_RepositoryId = _0_Engines._d_Parallel_DSC[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.Parallel_DSC = Parallel_DSC
_0_Engines._tc_Parallel_DSC = omniORB.tcInternal.createTypeCode(_0_Engines._d_Parallel_DSC)
omniORB.registerType(Parallel_DSC._NP_RepositoryId, _0_Engines._d_Parallel_DSC, _0_Engines._tc_Parallel_DSC)

# Parallel_DSC operations and attributes
Parallel_DSC._d_set_paco_proxy = ((omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:Ports/PortProperties:1.0"]), (), None)

# Parallel_DSC object reference
class _objref_Parallel_DSC (_0_Engines._objref_Superv_Component, _0_Engines._objref_Parallel_Component):
    _NP_RepositoryId = Parallel_DSC._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_Superv_Component.__init__(self)
        _0_Engines._objref_Parallel_Component.__init__(self)

    def set_paco_proxy(self, *args):
        return _omnipy.invoke(self, "set_paco_proxy", _0_Engines.Parallel_DSC._d_set_paco_proxy, args)

    __methods__ = ["set_paco_proxy"] + _0_Engines._objref_Superv_Component.__methods__ + _0_Engines._objref_Parallel_Component.__methods__

omniORB.registerObjref(Parallel_DSC._NP_RepositoryId, _objref_Parallel_DSC)
_0_Engines._objref_Parallel_DSC = _objref_Parallel_DSC
del Parallel_DSC, _objref_Parallel_DSC

# Parallel_DSC skeleton
__name__ = "Engines__POA"
class Parallel_DSC (_0_Engines__POA.Superv_Component, _0_Engines__POA.Parallel_Component):
    _NP_RepositoryId = _0_Engines.Parallel_DSC._NP_RepositoryId


    _omni_op_d = {"set_paco_proxy": _0_Engines.Parallel_DSC._d_set_paco_proxy}
    _omni_op_d.update(_0_Engines__POA.Superv_Component._omni_op_d)
    _omni_op_d.update(_0_Engines__POA.Parallel_Component._omni_op_d)

Parallel_DSC._omni_skeleton = Parallel_DSC
_0_Engines__POA.Parallel_DSC = Parallel_DSC
omniORB.registerSkeleton(Parallel_DSC._NP_RepositoryId, Parallel_DSC)
del Parallel_DSC
__name__ = "Engines"

# interface Parallel_Salome_file
_0_Engines._d_Parallel_Salome_file = (omniORB.tcInternal.tv_objref, "IDL:Engines/Parallel_Salome_file:1.0", "Parallel_Salome_file")
omniORB.typeMapping["IDL:Engines/Parallel_Salome_file:1.0"] = _0_Engines._d_Parallel_Salome_file
_0_Engines.Parallel_Salome_file = omniORB.newEmptyClass()
class Parallel_Salome_file (_0_Engines.Salome_file):
    _NP_RepositoryId = _0_Engines._d_Parallel_Salome_file[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.Parallel_Salome_file = Parallel_Salome_file
_0_Engines._tc_Parallel_Salome_file = omniORB.tcInternal.createTypeCode(_0_Engines._d_Parallel_Salome_file)
omniORB.registerType(Parallel_Salome_file._NP_RepositoryId, _0_Engines._d_Parallel_Salome_file, _0_Engines._tc_Parallel_Salome_file)

# Parallel_Salome_file operations and attributes
Parallel_Salome_file._d_setFileNode = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Parallel_Salome_file._d_getFileNode = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
Parallel_Salome_file._d_updateFile = ((omniORB.typeMapping["IDL:Engines/file:1.0"], ), (omniORB.typeMapping["IDL:Engines/Container:1.0"], ), None)
Parallel_Salome_file._d_recvFiles_node = ((), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})

# Parallel_Salome_file object reference
class _objref_Parallel_Salome_file (_0_Engines._objref_Salome_file):
    _NP_RepositoryId = Parallel_Salome_file._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_Salome_file.__init__(self)

    def setFileNode(self, *args):
        return _omnipy.invoke(self, "setFileNode", _0_Engines.Parallel_Salome_file._d_setFileNode, args)

    def getFileNode(self, *args):
        return _omnipy.invoke(self, "getFileNode", _0_Engines.Parallel_Salome_file._d_getFileNode, args)

    def updateFile(self, *args):
        return _omnipy.invoke(self, "updateFile", _0_Engines.Parallel_Salome_file._d_updateFile, args)

    def recvFiles_node(self, *args):
        return _omnipy.invoke(self, "recvFiles_node", _0_Engines.Parallel_Salome_file._d_recvFiles_node, args)

    __methods__ = ["setFileNode", "getFileNode", "updateFile", "recvFiles_node"] + _0_Engines._objref_Salome_file.__methods__

omniORB.registerObjref(Parallel_Salome_file._NP_RepositoryId, _objref_Parallel_Salome_file)
_0_Engines._objref_Parallel_Salome_file = _objref_Parallel_Salome_file
del Parallel_Salome_file, _objref_Parallel_Salome_file

# Parallel_Salome_file skeleton
__name__ = "Engines__POA"
class Parallel_Salome_file (_0_Engines__POA.Salome_file):
    _NP_RepositoryId = _0_Engines.Parallel_Salome_file._NP_RepositoryId


    _omni_op_d = {"setFileNode": _0_Engines.Parallel_Salome_file._d_setFileNode, "getFileNode": _0_Engines.Parallel_Salome_file._d_getFileNode, "updateFile": _0_Engines.Parallel_Salome_file._d_updateFile, "recvFiles_node": _0_Engines.Parallel_Salome_file._d_recvFiles_node}
    _omni_op_d.update(_0_Engines__POA.Salome_file._omni_op_d)

Parallel_Salome_file._omni_skeleton = Parallel_Salome_file
_0_Engines__POA.Parallel_Salome_file = Parallel_Salome_file
omniORB.registerSkeleton(Parallel_Salome_file._NP_RepositoryId, Parallel_Salome_file)
del Parallel_Salome_file
__name__ = "Engines"

#
# End of module "Engines"
#
__name__ = "SALOME_PACOExtension_idl"

_exported_modules = ( "Engines", )

# The end.

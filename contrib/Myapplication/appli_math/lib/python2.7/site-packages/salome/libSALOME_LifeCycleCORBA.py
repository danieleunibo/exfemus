# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libSALOME_LifeCycleCORBA', [dirname(__file__)])
        except ImportError:
            import _libSALOME_LifeCycleCORBA
            return _libSALOME_LifeCycleCORBA
        if fp is not None:
            try:
                _mod = imp.load_module('_libSALOME_LifeCycleCORBA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libSALOME_LifeCycleCORBA = swig_import_helper()
    del swig_import_helper
else:
    import _libSALOME_LifeCycleCORBA
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def makeText(*args):
  """makeText(char const * text, char const * fileName, unsigned int const lineNumber) -> char const *"""
  return _libSALOME_LifeCycleCORBA.makeText(*args)
class SALOME_Exception(_object):
    """Proxy of C++ SALOME_Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SALOME_Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SALOME_Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(SALOME_Exception self, char const * text, char const * fileName=None, unsigned int const lineNumber=0) -> SALOME_Exception
        __init__(SALOME_Exception self, char const * text, char const * fileName=None) -> SALOME_Exception
        __init__(SALOME_Exception self, char const * text) -> SALOME_Exception
        __init__(SALOME_Exception self, SALOME_Exception ex) -> SALOME_Exception
        """
        this = _libSALOME_LifeCycleCORBA.new_SALOME_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_Exception
    __del__ = lambda self : None;
    def what(self):
        """what(SALOME_Exception self) -> char const *"""
        return _libSALOME_LifeCycleCORBA.SALOME_Exception_what(self)

SALOME_Exception_swigregister = _libSALOME_LifeCycleCORBA.SALOME_Exception_swigregister
SALOME_Exception_swigregister(SALOME_Exception)

class IncompatibleComponent(SALOME_Exception):
    """Proxy of C++ IncompatibleComponent class"""
    __swig_setmethods__ = {}
    for _s in [SALOME_Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncompatibleComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [SALOME_Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncompatibleComponent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(IncompatibleComponent self) -> IncompatibleComponent
        __init__(IncompatibleComponent self, IncompatibleComponent ex) -> IncompatibleComponent
        """
        this = _libSALOME_LifeCycleCORBA.new_IncompatibleComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_IncompatibleComponent
    __del__ = lambda self : None;
IncompatibleComponent_swigregister = _libSALOME_LifeCycleCORBA.IncompatibleComponent_swigregister
IncompatibleComponent_swigregister(IncompatibleComponent)

class SALOME_LifeCycleCORBA(_object):
    """Proxy of C++ SALOME_LifeCycleCORBA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SALOME_LifeCycleCORBA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SALOME_LifeCycleCORBA, name)
    __repr__ = _swig_repr
    def __init__(self, ns=None): 
        """
        __init__(SALOME_LifeCycleCORBA self, SALOME_NamingService * ns=None) -> SALOME_LifeCycleCORBA
        __init__(SALOME_LifeCycleCORBA self) -> SALOME_LifeCycleCORBA
        """
        this = _libSALOME_LifeCycleCORBA.new_SALOME_LifeCycleCORBA(ns)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_LifeCycleCORBA
    __del__ = lambda self : None;
    def FindComponent(self, *args):
        """
        FindComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName, int studyId=0) -> Engines::EngineComponent_ptr
        FindComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr
        """
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_FindComponent(self, *args)

    def LoadComponent(self, *args):
        """
        LoadComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName, int studyId=0) -> Engines::EngineComponent_ptr
        LoadComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr
        """
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_LoadComponent(self, *args)

    def FindOrLoad_Component(self, *args):
        """
        FindOrLoad_Component(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName, int studyId=0) -> Engines::EngineComponent_ptr
        FindOrLoad_Component(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName) -> Engines::EngineComponent_ptr
        FindOrLoad_Component(SALOME_LifeCycleCORBA self, char const * containerName, char const * componentName) -> Engines::EngineComponent_ptr
        """
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_FindOrLoad_Component(self, *args)

    def Load_ParallelComponent(self, *args):
        """Load_ParallelComponent(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params, char const * componentName, int studyId) -> Engines::EngineComponent_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_Load_ParallelComponent(self, *args)

    def isKnownComponentClass(self, *args):
        """isKnownComponentClass(SALOME_LifeCycleCORBA self, char const * componentName) -> bool"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_isKnownComponentClass(self, *args)

    def NbProc(self, *args):
        """NbProc(SALOME_LifeCycleCORBA self, Engines::ContainerParameters const & params) -> int"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_NbProc(self, *args)

    def preSet(*args):
        """
        preSet(Engines::ResourceParameters & outparams)
        preSet(Engines::ContainerParameters & outparams)
        """
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_preSet(*args)

    if _newclass:preSet = staticmethod(preSet)
    __swig_getmethods__["preSet"] = lambda x: preSet
    def getContainerManager(self):
        """getContainerManager(SALOME_LifeCycleCORBA self) -> Engines::ContainerManager_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_getContainerManager(self)

    def getResourcesManager(self):
        """getResourcesManager(SALOME_LifeCycleCORBA self) -> Engines::ResourcesManager_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_getResourcesManager(self)

    def namingService(self):
        """namingService(SALOME_LifeCycleCORBA self) -> SALOME_NamingService *"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_namingService(self)

    def orb(self):
        """orb(SALOME_LifeCycleCORBA self) -> CORBA::ORB_ptr"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_orb(self)

    def copyFile(self, *args):
        """copyFile(SALOME_LifeCycleCORBA self, char const * hostSrc, char const * fileSrc, char const * hostDest, char const * fileDest)"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_copyFile(self, *args)

    def shutdownServers(self):
        """shutdownServers(SALOME_LifeCycleCORBA self)"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_shutdownServers(self)

    def killOmniNames():
        """killOmniNames()"""
        return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_killOmniNames()

    if _newclass:killOmniNames = staticmethod(killOmniNames)
    __swig_getmethods__["killOmniNames"] = lambda x: killOmniNames
SALOME_LifeCycleCORBA_swigregister = _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_swigregister
SALOME_LifeCycleCORBA_swigregister(SALOME_LifeCycleCORBA)

def SALOME_LifeCycleCORBA_preSet(*args):
  """
    preSet(Engines::ResourceParameters & outparams)
    SALOME_LifeCycleCORBA_preSet(Engines::ContainerParameters & outparams)
    """
  return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_preSet(*args)

def SALOME_LifeCycleCORBA_killOmniNames():
  """SALOME_LifeCycleCORBA_killOmniNames()"""
  return _libSALOME_LifeCycleCORBA.SALOME_LifeCycleCORBA_killOmniNames()

class SALOME_FileTransferCORBA(_object):
    """Proxy of C++ SALOME_FileTransferCORBA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SALOME_FileTransferCORBA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SALOME_FileTransferCORBA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(SALOME_FileTransferCORBA self) -> SALOME_FileTransferCORBA
        __init__(SALOME_FileTransferCORBA self, Engines::fileRef_ptr aFileRef) -> SALOME_FileTransferCORBA
        __init__(SALOME_FileTransferCORBA self, std::string refMachine, std::string origFileName, std::string containerName="") -> SALOME_FileTransferCORBA
        __init__(SALOME_FileTransferCORBA self, std::string refMachine, std::string origFileName) -> SALOME_FileTransferCORBA
        """
        this = _libSALOME_LifeCycleCORBA.new_SALOME_FileTransferCORBA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libSALOME_LifeCycleCORBA.delete_SALOME_FileTransferCORBA
    __del__ = lambda self : None;
    def getLocalFile(self, localFile=""):
        """
        getLocalFile(SALOME_FileTransferCORBA self, std::string localFile="") -> std::string
        getLocalFile(SALOME_FileTransferCORBA self) -> std::string
        """
        return _libSALOME_LifeCycleCORBA.SALOME_FileTransferCORBA_getLocalFile(self, localFile)

SALOME_FileTransferCORBA_swigregister = _libSALOME_LifeCycleCORBA.SALOME_FileTransferCORBA_swigregister
SALOME_FileTransferCORBA_swigregister(SALOME_FileTransferCORBA)

# This file is compatible with both classic and new-style classes.



# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Implementation of nodes for SALOME platform.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SALOMERuntime', [dirname(__file__)])
        except ImportError:
            import _SALOMERuntime
            return _SALOMERuntime
        if fp is not None:
            try:
                _mod = imp.load_module('_SALOMERuntime', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SALOMERuntime = swig_import_helper()
    del swig_import_helper
else:
    import _SALOMERuntime
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SALOMERuntime_PySwigIterator(_object):
    """Proxy of C++ swig::SALOMERuntime_PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SALOMERuntime_PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SALOMERuntime_PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_SALOMERuntime_PySwigIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_value(self)

    def incr(self, n=1):
        """
        incr(SALOMERuntime_PySwigIterator self, size_t n=1) -> SALOMERuntime_PySwigIterator
        incr(SALOMERuntime_PySwigIterator self) -> SALOMERuntime_PySwigIterator
        """
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SALOMERuntime_PySwigIterator self, size_t n=1) -> SALOMERuntime_PySwigIterator
        decr(SALOMERuntime_PySwigIterator self) -> SALOMERuntime_PySwigIterator
        """
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_decr(self, n)

    def distance(self, *args):
        """distance(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> ptrdiff_t"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> bool"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_equal(self, *args)

    def copy(self):
        """copy(SALOMERuntime_PySwigIterator self) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_copy(self)

    def next(self):
        """next(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_next(self)

    def __next__(self):
        """__next__(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___next__(self)

    def previous(self):
        """previous(SALOMERuntime_PySwigIterator self) -> PyObject *"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_previous(self)

    def advance(self, *args):
        """advance(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> bool"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> bool"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator"""
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SALOMERuntime_PySwigIterator self, ptrdiff_t n) -> SALOMERuntime_PySwigIterator
        __sub__(SALOMERuntime_PySwigIterator self, SALOMERuntime_PySwigIterator x) -> ptrdiff_t
        """
        return _SALOMERuntime.SALOMERuntime_PySwigIterator___sub__(self, *args)

    def __iter__(self): return self
SALOMERuntime_PySwigIterator_swigregister = _SALOMERuntime.SALOMERuntime_PySwigIterator_swigregister
SALOMERuntime_PySwigIterator_swigregister(SALOMERuntime_PySwigIterator)

import pilot
class SalomeContainer(pilot.Container):
    """Proxy of C++ YACS::ENGINE::SalomeContainer class"""
    __swig_setmethods__ = {}
    for _s in [pilot.Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalomeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SalomeContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::SalomeContainer self) -> SalomeContainer
        __init__(YACS::ENGINE::SalomeContainer self, SalomeContainer other) -> SalomeContainer
        """
        this = _SALOMERuntime.new_SalomeContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def lock(self):
        """lock(SalomeContainer self)"""
        return _SALOMERuntime.SalomeContainer_lock(self)

    def unLock(self):
        """unLock(SalomeContainer self)"""
        return _SALOMERuntime.SalomeContainer_unLock(self)

    def isAlreadyStarted(self, *args):
        """isAlreadyStarted(SalomeContainer self, ComponentInstance inst) -> bool"""
        return _SALOMERuntime.SalomeContainer_isAlreadyStarted(self, *args)

    def getContainerPtr(self, *args):
        """getContainerPtr(SalomeContainer self, ComponentInstance inst) -> Engines::Container_ptr"""
        return _SALOMERuntime.SalomeContainer_getContainerPtr(self, *args)

    def start(self, *args):
        """start(SalomeContainer self, ComponentInstance inst)"""
        return _SALOMERuntime.SalomeContainer_start(self, *args)

    def clone(self):
        """clone(SalomeContainer self) -> Container"""
        return _SALOMERuntime.SalomeContainer_clone(self)

    def getPlacementId(self, *args):
        """getPlacementId(SalomeContainer self, ComponentInstance inst) -> std::string"""
        return _SALOMERuntime.SalomeContainer_getPlacementId(self, *args)

    def getFullPlacementId(self, *args):
        """getFullPlacementId(SalomeContainer self, ComponentInstance inst) -> std::string"""
        return _SALOMERuntime.SalomeContainer_getFullPlacementId(self, *args)

    def checkCapabilityToDealWith(self, *args):
        """checkCapabilityToDealWith(SalomeContainer self, ComponentInstance inst)"""
        return _SALOMERuntime.SalomeContainer_checkCapabilityToDealWith(self, *args)

    def setProperty(self, *args):
        """setProperty(SalomeContainer self, std::string const & name, std::string const & value)"""
        return _SALOMERuntime.SalomeContainer_setProperty(self, *args)

    def addComponentName(self, *args):
        """addComponentName(SalomeContainer self, std::string name)"""
        return _SALOMERuntime.SalomeContainer_addComponentName(self, *args)

    def loadComponent(self, *args):
        """loadComponent(SalomeContainer self, ComponentInstance inst) -> CORBA::Object_ptr"""
        return _SALOMERuntime.SalomeContainer_loadComponent(self, *args)

    def shutdown(self, *args):
        """shutdown(SalomeContainer self, int level)"""
        return _SALOMERuntime.SalomeContainer_shutdown(self, *args)

    def addToComponentList(self, *args):
        """addToComponentList(SalomeContainer self, std::string const & name)"""
        return _SALOMERuntime.SalomeContainer_addToComponentList(self, *args)

    def addToResourceList(self, *args):
        """addToResourceList(SalomeContainer self, std::string const & name)"""
        return _SALOMERuntime.SalomeContainer_addToResourceList(self, *args)

    def getResourceProperties(self, *args):
        """getResourceProperties(SalomeContainer self, std::string const & name) -> propmap"""
        return _SALOMERuntime.SalomeContainer_getResourceProperties(self, *args)

    __swig_setmethods__["_params"] = _SALOMERuntime.SalomeContainer__params_set
    __swig_getmethods__["_params"] = _SALOMERuntime.SalomeContainer__params_get
    if _newclass:_params = _swig_property(_SALOMERuntime.SalomeContainer__params_get, _SALOMERuntime.SalomeContainer__params_set)
    __swig_destroy__ = _SALOMERuntime.delete_SalomeContainer
    __del__ = lambda self : None;
SalomeContainer_swigregister = _SALOMERuntime.SalomeContainer_swigregister
SalomeContainer_swigregister(SalomeContainer)


def getSALOMERuntime():
  """getSALOMERuntime() -> RuntimeSALOME"""
  return _SALOMERuntime.getSALOMERuntime()
class RuntimeSALOME(pilot.Runtime):
    """Proxy of C++ YACS::ENGINE::RuntimeSALOME class"""
    __swig_setmethods__ = {}
    for _s in [pilot.Runtime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeSALOME, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.Runtime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeSALOME, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IsPyExt = _SALOMERuntime.RuntimeSALOME_IsPyExt
    UsePython = _SALOMERuntime.RuntimeSALOME_UsePython
    UseCorba = _SALOMERuntime.RuntimeSALOME_UseCorba
    UseXml = _SALOMERuntime.RuntimeSALOME_UseXml
    UseCpp = _SALOMERuntime.RuntimeSALOME_UseCpp
    UseSalome = _SALOMERuntime.RuntimeSALOME_UseSalome
    __swig_setmethods__["FLAGS"] = _SALOMERuntime.RuntimeSALOME_FLAGS_set
    __swig_getmethods__["FLAGS"] = _SALOMERuntime.RuntimeSALOME_FLAGS_get
    if _newclass:FLAGS = _swig_property(_SALOMERuntime.RuntimeSALOME_FLAGS_get, _SALOMERuntime.RuntimeSALOME_FLAGS_set)
    def setRuntime(*args):
        """
        setRuntime(long flags=YACS::ENGINE::RuntimeSALOME::UsePython+YACS::ENGINE::RuntimeSALOME::UseCorba+YACS::ENGINE::RuntimeSALOME::UseXml+YACS::ENGINE::RuntimeSALOME::UseCpp+YACS::ENGINE::RuntimeSALOME::UseSalome)
        setRuntime()
        """
        return _SALOMERuntime.RuntimeSALOME_setRuntime(*args)

    if _newclass:setRuntime = staticmethod(setRuntime)
    __swig_getmethods__["setRuntime"] = lambda x: setRuntime
    def getVersion(self):
        """getVersion(RuntimeSALOME self) -> std::string"""
        return _SALOMERuntime.RuntimeSALOME_getVersion(self)

    def init(self, *args):
        """init(RuntimeSALOME self, long flags)"""
        return _SALOMERuntime.RuntimeSALOME_init(self, *args)

    def fini(self):
        """fini(RuntimeSALOME self)"""
        return _SALOMERuntime.RuntimeSALOME_fini(self)

    def createInputPort(self, *args):
        """createInputPort(RuntimeSALOME self, std::string const & name, std::string const & impl, Node node, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_createInputPort(self, *args)

    def createOutputPort(self, *args):
        """createOutputPort(RuntimeSALOME self, std::string const & name, std::string const & impl, Node node, TypeCode type) -> OutputPort"""
        return _SALOMERuntime.RuntimeSALOME_createOutputPort(self, *args)

    def createInputDataStreamPort(self, *args):
        """createInputDataStreamPort(RuntimeSALOME self, std::string const & name, Node node, TypeCode type) -> InputDataStreamPort"""
        return _SALOMERuntime.RuntimeSALOME_createInputDataStreamPort(self, *args)

    def createOutputDataStreamPort(self, *args):
        """createOutputDataStreamPort(RuntimeSALOME self, std::string const & name, Node node, TypeCode type) -> OutputDataStreamPort"""
        return _SALOMERuntime.RuntimeSALOME_createOutputDataStreamPort(self, *args)

    def createInDataNode(self, *args):
        """createInDataNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> DataNode"""
        return _SALOMERuntime.RuntimeSALOME_createInDataNode(self, *args)

    def createOutDataNode(self, *args):
        """createOutDataNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> DataNode"""
        return _SALOMERuntime.RuntimeSALOME_createOutDataNode(self, *args)

    def createFuncNode(self, *args):
        """createFuncNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> InlineFuncNode"""
        return _SALOMERuntime.RuntimeSALOME_createFuncNode(self, *args)

    def createScriptNode(self, *args):
        """createScriptNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> InlineNode"""
        return _SALOMERuntime.RuntimeSALOME_createScriptNode(self, *args)

    def createRefNode(self, *args):
        """createRefNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.RuntimeSALOME_createRefNode(self, *args)

    def createCompoNode(self, *args):
        """createCompoNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.RuntimeSALOME_createCompoNode(self, *args)

    def createSInlineNode(self, *args):
        """createSInlineNode(RuntimeSALOME self, std::string const & kind, std::string const & name) -> ServiceInlineNode"""
        return _SALOMERuntime.RuntimeSALOME_createSInlineNode(self, *args)

    def createComponentInstance(self, *args):
        """
        createComponentInstance(RuntimeSALOME self, std::string const & name, std::string const & kind="") -> ComponentInstance
        createComponentInstance(RuntimeSALOME self, std::string const & name) -> ComponentInstance
        """
        return _SALOMERuntime.RuntimeSALOME_createComponentInstance(self, *args)

    def createContainer(self, kind=""):
        """
        createContainer(RuntimeSALOME self, std::string const & kind="") -> Container
        createContainer(RuntimeSALOME self) -> Container
        """
        return _SALOMERuntime.RuntimeSALOME_createContainer(self, kind)

    def createWhileLoop(self, *args):
        """createWhileLoop(RuntimeSALOME self, std::string const & name) -> WhileLoop"""
        return _SALOMERuntime.RuntimeSALOME_createWhileLoop(self, *args)

    def createForLoop(self, *args):
        """createForLoop(RuntimeSALOME self, std::string const & name) -> ForLoop"""
        return _SALOMERuntime.RuntimeSALOME_createForLoop(self, *args)

    def createOptimizerLoop(self, *args):
        """
        createOptimizerLoop(RuntimeSALOME self, std::string const & name, std::string const & algLib, std::string const & factoryName, 
            bool algInitOnFile, std::string const & kind="", Proc procForTypes=None) -> OptimizerLoop
        createOptimizerLoop(RuntimeSALOME self, std::string const & name, std::string const & algLib, std::string const & factoryName, 
            bool algInitOnFile, std::string const & kind="") -> OptimizerLoop
        createOptimizerLoop(RuntimeSALOME self, std::string const & name, std::string const & algLib, std::string const & factoryName, 
            bool algInitOnFile) -> OptimizerLoop
        """
        return _SALOMERuntime.RuntimeSALOME_createOptimizerLoop(self, *args)

    def createBloc(self, *args):
        """createBloc(RuntimeSALOME self, std::string const & name) -> Bloc"""
        return _SALOMERuntime.RuntimeSALOME_createBloc(self, *args)

    def createProc(self, *args):
        """createProc(RuntimeSALOME self, std::string const & name) -> Proc"""
        return _SALOMERuntime.RuntimeSALOME_createProc(self, *args)

    def createInterfaceTc(self, *args):
        """createInterfaceTc(RuntimeSALOME self, std::string const & id, std::string const & name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > ltc) -> TypeCode"""
        return _SALOMERuntime.RuntimeSALOME_createInterfaceTc(self, *args)

    def createSequenceTc(self, *args):
        """createSequenceTc(RuntimeSALOME self, std::string const & id, std::string const & name, TypeCode content) -> TypeCode"""
        return _SALOMERuntime.RuntimeSALOME_createSequenceTc(self, *args)

    def createStructTc(self, *args):
        """createStructTc(RuntimeSALOME self, std::string const & id, std::string const & name) -> TypeCodeStruct"""
        return _SALOMERuntime.RuntimeSALOME_createStructTc(self, *args)

    def adaptNeutral(self, *args):
        """adaptNeutral(RuntimeSALOME self, InputPort source, std::string const & impl, TypeCode type, bool init) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutral(self, *args)

    def adaptCorbaToCorba(self, *args):
        """adaptCorbaToCorba(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToCorba(self, *args)

    def adaptCorbaToNeutral(self, *args):
        """adaptCorbaToNeutral(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToNeutral(self, *args)

    def adaptCorbaToPython(self, *args):
        """adaptCorbaToPython(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToPython(self, *args)

    def adaptCorbaToCpp(self, *args):
        """adaptCorbaToCpp(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToCpp(self, *args)

    def adaptCorbaToXml(self, *args):
        """adaptCorbaToXml(RuntimeSALOME self, InputCorbaPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCorbaToXml(self, *args)

    def adaptPythonToCorba(self, *args):
        """adaptPythonToCorba(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToCorba(self, *args)

    def adaptPythonToNeutral(self, *args):
        """adaptPythonToNeutral(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToNeutral(self, *args)

    def adaptPythonToPython(self, *args):
        """adaptPythonToPython(RuntimeSALOME self, InputPyPort source, TypeCode type, bool init) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToPython(self, *args)

    def adaptPythonToXml(self, *args):
        """adaptPythonToXml(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToXml(self, *args)

    def adaptPythonToCpp(self, *args):
        """adaptPythonToCpp(RuntimeSALOME self, InputPyPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptPythonToCpp(self, *args)

    def adaptCppToCorba(self, *args):
        """adaptCppToCorba(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToCorba(self, *args)

    def adaptCppToNeutral(self, *args):
        """adaptCppToNeutral(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToNeutral(self, *args)

    def adaptCppToPython(self, *args):
        """adaptCppToPython(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToPython(self, *args)

    def adaptCppToXml(self, *args):
        """adaptCppToXml(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToXml(self, *args)

    def adaptCppToCpp(self, *args):
        """adaptCppToCpp(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptCppToCpp(self, *args)

    def adapt(self, *args):
        """
        adapt(RuntimeSALOME self, InputPort source, std::string const & impl, TypeCode type, bool init=False) -> InputPort
        adapt(RuntimeSALOME self, InputPort source, std::string const & impl, TypeCode type) -> InputPort
        adapt(RuntimeSALOME self, InPropertyPort source, std::string const & impl, TypeCode type, bool init=False) -> InputPort
        adapt(RuntimeSALOME self, InPropertyPort source, std::string const & impl, TypeCode type) -> InputPort
        adapt(RuntimeSALOME self, InputCorbaPort source, std::string const & impl, TypeCode type, bool init) -> InputPort
        adapt(RuntimeSALOME self, InputPyPort source, std::string const & impl, TypeCode type, bool init) -> InputPort
        adapt(RuntimeSALOME self, YACS::ENGINE::InputCppPort * source, std::string const & impl, TypeCode type, bool init) -> InputPort
        adapt(RuntimeSALOME self, InputXmlPort source, std::string const & impl, TypeCode type, bool init) -> InputPort
        """
        return _SALOMERuntime.RuntimeSALOME_adapt(self, *args)

    def adaptXmlToCorba(self, *args):
        """adaptXmlToCorba(RuntimeSALOME self, InputXmlPort source, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToCorba(self, *args)

    def adaptXmlToPython(self, *args):
        """adaptXmlToPython(RuntimeSALOME self, InputXmlPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToPython(self, *args)

    def adaptXmlToCpp(self, *args):
        """adaptXmlToCpp(RuntimeSALOME self, InputXmlPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToCpp(self, *args)

    def adaptXmlToNeutral(self, *args):
        """adaptXmlToNeutral(RuntimeSALOME self, InputXmlPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToNeutral(self, *args)

    def adaptXmlToXml(self, *args):
        """adaptXmlToXml(RuntimeSALOME self, InputXmlPort inport, TypeCode type, bool init) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptXmlToXml(self, *args)

    def adaptNeutralToXml(self, *args):
        """adaptNeutralToXml(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToXml(self, *args)

    def adaptNeutralToPython(self, *args):
        """adaptNeutralToPython(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToPython(self, *args)

    def adaptNeutralToCorba(self, *args):
        """adaptNeutralToCorba(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToCorba(self, *args)

    def adaptNeutralToCpp(self, *args):
        """adaptNeutralToCpp(RuntimeSALOME self, InputPort inport, TypeCode type) -> InputPort"""
        return _SALOMERuntime.RuntimeSALOME_adaptNeutralToCpp(self, *args)

    def convertNeutral(self, *args):
        """convertNeutral(RuntimeSALOME self, TypeCode type, Any data) -> void *"""
        return _SALOMERuntime.RuntimeSALOME_convertNeutral(self, *args)

    def convertNeutralAsString(self, *args):
        """convertNeutralAsString(RuntimeSALOME self, TypeCode type, Any data) -> std::string"""
        return _SALOMERuntime.RuntimeSALOME_convertNeutralAsString(self, *args)

    def convertPyObjectToString(self, *args):
        """convertPyObjectToString(RuntimeSALOME self, PyObject * ob) -> std::string"""
        return _SALOMERuntime.RuntimeSALOME_convertPyObjectToString(self, *args)

    def convertStringToPyObject(self, *args):
        """convertStringToPyObject(RuntimeSALOME self, std::string const & s) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_convertStringToPyObject(self, *args)

    __swig_destroy__ = _SALOMERuntime.delete_RuntimeSALOME
    __del__ = lambda self : None;
    def getOrb(self):
        """getOrb(RuntimeSALOME self) -> CORBA::ORB_ptr"""
        return _SALOMERuntime.RuntimeSALOME_getOrb(self)

    def getPyOrb(self):
        """getPyOrb(RuntimeSALOME self) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_getPyOrb(self)

    def getBuiltins(self):
        """getBuiltins(RuntimeSALOME self) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_getBuiltins(self)

    def getDynFactory(self):
        """getDynFactory(RuntimeSALOME self) -> DynamicAny::DynAnyFactory_ptr"""
        return _SALOMERuntime.RuntimeSALOME_getDynFactory(self)

    def getApi(self):
        """getApi(RuntimeSALOME self) -> omniORBpyAPI *"""
        return _SALOMERuntime.RuntimeSALOME_getApi(self)

    def get_omnipy(self):
        """get_omnipy(RuntimeSALOME self) -> PyObject *"""
        return _SALOMERuntime.RuntimeSALOME_get_omnipy(self)

RuntimeSALOME_swigregister = _SALOMERuntime.RuntimeSALOME_swigregister
RuntimeSALOME_swigregister(RuntimeSALOME)

def RuntimeSALOME_setRuntime(*args):
  """
    setRuntime(long flags=YACS::ENGINE::RuntimeSALOME::UsePython+YACS::ENGINE::RuntimeSALOME::UseCorba+YACS::ENGINE::RuntimeSALOME::UseXml+YACS::ENGINE::RuntimeSALOME::UseCpp+YACS::ENGINE::RuntimeSALOME::UseSalome)
    RuntimeSALOME_setRuntime()
    """
  return _SALOMERuntime.RuntimeSALOME_setRuntime(*args)

class SALOMEDispatcher(pilot.Dispatcher):
    """Proxy of C++ YACS::ENGINE::SALOMEDispatcher class"""
    __swig_setmethods__ = {}
    for _s in [pilot.Dispatcher]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SALOMEDispatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.Dispatcher]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SALOMEDispatcher, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(YACS::ENGINE::SALOMEDispatcher self) -> SALOMEDispatcher"""
        this = _SALOMERuntime.new_SALOMEDispatcher()
        try: self.this.append(this)
        except: self.this = this
    def dispatch(self, *args):
        """dispatch(SALOMEDispatcher self, Node object, std::string const & event)"""
        return _SALOMERuntime.SALOMEDispatcher_dispatch(self, *args)

    def addObserver(self, *args):
        """addObserver(SALOMEDispatcher self, YACS_ORB::Observer_ptr observer, int numid, std::string event)"""
        return _SALOMERuntime.SALOMEDispatcher_addObserver(self, *args)

    def setSALOMEDispatcher():
        """setSALOMEDispatcher()"""
        return _SALOMERuntime.SALOMEDispatcher_setSALOMEDispatcher()

    if _newclass:setSALOMEDispatcher = staticmethod(setSALOMEDispatcher)
    __swig_getmethods__["setSALOMEDispatcher"] = lambda x: setSALOMEDispatcher
    def getSALOMEDispatcher():
        """getSALOMEDispatcher() -> SALOMEDispatcher"""
        return _SALOMERuntime.SALOMEDispatcher_getSALOMEDispatcher()

    if _newclass:getSALOMEDispatcher = staticmethod(getSALOMEDispatcher)
    __swig_getmethods__["getSALOMEDispatcher"] = lambda x: getSALOMEDispatcher
    __swig_destroy__ = _SALOMERuntime.delete_SALOMEDispatcher
    __del__ = lambda self : None;
SALOMEDispatcher_swigregister = _SALOMERuntime.SALOMEDispatcher_swigregister
SALOMEDispatcher_swigregister(SALOMEDispatcher)

def SALOMEDispatcher_setSALOMEDispatcher():
  """SALOMEDispatcher_setSALOMEDispatcher()"""
  return _SALOMERuntime.SALOMEDispatcher_setSALOMEDispatcher()

def SALOMEDispatcher_getSALOMEDispatcher():
  """SALOMEDispatcher_getSALOMEDispatcher() -> SALOMEDispatcher"""
  return _SALOMERuntime.SALOMEDispatcher_getSALOMEDispatcher()

class SalomeProc(pilot.Proc):
    """Proxy of C++ YACS::ENGINE::SalomeProc class"""
    __swig_setmethods__ = {}
    for _s in [pilot.Proc]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalomeProc, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.Proc]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SalomeProc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::SalomeProc self, std::string const & name) -> SalomeProc"""
        this = _SALOMERuntime.new_SalomeProc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_SalomeProc
    __del__ = lambda self : None;
    def createInterfaceTc(self, *args):
        """createInterfaceTc(SalomeProc self, std::string const & id, std::string const & name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > ltc) -> TypeCode"""
        return _SALOMERuntime.SalomeProc_createInterfaceTc(self, *args)

    def createStructTc(self, *args):
        """createStructTc(SalomeProc self, std::string const & id, std::string const & name) -> TypeCode"""
        return _SALOMERuntime.SalomeProc_createStructTc(self, *args)

    def typeName(self):
        """typeName(SalomeProc self) -> std::string"""
        return _SALOMERuntime.SalomeProc_typeName(self)

    def saveSchema(self, *args):
        """saveSchema(SalomeProc self, std::string xmlSchemaFile)"""
        return _SALOMERuntime.SalomeProc_saveSchema(self, *args)

    def getDefaultStudyId(self):
        """getDefaultStudyId(SalomeProc self) -> int"""
        return _SALOMERuntime.SalomeProc_getDefaultStudyId(self)

    def init(self, start=True):
        """
        init(SalomeProc self, bool start=True)
        init(SalomeProc self)
        """
        return _SALOMERuntime.SalomeProc_init(self, start)

SalomeProc_swigregister = _SALOMERuntime.SalomeProc_swigregister
SalomeProc_swigregister(SalomeProc)

class PythonNode(pilot.InlineNode):
    """Proxy of C++ YACS::ENGINE::PythonNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.InlineNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.InlineNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PythonNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_PythonNode
    __del__ = lambda self : None;
    def checkBasicConsistency(self):
        """checkBasicConsistency(PythonNode self)"""
        return _SALOMERuntime.PythonNode_checkBasicConsistency(self)

    def execute(self):
        """execute(PythonNode self)"""
        return _SALOMERuntime.PythonNode_execute(self)

    def load(self):
        """load(PythonNode self)"""
        return _SALOMERuntime.PythonNode_load(self)

    def loadRemote(self):
        """loadRemote(PythonNode self)"""
        return _SALOMERuntime.PythonNode_loadRemote(self)

    def loadLocal(self):
        """loadLocal(PythonNode self)"""
        return _SALOMERuntime.PythonNode_loadLocal(self)

    def executeRemote(self):
        """executeRemote(PythonNode self)"""
        return _SALOMERuntime.PythonNode_executeRemote(self)

    def executeLocal(self):
        """executeLocal(PythonNode self)"""
        return _SALOMERuntime.PythonNode_executeLocal(self)

    def shutdown(self, *args):
        """shutdown(PythonNode self, int level)"""
        return _SALOMERuntime.PythonNode_shutdown(self, *args)

    def getContainerLog(self):
        """getContainerLog(PythonNode self) -> std::string"""
        return _SALOMERuntime.PythonNode_getContainerLog(self)

    def cloneNode(self, *args):
        """cloneNode(PythonNode self, std::string const & name) -> PythonNode"""
        return _SALOMERuntime.PythonNode_cloneNode(self, *args)

    def typeName(self):
        """typeName(PythonNode self) -> std::string"""
        return _SALOMERuntime.PythonNode_typeName(self)

PythonNode_swigregister = _SALOMERuntime.PythonNode_swigregister
PythonNode_swigregister(PythonNode)
cvar = _SALOMERuntime.cvar
PythonNode.KIND = _SALOMERuntime.cvar.PythonNode_KIND
PythonNode.IMPL_NAME = _SALOMERuntime.cvar.PythonNode_IMPL_NAME

class PyFuncNode(pilot.InlineFuncNode):
    """Proxy of C++ YACS::ENGINE::PyFuncNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.InlineFuncNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyFuncNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.InlineFuncNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyFuncNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_PyFuncNode
    __del__ = lambda self : None;
    def checkBasicConsistency(self):
        """checkBasicConsistency(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_checkBasicConsistency(self)

    def execute(self):
        """execute(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_execute(self)

    def load(self):
        """load(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_load(self)

    def loadRemote(self):
        """loadRemote(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_loadRemote(self)

    def loadLocal(self):
        """loadLocal(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_loadLocal(self)

    def executeRemote(self):
        """executeRemote(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_executeRemote(self)

    def executeLocal(self):
        """executeLocal(PyFuncNode self)"""
        return _SALOMERuntime.PyFuncNode_executeLocal(self)

    def shutdown(self, *args):
        """shutdown(PyFuncNode self, int level)"""
        return _SALOMERuntime.PyFuncNode_shutdown(self, *args)

    def getContainerLog(self):
        """getContainerLog(PyFuncNode self) -> std::string"""
        return _SALOMERuntime.PyFuncNode_getContainerLog(self)

    def cloneNode(self, *args):
        """cloneNode(PyFuncNode self, std::string const & name) -> PyFuncNode"""
        return _SALOMERuntime.PyFuncNode_cloneNode(self, *args)

    def typeName(self):
        """typeName(PyFuncNode self) -> std::string"""
        return _SALOMERuntime.PyFuncNode_typeName(self)

PyFuncNode_swigregister = _SALOMERuntime.PyFuncNode_swigregister
PyFuncNode_swigregister(PyFuncNode)

class InterpreterUnlocker(_object):
    """Proxy of C++ YACS::ENGINE::InterpreterUnlocker class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpreterUnlocker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpreterUnlocker, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(YACS::ENGINE::InterpreterUnlocker self) -> InterpreterUnlocker"""
        this = _SALOMERuntime.new_InterpreterUnlocker()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_InterpreterUnlocker
    __del__ = lambda self : None;
InterpreterUnlocker_swigregister = _SALOMERuntime.InterpreterUnlocker_swigregister
InterpreterUnlocker_swigregister(InterpreterUnlocker)

class InterpreterSaveThread(_object):
    """Proxy of C++ YACS::ENGINE::InterpreterSaveThread class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpreterSaveThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpreterSaveThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(YACS::ENGINE::InterpreterSaveThread self) -> InterpreterSaveThread"""
        this = _SALOMERuntime.new_InterpreterSaveThread()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_InterpreterSaveThread
    __del__ = lambda self : None;
    def lock(self):
        """lock(InterpreterSaveThread self)"""
        return _SALOMERuntime.InterpreterSaveThread_lock(self)

    def unlock(self):
        """unlock(InterpreterSaveThread self)"""
        return _SALOMERuntime.InterpreterSaveThread_unlock(self)

InterpreterSaveThread_swigregister = _SALOMERuntime.InterpreterSaveThread_swigregister
InterpreterSaveThread_swigregister(InterpreterSaveThread)

class InputPyPort(pilot.InputPort):
    """Proxy of C++ YACS::ENGINE::InputPyPort class"""
    __swig_setmethods__ = {}
    for _s in [pilot.InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPyPort, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPyPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::InputPyPort self, std::string const & name, Node node, TypeCode type) -> InputPyPort
        __init__(YACS::ENGINE::InputPyPort self, InputPyPort other, Node newHelder) -> InputPyPort
        """
        this = _SALOMERuntime.new_InputPyPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_InputPyPort
    __del__ = lambda self : None;
    def edIsManuallyInitialized(self):
        """edIsManuallyInitialized(InputPyPort self) -> bool"""
        return _SALOMERuntime.InputPyPort_edIsManuallyInitialized(self)

    def edRemoveManInit(self):
        """edRemoveManInit(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_edRemoveManInit(self)

    def put(self, *args):
        """
        put(InputPyPort self, void const * data)
        put(InputPyPort self, PyObject * data)
        """
        return _SALOMERuntime.InputPyPort_put(self, *args)

    def clone(self, *args):
        """clone(InputPyPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputPyPort_clone(self, *args)

    def getPyObj(self):
        """getPyObj(InputPyPort self) -> YACS::ENGINE::PyObj *"""
        return _SALOMERuntime.InputPyPort_getPyObj(self)

    def getAsString(self):
        """getAsString(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_getAsString(self)

    def get(self):
        """get(InputPyPort self) -> void *"""
        return _SALOMERuntime.InputPyPort_get(self)

    def isEmpty(self):
        """isEmpty(InputPyPort self) -> bool"""
        return _SALOMERuntime.InputPyPort_isEmpty(self)

    def exSaveInit(self):
        """exSaveInit(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(InputPyPort self)"""
        return _SALOMERuntime.InputPyPort_exRestoreInit(self)

    def dump(self):
        """dump(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_dump(self)

    def typeName(self):
        """typeName(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_typeName(self)

    def valToStr(self):
        """valToStr(InputPyPort self) -> std::string"""
        return _SALOMERuntime.InputPyPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(InputPyPort self, std::string valstr)"""
        return _SALOMERuntime.InputPyPort_valFromStr(self, *args)

InputPyPort_swigregister = _SALOMERuntime.InputPyPort_swigregister
InputPyPort_swigregister(InputPyPort)

class OutputPyPort(pilot.OutputPort):
    """Proxy of C++ YACS::ENGINE::OutputPyPort class"""
    __swig_setmethods__ = {}
    for _s in [pilot.OutputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputPyPort, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.OutputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputPyPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OutputPyPort self, std::string const & name, Node node, TypeCode type) -> OutputPyPort
        __init__(YACS::ENGINE::OutputPyPort self, OutputPyPort other, Node newHelder) -> OutputPyPort
        """
        this = _SALOMERuntime.new_OutputPyPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_OutputPyPort
    __del__ = lambda self : None;
    def put(self, *args):
        """
        put(OutputPyPort self, void const * data)
        put(OutputPyPort self, PyObject * data)
        """
        return _SALOMERuntime.OutputPyPort_put(self, *args)

    def clone(self, *args):
        """clone(OutputPyPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputPyPort_clone(self, *args)

    def get(self):
        """get(OutputPyPort self) -> PyObject *"""
        return _SALOMERuntime.OutputPyPort_get(self)

    def getPyObj(self):
        """getPyObj(OutputPyPort self) -> YACS::ENGINE::PyObj *"""
        return _SALOMERuntime.OutputPyPort_getPyObj(self)

    def getAsString(self):
        """getAsString(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_getAsString(self)

    def dump(self):
        """dump(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_dump(self)

    def typeName(self):
        """typeName(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_typeName(self)

    def valToStr(self):
        """valToStr(OutputPyPort self) -> std::string"""
        return _SALOMERuntime.OutputPyPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(OutputPyPort self, std::string valstr)"""
        return _SALOMERuntime.OutputPyPort_valFromStr(self, *args)

OutputPyPort_swigregister = _SALOMERuntime.OutputPyPort_swigregister
OutputPyPort_swigregister(OutputPyPort)

class InputXmlPort(pilot.InputPort):
    """Proxy of C++ YACS::ENGINE::InputXmlPort class"""
    __swig_setmethods__ = {}
    for _s in [pilot.InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputXmlPort, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputXmlPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::InputXmlPort self, std::string const & name, Node node, TypeCode type) -> InputXmlPort
        __init__(YACS::ENGINE::InputXmlPort self, InputXmlPort other, Node newHelder) -> InputXmlPort
        """
        this = _SALOMERuntime.new_InputXmlPort(*args)
        try: self.this.append(this)
        except: self.this = this
    def edIsManuallyInitialized(self):
        """edIsManuallyInitialized(InputXmlPort self) -> bool"""
        return _SALOMERuntime.InputXmlPort_edIsManuallyInitialized(self)

    def edRemoveManInit(self):
        """edRemoveManInit(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_edRemoveManInit(self)

    def put(self, *args):
        """
        put(InputXmlPort self, void const * data)
        put(InputXmlPort self, char const * data)
        """
        return _SALOMERuntime.InputXmlPort_put(self, *args)

    def clone(self, *args):
        """clone(InputXmlPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputXmlPort_clone(self, *args)

    def getXml(self):
        """getXml(InputXmlPort self) -> char const *"""
        return _SALOMERuntime.InputXmlPort_getXml(self)

    def get(self):
        """get(InputXmlPort self) -> void *"""
        return _SALOMERuntime.InputXmlPort_get(self)

    def isEmpty(self):
        """isEmpty(InputXmlPort self) -> bool"""
        return _SALOMERuntime.InputXmlPort_isEmpty(self)

    def exSaveInit(self):
        """exSaveInit(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(InputXmlPort self)"""
        return _SALOMERuntime.InputXmlPort_exRestoreInit(self)

    def dump(self):
        """dump(InputXmlPort self) -> std::string"""
        return _SALOMERuntime.InputXmlPort_dump(self)

    def valToStr(self):
        """valToStr(InputXmlPort self) -> std::string"""
        return _SALOMERuntime.InputXmlPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(InputXmlPort self, std::string valstr)"""
        return _SALOMERuntime.InputXmlPort_valFromStr(self, *args)

    __swig_destroy__ = _SALOMERuntime.delete_InputXmlPort
    __del__ = lambda self : None;
InputXmlPort_swigregister = _SALOMERuntime.InputXmlPort_swigregister
InputXmlPort_swigregister(InputXmlPort)

class OutputXmlPort(pilot.OutputPort):
    """Proxy of C++ YACS::ENGINE::OutputXmlPort class"""
    __swig_setmethods__ = {}
    for _s in [pilot.OutputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputXmlPort, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.OutputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputXmlPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OutputXmlPort self, std::string const & name, Node node, TypeCode type) -> OutputXmlPort
        __init__(YACS::ENGINE::OutputXmlPort self, OutputXmlPort other, Node newHelder) -> OutputXmlPort
        """
        this = _SALOMERuntime.new_OutputXmlPort(*args)
        try: self.this.append(this)
        except: self.this = this
    def put(self, *args):
        """
        put(OutputXmlPort self, void const * data)
        put(OutputXmlPort self, char const * data)
        """
        return _SALOMERuntime.OutputXmlPort_put(self, *args)

    def get(self):
        """get(OutputXmlPort self) -> char const *"""
        return _SALOMERuntime.OutputXmlPort_get(self)

    def clone(self, *args):
        """clone(OutputXmlPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputXmlPort_clone(self, *args)

    def dump(self):
        """dump(OutputXmlPort self) -> std::string"""
        return _SALOMERuntime.OutputXmlPort_dump(self)

    def valToStr(self):
        """valToStr(OutputXmlPort self) -> std::string"""
        return _SALOMERuntime.OutputXmlPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(OutputXmlPort self, std::string valstr)"""
        return _SALOMERuntime.OutputXmlPort_valFromStr(self, *args)

    __swig_destroy__ = _SALOMERuntime.delete_OutputXmlPort
    __del__ = lambda self : None;
OutputXmlPort_swigregister = _SALOMERuntime.OutputXmlPort_swigregister
OutputXmlPort_swigregister(OutputXmlPort)

class PresetNode(pilot.DataNode):
    """Proxy of C++ YACS::ENGINE::PresetNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.DataNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PresetNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.DataNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PresetNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def execute(self):
        """execute(PresetNode self)"""
        return _SALOMERuntime.PresetNode_execute(self)

    def accept(self, *args):
        """accept(PresetNode self, Visitor visitor)"""
        return _SALOMERuntime.PresetNode_accept(self, *args)

    def checkBasicConsistency(self):
        """checkBasicConsistency(PresetNode self)"""
        return _SALOMERuntime.PresetNode_checkBasicConsistency(self)

    def setData(self, *args):
        """setData(PresetNode self, OutputPort port, std::string const & data)"""
        return _SALOMERuntime.PresetNode_setData(self, *args)

    def createOutputPort(self, *args):
        """createOutputPort(PresetNode self, std::string const & outputPortName, TypeCode type) -> OutputPort"""
        return _SALOMERuntime.PresetNode_createOutputPort(self, *args)

    def typeName(self):
        """typeName(PresetNode self) -> std::string"""
        return _SALOMERuntime.PresetNode_typeName(self)

    __swig_destroy__ = _SALOMERuntime.delete_PresetNode
    __del__ = lambda self : None;
PresetNode_swigregister = _SALOMERuntime.PresetNode_swigregister
PresetNode_swigregister(PresetNode)
PresetNode.IMPL_NAME = _SALOMERuntime.cvar.PresetNode_IMPL_NAME

class OutputPresetPort(OutputXmlPort):
    """Proxy of C++ YACS::ENGINE::OutputPresetPort class"""
    __swig_setmethods__ = {}
    for _s in [OutputXmlPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputPresetPort, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputXmlPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputPresetPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OutputPresetPort self, std::string const & name, Node node, TypeCode type) -> OutputPresetPort
        __init__(YACS::ENGINE::OutputPresetPort self, OutputPresetPort other, Node newHelder) -> OutputPresetPort
        """
        this = _SALOMERuntime.new_OutputPresetPort(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self, *args):
        """clone(OutputPresetPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputPresetPort_clone(self, *args)

    def setData(self, *args):
        """setData(OutputPresetPort self, std::string data)"""
        return _SALOMERuntime.OutputPresetPort_setData(self, *args)

    def getData(self):
        """getData(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_getData(self)

    def checkBasicConsistency(self):
        """checkBasicConsistency(OutputPresetPort self)"""
        return _SALOMERuntime.OutputPresetPort_checkBasicConsistency(self)

    def dump(self):
        """dump(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_dump(self)

    def getAsString(self):
        """getAsString(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_getAsString(self)

    def getPyObj(self):
        """getPyObj(OutputPresetPort self) -> PyObject *"""
        return _SALOMERuntime.OutputPresetPort_getPyObj(self)

    def typeName(self):
        """typeName(OutputPresetPort self) -> std::string"""
        return _SALOMERuntime.OutputPresetPort_typeName(self)

    def setDataPy(self, *args):
        """setDataPy(OutputPresetPort self, PyObject * ob)"""
        return _SALOMERuntime.OutputPresetPort_setDataPy(self, *args)

    __swig_destroy__ = _SALOMERuntime.delete_OutputPresetPort
    __del__ = lambda self : None;
OutputPresetPort_swigregister = _SALOMERuntime.OutputPresetPort_swigregister
OutputPresetPort_swigregister(OutputPresetPort)

class InputPresetPort(InputXmlPort):
    """Proxy of C++ YACS::ENGINE::InputPresetPort class"""
    __swig_setmethods__ = {}
    for _s in [InputXmlPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPresetPort, name, value)
    __swig_getmethods__ = {}
    for _s in [InputXmlPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPresetPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::InputPresetPort self, std::string const & name, Node node, TypeCode type) -> InputPresetPort
        __init__(YACS::ENGINE::InputPresetPort self, InputPresetPort other, Node newHelder) -> InputPresetPort
        """
        this = _SALOMERuntime.new_InputPresetPort(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self, *args):
        """clone(InputPresetPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputPresetPort_clone(self, *args)

    def setData(self, *args):
        """setData(InputPresetPort self, std::string data)"""
        return _SALOMERuntime.InputPresetPort_setData(self, *args)

    def getData(self):
        """getData(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_getData(self)

    def dump(self):
        """dump(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_dump(self)

    def getAsString(self):
        """getAsString(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_getAsString(self)

    def getPyObj(self):
        """getPyObj(InputPresetPort self) -> PyObject *"""
        return _SALOMERuntime.InputPresetPort_getPyObj(self)

    def typeName(self):
        """typeName(InputPresetPort self) -> std::string"""
        return _SALOMERuntime.InputPresetPort_typeName(self)

    __swig_destroy__ = _SALOMERuntime.delete_InputPresetPort
    __del__ = lambda self : None;
InputPresetPort_swigregister = _SALOMERuntime.InputPresetPort_swigregister
InputPresetPort_swigregister(InputPresetPort)

class CORBANode(pilot.ServiceNode):
    """Proxy of C++ YACS::ENGINE::CORBANode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.ServiceNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CORBANode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.ServiceNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CORBANode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def execute(self):
        """execute(CORBANode self)"""
        return _SALOMERuntime.CORBANode_execute(self)

    def createNode(self, *args):
        """createNode(CORBANode self, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.CORBANode_createNode(self, *args)

    def getKind(self):
        """getKind(CORBANode self) -> std::string"""
        return _SALOMERuntime.CORBANode_getKind(self)

    def typeName(self):
        """typeName(CORBANode self) -> std::string"""
        return _SALOMERuntime.CORBANode_typeName(self)

    __swig_destroy__ = _SALOMERuntime.delete_CORBANode
    __del__ = lambda self : None;
CORBANode_swigregister = _SALOMERuntime.CORBANode_swigregister
CORBANode_swigregister(CORBANode)
CORBANode.KIND = _SALOMERuntime.cvar.CORBANode_KIND
CORBANode.IMPL_NAME = _SALOMERuntime.cvar.CORBANode_IMPL_NAME

class SalomeNode(pilot.ServiceNode):
    """Proxy of C++ YACS::ENGINE::SalomeNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.ServiceNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalomeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.ServiceNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SalomeNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_SalomeNode
    __del__ = lambda self : None;
    def execute(self):
        """execute(SalomeNode self)"""
        return _SALOMERuntime.SalomeNode_execute(self)

    def createNode(self, *args):
        """createNode(SalomeNode self, std::string const & name) -> ServiceNode"""
        return _SALOMERuntime.SalomeNode_createNode(self, *args)

    def getKind(self):
        """getKind(SalomeNode self) -> std::string"""
        return _SALOMERuntime.SalomeNode_getKind(self)

    def typeName(self):
        """typeName(SalomeNode self) -> std::string"""
        return _SALOMERuntime.SalomeNode_typeName(self)

    def shutdown(self, *args):
        """shutdown(SalomeNode self, int level)"""
        return _SALOMERuntime.SalomeNode_shutdown(self, *args)

    def getContainerLog(self):
        """getContainerLog(SalomeNode self) -> std::string"""
        return _SALOMERuntime.SalomeNode_getContainerLog(self)

    def addDatastreamPortToInitMultiService(self, *args):
        """addDatastreamPortToInitMultiService(SalomeNode self, std::string const & port_name, int number)"""
        return _SALOMERuntime.SalomeNode_addDatastreamPortToInitMultiService(self, *args)

SalomeNode_swigregister = _SALOMERuntime.SalomeNode_swigregister
SalomeNode_swigregister(SalomeNode)
SalomeNode.KIND = _SALOMERuntime.cvar.SalomeNode_KIND

class InputCorbaPort(pilot.InputPort):
    """Proxy of C++ YACS::ENGINE::InputCorbaPort class"""
    __swig_setmethods__ = {}
    for _s in [pilot.InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputCorbaPort, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputCorbaPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::InputCorbaPort self, std::string const & name, Node node, TypeCode type) -> InputCorbaPort
        __init__(YACS::ENGINE::InputCorbaPort self, InputCorbaPort other, Node newHelder) -> InputCorbaPort
        """
        this = _SALOMERuntime.new_InputCorbaPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_InputCorbaPort
    __del__ = lambda self : None;
    def edIsManuallyInitialized(self):
        """edIsManuallyInitialized(InputCorbaPort self) -> bool"""
        return _SALOMERuntime.InputCorbaPort_edIsManuallyInitialized(self)

    def edRemoveManInit(self):
        """edRemoveManInit(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_edRemoveManInit(self)

    def put(self, *args):
        """
        put(InputCorbaPort self, void const * data)
        put(InputCorbaPort self, CORBA::Any * data)
        """
        return _SALOMERuntime.InputCorbaPort_put(self, *args)

    def clone(self, *args):
        """clone(InputCorbaPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputCorbaPort_clone(self, *args)

    def get(self):
        """get(InputCorbaPort self) -> void *"""
        return _SALOMERuntime.InputCorbaPort_get(self)

    def isEmpty(self):
        """isEmpty(InputCorbaPort self) -> bool"""
        return _SALOMERuntime.InputCorbaPort_isEmpty(self)

    def getAny(self):
        """getAny(InputCorbaPort self) -> CORBA::Any *"""
        return _SALOMERuntime.InputCorbaPort_getAny(self)

    def getAsString(self):
        """getAsString(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_getAsString(self)

    def getPyObj(self):
        """getPyObj(InputCorbaPort self) -> PyObject *"""
        return _SALOMERuntime.InputCorbaPort_getPyObj(self)

    def exSaveInit(self):
        """exSaveInit(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(InputCorbaPort self)"""
        return _SALOMERuntime.InputCorbaPort_exRestoreInit(self)

    def dump(self):
        """dump(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_dump(self)

    def typeName(self):
        """typeName(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_typeName(self)

    def valToStr(self):
        """valToStr(InputCorbaPort self) -> std::string"""
        return _SALOMERuntime.InputCorbaPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(InputCorbaPort self, std::string valstr)"""
        return _SALOMERuntime.InputCorbaPort_valFromStr(self, *args)

InputCorbaPort_swigregister = _SALOMERuntime.InputCorbaPort_swigregister
InputCorbaPort_swigregister(InputCorbaPort)


def __lshift__(*args):
  """__lshift__(std::ostream & os, OutputCorbaPort p) -> std::ostream &"""
  return _SALOMERuntime.__lshift__(*args)
class OutputCorbaPort(pilot.OutputPort):
    """Proxy of C++ YACS::ENGINE::OutputCorbaPort class"""
    __swig_setmethods__ = {}
    for _s in [pilot.OutputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputCorbaPort, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.OutputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputCorbaPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OutputCorbaPort self, std::string const & name, Node node, TypeCode type) -> OutputCorbaPort
        __init__(YACS::ENGINE::OutputCorbaPort self, OutputCorbaPort other, Node newHelder) -> OutputCorbaPort
        """
        this = _SALOMERuntime.new_OutputCorbaPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_OutputCorbaPort
    __del__ = lambda self : None;
    def put(self, *args):
        """
        put(OutputCorbaPort self, void const * data)
        put(OutputCorbaPort self, CORBA::Any * data)
        """
        return _SALOMERuntime.OutputCorbaPort_put(self, *args)

    def clone(self, *args):
        """clone(OutputCorbaPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputCorbaPort_clone(self, *args)

    def getAny(self):
        """getAny(OutputCorbaPort self) -> CORBA::Any *"""
        return _SALOMERuntime.OutputCorbaPort_getAny(self)

    def getAnyOut(self):
        """getAnyOut(OutputCorbaPort self) -> CORBA::Any *"""
        return _SALOMERuntime.OutputCorbaPort_getAnyOut(self)

    def getAsString(self):
        """getAsString(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_getAsString(self)

    def getPyObj(self):
        """getPyObj(OutputCorbaPort self) -> PyObject *"""
        return _SALOMERuntime.OutputCorbaPort_getPyObj(self)

    def dump(self):
        """dump(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_dump(self)

    def typeName(self):
        """typeName(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_typeName(self)

    def valToStr(self):
        """valToStr(OutputCorbaPort self) -> std::string"""
        return _SALOMERuntime.OutputCorbaPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(OutputCorbaPort self, std::string valstr)"""
        return _SALOMERuntime.OutputCorbaPort_valFromStr(self, *args)

OutputCorbaPort_swigregister = _SALOMERuntime.OutputCorbaPort_swigregister
OutputCorbaPort_swigregister(OutputCorbaPort)

class StudyInNode(pilot.DataNode):
    """Proxy of C++ YACS::ENGINE::StudyInNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.DataNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StudyInNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.DataNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StudyInNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def execute(self):
        """execute(StudyInNode self)"""
        return _SALOMERuntime.StudyInNode_execute(self)

    def accept(self, *args):
        """accept(StudyInNode self, Visitor visitor)"""
        return _SALOMERuntime.StudyInNode_accept(self, *args)

    def checkBasicConsistency(self):
        """checkBasicConsistency(StudyInNode self)"""
        return _SALOMERuntime.StudyInNode_checkBasicConsistency(self)

    def setData(self, *args):
        """setData(StudyInNode self, OutputPort port, std::string const & data)"""
        return _SALOMERuntime.StudyInNode_setData(self, *args)

    def createOutputPort(self, *args):
        """createOutputPort(StudyInNode self, std::string const & outputPortName, TypeCode type) -> OutputPort"""
        return _SALOMERuntime.StudyInNode_createOutputPort(self, *args)

    def typeName(self):
        """typeName(StudyInNode self) -> std::string"""
        return _SALOMERuntime.StudyInNode_typeName(self)

    __swig_destroy__ = _SALOMERuntime.delete_StudyInNode
    __del__ = lambda self : None;
StudyInNode_swigregister = _SALOMERuntime.StudyInNode_swigregister
StudyInNode_swigregister(StudyInNode)
StudyInNode.IMPL_NAME = _SALOMERuntime.cvar.StudyInNode_IMPL_NAME

class StudyOutNode(pilot.DataNode):
    """Proxy of C++ YACS::ENGINE::StudyOutNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.DataNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StudyOutNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.DataNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StudyOutNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def execute(self):
        """execute(StudyOutNode self)"""
        return _SALOMERuntime.StudyOutNode_execute(self)

    def accept(self, *args):
        """accept(StudyOutNode self, Visitor visitor)"""
        return _SALOMERuntime.StudyOutNode_accept(self, *args)

    def checkBasicConsistency(self):
        """checkBasicConsistency(StudyOutNode self)"""
        return _SALOMERuntime.StudyOutNode_checkBasicConsistency(self)

    def setData(self, *args):
        """setData(StudyOutNode self, InputPort port, std::string const & data)"""
        return _SALOMERuntime.StudyOutNode_setData(self, *args)

    def createInputPort(self, *args):
        """createInputPort(StudyOutNode self, std::string const & inputPortName, TypeCode type) -> InputPort"""
        return _SALOMERuntime.StudyOutNode_createInputPort(self, *args)

    def typeName(self):
        """typeName(StudyOutNode self) -> std::string"""
        return _SALOMERuntime.StudyOutNode_typeName(self)

    __swig_destroy__ = _SALOMERuntime.delete_StudyOutNode
    __del__ = lambda self : None;
StudyOutNode_swigregister = _SALOMERuntime.StudyOutNode_swigregister
StudyOutNode_swigregister(StudyOutNode)
StudyOutNode.IMPL_NAME = _SALOMERuntime.cvar.StudyOutNode_IMPL_NAME

class OutputStudyPort(OutputXmlPort):
    """Proxy of C++ YACS::ENGINE::OutputStudyPort class"""
    __swig_setmethods__ = {}
    for _s in [OutputXmlPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputStudyPort, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputXmlPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputStudyPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OutputStudyPort self, std::string const & name, Node node, TypeCode type) -> OutputStudyPort
        __init__(YACS::ENGINE::OutputStudyPort self, OutputStudyPort other, Node newHelder) -> OutputStudyPort
        """
        this = _SALOMERuntime.new_OutputStudyPort(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self, *args):
        """clone(OutputStudyPort self, Node newHelder) -> OutputPort"""
        return _SALOMERuntime.OutputStudyPort_clone(self, *args)

    def setData(self, *args):
        """setData(OutputStudyPort self, std::string const & data)"""
        return _SALOMERuntime.OutputStudyPort_setData(self, *args)

    def getData(self):
        """getData(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_getData(self)

    def putIOR(self, *args):
        """putIOR(OutputStudyPort self, std::string const & ior)"""
        return _SALOMERuntime.OutputStudyPort_putIOR(self, *args)

    def dump(self):
        """dump(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_dump(self)

    def getPyObj(self):
        """getPyObj(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_getPyObj(self)

    def getAsString(self):
        """getAsString(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_getAsString(self)

    def typeName(self):
        """typeName(OutputStudyPort self) -> std::string"""
        return _SALOMERuntime.OutputStudyPort_typeName(self)

    def getDataFromStudy(self, *args):
        """getDataFromStudy(OutputStudyPort self, SALOMEDS::Study_var myStudy)"""
        return _SALOMERuntime.OutputStudyPort_getDataFromStudy(self, *args)

    __swig_destroy__ = _SALOMERuntime.delete_OutputStudyPort
    __del__ = lambda self : None;
OutputStudyPort_swigregister = _SALOMERuntime.OutputStudyPort_swigregister
OutputStudyPort_swigregister(OutputStudyPort)

class InputStudyPort(InputXmlPort):
    """Proxy of C++ YACS::ENGINE::InputStudyPort class"""
    __swig_setmethods__ = {}
    for _s in [InputXmlPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStudyPort, name, value)
    __swig_getmethods__ = {}
    for _s in [InputXmlPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputStudyPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::InputStudyPort self, std::string const & name, Node node, TypeCode type) -> InputStudyPort
        __init__(YACS::ENGINE::InputStudyPort self, InputStudyPort other, Node newHelder) -> InputStudyPort
        """
        this = _SALOMERuntime.new_InputStudyPort(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self, *args):
        """clone(InputStudyPort self, Node newHelder) -> InputPort"""
        return _SALOMERuntime.InputStudyPort_clone(self, *args)

    def setData(self, *args):
        """setData(InputStudyPort self, std::string const & data)"""
        return _SALOMERuntime.InputStudyPort_setData(self, *args)

    def getData(self):
        """getData(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getData(self)

    def getIOR(self):
        """getIOR(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getIOR(self)

    def splitXML(self, *args):
        """splitXML(InputStudyPort self, std::string const & s) -> std::string"""
        return _SALOMERuntime.InputStudyPort_splitXML(self, *args)

    def dump(self):
        """dump(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_dump(self)

    def getPyObj(self):
        """getPyObj(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getPyObj(self)

    def getAsString(self):
        """getAsString(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_getAsString(self)

    def typeName(self):
        """typeName(InputStudyPort self) -> std::string"""
        return _SALOMERuntime.InputStudyPort_typeName(self)

    def putDataInStudy(self, *args):
        """putDataInStudy(InputStudyPort self, SALOMEDS::Study_var myStudy, SALOMEDS::StudyBuilder_var aBuilder)"""
        return _SALOMERuntime.InputStudyPort_putDataInStudy(self, *args)

    __swig_destroy__ = _SALOMERuntime.delete_InputStudyPort
    __del__ = lambda self : None;
InputStudyPort_swigregister = _SALOMERuntime.InputStudyPort_swigregister
InputStudyPort_swigregister(InputStudyPort)

class SalomeOptimizerLoop(pilot.OptimizerLoop):
    """Proxy of C++ YACS::ENGINE::SalomeOptimizerLoop class"""
    __swig_setmethods__ = {}
    for _s in [pilot.OptimizerLoop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalomeOptimizerLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.OptimizerLoop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SalomeOptimizerLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::SalomeOptimizerLoop self, std::string const & name, std::string const & algLibWthOutExt, std::string const & symbolNameToOptimizerAlgBaseInstanceFactory, 
            bool algInitOnFile, bool initAlgo=True, 
            Proc procForTypes=None) -> SalomeOptimizerLoop
        __init__(YACS::ENGINE::SalomeOptimizerLoop self, std::string const & name, std::string const & algLibWthOutExt, std::string const & symbolNameToOptimizerAlgBaseInstanceFactory, 
            bool algInitOnFile, bool initAlgo=True) -> SalomeOptimizerLoop
        __init__(YACS::ENGINE::SalomeOptimizerLoop self, std::string const & name, std::string const & algLibWthOutExt, std::string const & symbolNameToOptimizerAlgBaseInstanceFactory, 
            bool algInitOnFile) -> SalomeOptimizerLoop
        __init__(YACS::ENGINE::SalomeOptimizerLoop self, SalomeOptimizerLoop other, ComposedNode father, bool editionOnly) -> SalomeOptimizerLoop
        """
        this = _SALOMERuntime.new_SalomeOptimizerLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SALOMERuntime.delete_SalomeOptimizerLoop
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(SalomeOptimizerLoop self) -> std::string"""
        return _SALOMERuntime.SalomeOptimizerLoop_typeName(self)

SalomeOptimizerLoop_swigregister = _SALOMERuntime.SalomeOptimizerLoop_swigregister
SalomeOptimizerLoop_swigregister(SalomeOptimizerLoop)

class DistributedPythonNode(pilot.ServerNode):
    """Proxy of C++ YACS::ENGINE::DistributedPythonNode class"""
    __swig_setmethods__ = {}
    for _s in [pilot.ServerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributedPythonNode, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.ServerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributedPythonNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_DistributedPythonNode
    __del__ = lambda self : None;
    def execute(self):
        """execute(DistributedPythonNode self)"""
        return _SALOMERuntime.DistributedPythonNode_execute(self)

    def load(self):
        """load(DistributedPythonNode self)"""
        return _SALOMERuntime.DistributedPythonNode_load(self)

    def getEffectiveKindOfServer(self):
        """getEffectiveKindOfServer(DistributedPythonNode self) -> std::string"""
        return _SALOMERuntime.DistributedPythonNode_getEffectiveKindOfServer(self)

    def getKind(self):
        """getKind(DistributedPythonNode self) -> std::string"""
        return _SALOMERuntime.DistributedPythonNode_getKind(self)

    def createNode(self, *args):
        """createNode(DistributedPythonNode self, std::string const & name) -> ServerNode"""
        return _SALOMERuntime.DistributedPythonNode_createNode(self, *args)

    def typeName(self):
        """typeName(DistributedPythonNode self) -> std::string"""
        return _SALOMERuntime.DistributedPythonNode_typeName(self)

DistributedPythonNode_swigregister = _SALOMERuntime.DistributedPythonNode_swigregister
DistributedPythonNode_swigregister(DistributedPythonNode)
DistributedPythonNode.KIND = _SALOMERuntime.cvar.DistributedPythonNode_KIND
DistributedPythonNode.IMPL_NAME = _SALOMERuntime.cvar.DistributedPythonNode_IMPL_NAME
DistributedPythonNode.SALOME_CONTAINER_METHOD_IDL = _SALOMERuntime.cvar.DistributedPythonNode_SALOME_CONTAINER_METHOD_IDL

class OptimizerAlgSync(pilot.OptimizerAlgBase):
    """Proxy of C++ YACS::ENGINE::PyOptimizerAlgBase class"""
    __swig_setmethods__ = {}
    for _s in [pilot.OptimizerAlgBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerAlgSync, name, value)
    __swig_getmethods__ = {}
    for _s in [pilot.OptimizerAlgBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerAlgSync, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_OptimizerAlgSync
    __del__ = lambda self : None;
    def getTCForInProxy(self):
        """getTCForInProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForInProxy(self)

    def getTCForOutProxy(self):
        """getTCForOutProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForOutProxy(self)

    def getTCForAlgoInitProxy(self):
        """getTCForAlgoInitProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoInitProxy(self)

    def getTCForAlgoResultProxy(self):
        """getTCForAlgoResultProxy(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoResultProxy(self)

    def initializeProxy(self, *args):
        """initializeProxy(OptimizerAlgSync self, Any input)"""
        return _SALOMERuntime.OptimizerAlgSync_initializeProxy(self, *args)

    def startProxy(self):
        """startProxy(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_startProxy(self)

    def takeDecisionProxy(self):
        """takeDecisionProxy(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_takeDecisionProxy(self)

    def finishProxy(self):
        """finishProxy(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_finishProxy(self)

    def getAlgoResultProxy(self):
        """getAlgoResultProxy(OptimizerAlgSync self) -> Any"""
        return _SALOMERuntime.OptimizerAlgSync_getAlgoResultProxy(self)

    def __init__(self, *args): 
        """__init__(YACS::ENGINE::PyOptimizerAlgBase self, Pool pool) -> OptimizerAlgSync"""
        if self.__class__ == OptimizerAlgSync:
            _self = None
        else:
            _self = self
        this = _SALOMERuntime.new_OptimizerAlgSync(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _SALOMERuntime.disown_OptimizerAlgSync(self)
        return weakref_proxy(self)
    def getTCForIn(self):
        """getTCForIn(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForIn(self)

    def getTCForOut(self):
        """getTCForOut(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForOut(self)

    def getTCForAlgoInit(self):
        """getTCForAlgoInit(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoInit(self)

    def getTCForAlgoResult(self):
        """getTCForAlgoResult(OptimizerAlgSync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgSync_getTCForAlgoResult(self)

    def initialize(self, *args):
        """initialize(OptimizerAlgSync self, Any input)"""
        return _SALOMERuntime.OptimizerAlgSync_initialize(self, *args)

    def start(self):
        """start(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_start(self)

    def takeDecision(self):
        """takeDecision(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_takeDecision(self)

    def finish(self):
        """finish(OptimizerAlgSync self)"""
        return _SALOMERuntime.OptimizerAlgSync_finish(self)

    def getAlgoResult(self):
        """getAlgoResult(OptimizerAlgSync self) -> Any"""
        return _SALOMERuntime.OptimizerAlgSync_getAlgoResult(self)

OptimizerAlgSync_swigregister = _SALOMERuntime.OptimizerAlgSync_swigregister
OptimizerAlgSync_swigregister(OptimizerAlgSync)

class OptimizerAlgASync(OptimizerAlgSync,pilot.AlternateThreadPT):
    """Proxy of C++ YACS::ENGINE::PyOptimizerAlgASync class"""
    __swig_setmethods__ = {}
    for _s in [OptimizerAlgSync,pilot.AlternateThreadPT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerAlgASync, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizerAlgSync,pilot.AlternateThreadPT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerAlgASync, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _SALOMERuntime.delete_OptimizerAlgASync
    __del__ = lambda self : None;
    def startProxy(self):
        """startProxy(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_startProxy(self)

    def takeDecisionProxy(self):
        """takeDecisionProxy(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_takeDecisionProxy(self)

    def finishProxy(self):
        """finishProxy(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_finishProxy(self)

    def signalMasterAndWait(self):
        """signalMasterAndWait(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_signalMasterAndWait(self)

    def __init__(self, *args): 
        """__init__(YACS::ENGINE::PyOptimizerAlgASync self, Pool pool) -> OptimizerAlgASync"""
        if self.__class__ == OptimizerAlgASync:
            _self = None
        else:
            _self = self
        this = _SALOMERuntime.new_OptimizerAlgASync(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def startToTakeDecision(self):
        """startToTakeDecision(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_startToTakeDecision(self)

    def __disown__(self):
        self.this.disown()
        _SALOMERuntime.disown_OptimizerAlgASync(self)
        return weakref_proxy(self)
    def getTCForIn(self):
        """getTCForIn(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForIn(self)

    def getTCForOut(self):
        """getTCForOut(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForOut(self)

    def getTCForAlgoInit(self):
        """getTCForAlgoInit(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForAlgoInit(self)

    def getTCForAlgoResult(self):
        """getTCForAlgoResult(OptimizerAlgASync self) -> TypeCode"""
        return _SALOMERuntime.OptimizerAlgASync_getTCForAlgoResult(self)

    def initialize(self, *args):
        """initialize(OptimizerAlgASync self, Any input)"""
        return _SALOMERuntime.OptimizerAlgASync_initialize(self, *args)

    def finish(self):
        """finish(OptimizerAlgASync self)"""
        return _SALOMERuntime.OptimizerAlgASync_finish(self)

    def getAlgoResult(self):
        """getAlgoResult(OptimizerAlgASync self) -> Any"""
        return _SALOMERuntime.OptimizerAlgASync_getAlgoResult(self)

OptimizerAlgASync_swigregister = _SALOMERuntime.OptimizerAlgASync_swigregister
OptimizerAlgASync_swigregister(OptimizerAlgASync)

# This file is compatible with both classic and new-style classes.



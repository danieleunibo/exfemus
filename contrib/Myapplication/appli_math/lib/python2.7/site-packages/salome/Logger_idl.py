# Python stubs generated by omniidl from /dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/Logger.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "SALOME_Logger"
#
__name__ = "SALOME_Logger"
_0_SALOME_Logger = omniORB.openModule("SALOME_Logger", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/Logger.idl")
_0_SALOME_Logger__POA = omniORB.openModule("SALOME_Logger__POA", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/Logger.idl")


# interface Logger
_0_SALOME_Logger._d_Logger = (omniORB.tcInternal.tv_objref, "IDL:opencascade.com/SALOME_Logger/Logger:1.0", "Logger")
omniORB.typeMapping["IDL:opencascade.com/SALOME_Logger/Logger:1.0"] = _0_SALOME_Logger._d_Logger
_0_SALOME_Logger.Logger = omniORB.newEmptyClass()
class Logger :
    _NP_RepositoryId = _0_SALOME_Logger._d_Logger[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SALOME_Logger.Logger = Logger
_0_SALOME_Logger._tc_Logger = omniORB.tcInternal.createTypeCode(_0_SALOME_Logger._d_Logger)
omniORB.registerType(Logger._NP_RepositoryId, _0_SALOME_Logger._d_Logger, _0_SALOME_Logger._tc_Logger)

# Logger operations and attributes
Logger._d_putMessage = (((omniORB.tcInternal.tv_string,0), ), None, None)
Logger._d_ping = ((), (), None)
Logger._d_shutdown = ((), (), None)

# Logger object reference
class _objref_Logger (CORBA.Object):
    _NP_RepositoryId = Logger._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def putMessage(self, *args):
        return _omnipy.invoke(self, "putMessage", _0_SALOME_Logger.Logger._d_putMessage, args)

    def ping(self, *args):
        return _omnipy.invoke(self, "ping", _0_SALOME_Logger.Logger._d_ping, args)

    def shutdown(self, *args):
        return _omnipy.invoke(self, "shutdown", _0_SALOME_Logger.Logger._d_shutdown, args)

    __methods__ = ["putMessage", "ping", "shutdown"] + CORBA.Object.__methods__

omniORB.registerObjref(Logger._NP_RepositoryId, _objref_Logger)
_0_SALOME_Logger._objref_Logger = _objref_Logger
del Logger, _objref_Logger

# Logger skeleton
__name__ = "SALOME_Logger__POA"
class Logger (PortableServer.Servant):
    _NP_RepositoryId = _0_SALOME_Logger.Logger._NP_RepositoryId


    _omni_op_d = {"putMessage": _0_SALOME_Logger.Logger._d_putMessage, "ping": _0_SALOME_Logger.Logger._d_ping, "shutdown": _0_SALOME_Logger.Logger._d_shutdown}

Logger._omni_skeleton = Logger
_0_SALOME_Logger__POA.Logger = Logger
omniORB.registerSkeleton(Logger._NP_RepositoryId, Logger)
del Logger
__name__ = "SALOME_Logger"

#
# End of module "SALOME_Logger"
#
__name__ = "Logger_idl"

_exported_modules = ( "SALOME_Logger", )

# The end.

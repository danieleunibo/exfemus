# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
All is needed to create and execute a calculation schema.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pilot', [dirname(__file__)])
        except ImportError:
            import _pilot
            return _pilot
        if fp is not None:
            try:
                _mod = imp.load_module('_pilot', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pilot = swig_import_helper()
    del swig_import_helper
else:
    import _pilot
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class pilot_PySwigIterator(_object):
    """Proxy of C++ swig::pilot_PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pilot_PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pilot_PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_pilot_PySwigIterator
    __del__ = lambda self : None;
    def value(self):
        """value(pilot_PySwigIterator self) -> PyObject *"""
        return _pilot.pilot_PySwigIterator_value(self)

    def incr(self, n=1):
        """
        incr(pilot_PySwigIterator self, size_t n=1) -> pilot_PySwigIterator
        incr(pilot_PySwigIterator self) -> pilot_PySwigIterator
        """
        return _pilot.pilot_PySwigIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(pilot_PySwigIterator self, size_t n=1) -> pilot_PySwigIterator
        decr(pilot_PySwigIterator self) -> pilot_PySwigIterator
        """
        return _pilot.pilot_PySwigIterator_decr(self, n)

    def distance(self, *args):
        """distance(pilot_PySwigIterator self, pilot_PySwigIterator x) -> ptrdiff_t"""
        return _pilot.pilot_PySwigIterator_distance(self, *args)

    def equal(self, *args):
        """equal(pilot_PySwigIterator self, pilot_PySwigIterator x) -> bool"""
        return _pilot.pilot_PySwigIterator_equal(self, *args)

    def copy(self):
        """copy(pilot_PySwigIterator self) -> pilot_PySwigIterator"""
        return _pilot.pilot_PySwigIterator_copy(self)

    def next(self):
        """next(pilot_PySwigIterator self) -> PyObject *"""
        return _pilot.pilot_PySwigIterator_next(self)

    def __next__(self):
        """__next__(pilot_PySwigIterator self) -> PyObject *"""
        return _pilot.pilot_PySwigIterator___next__(self)

    def previous(self):
        """previous(pilot_PySwigIterator self) -> PyObject *"""
        return _pilot.pilot_PySwigIterator_previous(self)

    def advance(self, *args):
        """advance(pilot_PySwigIterator self, ptrdiff_t n) -> pilot_PySwigIterator"""
        return _pilot.pilot_PySwigIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(pilot_PySwigIterator self, pilot_PySwigIterator x) -> bool"""
        return _pilot.pilot_PySwigIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(pilot_PySwigIterator self, pilot_PySwigIterator x) -> bool"""
        return _pilot.pilot_PySwigIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(pilot_PySwigIterator self, ptrdiff_t n) -> pilot_PySwigIterator"""
        return _pilot.pilot_PySwigIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(pilot_PySwigIterator self, ptrdiff_t n) -> pilot_PySwigIterator"""
        return _pilot.pilot_PySwigIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(pilot_PySwigIterator self, ptrdiff_t n) -> pilot_PySwigIterator"""
        return _pilot.pilot_PySwigIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(pilot_PySwigIterator self, ptrdiff_t n) -> pilot_PySwigIterator
        __sub__(pilot_PySwigIterator self, pilot_PySwigIterator x) -> ptrdiff_t
        """
        return _pilot.pilot_PySwigIterator___sub__(self, *args)

    def __iter__(self): return self
pilot_PySwigIterator_swigregister = _pilot.pilot_PySwigIterator_swigregister
pilot_PySwigIterator_swigregister(pilot_PySwigIterator)

class TCmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::TypeCode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCmap, name)
    __repr__ = _swig_repr
    def __setitem__(self, *args):
        """__setitem__(TCmap self, std::string const & name, TypeCode c)"""
        return _pilot.TCmap___setitem__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(TCmap self, std::string name) -> TypeCode"""
        return _pilot.TCmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(TCmap self, std::string name)"""
        return _pilot.TCmap___delitem__(self, *args)

    def keys(self):
        """keys(TCmap self) -> PyObject *"""
        return _pilot.TCmap_keys(self)

    def __init__(self): 
        """__init__(std::map<(std::string,p.YACS::ENGINE::TypeCode)> self) -> TCmap"""
        this = _pilot.new_TCmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_TCmap
    __del__ = lambda self : None;
TCmap_swigregister = _pilot.TCmap_swigregister
TCmap_swigregister(TCmap)

from UserDict import DictMixin
class TCmap(TCmap,DictMixin):pass
TCmap_swigregister(TCmap)

class NODEmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::Node)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NODEmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NODEmap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(NODEmap self) -> pilot_PySwigIterator"""
        return _pilot.NODEmap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(NODEmap self) -> bool"""
        return _pilot.NODEmap___nonzero__(self)

    def __bool__(self):
        """__bool__(NODEmap self) -> bool"""
        return _pilot.NODEmap___bool__(self)

    def __len__(self):
        """__len__(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::size_type"""
        return _pilot.NODEmap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & key) -> Node"""
        return _pilot.NODEmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & key)"""
        return _pilot.NODEmap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & key) -> bool"""
        return _pilot.NODEmap_has_key(self, *args)

    def keys(self):
        """keys(NODEmap self) -> PyObject *"""
        return _pilot.NODEmap_keys(self)

    def values(self):
        """values(NODEmap self) -> PyObject *"""
        return _pilot.NODEmap_values(self)

    def items(self):
        """items(NODEmap self) -> PyObject *"""
        return _pilot.NODEmap_items(self)

    def __contains__(self, *args):
        """__contains__(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & key) -> bool"""
        return _pilot.NODEmap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(NODEmap self) -> pilot_PySwigIterator"""
        return _pilot.NODEmap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(NODEmap self) -> pilot_PySwigIterator"""
        return _pilot.NODEmap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & key)
        __setitem__(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & key, Node x)
        """
        return _pilot.NODEmap___setitem__(self, *args)

    def asdict(self):
        """asdict(NODEmap self) -> PyObject *"""
        return _pilot.NODEmap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.YACS::ENGINE::Node)> self, std::less< std::string > const & arg2) -> NODEmap
        __init__(std::map<(std::string,p.YACS::ENGINE::Node)> self) -> NODEmap
        __init__(std::map<(std::string,p.YACS::ENGINE::Node)> self, NODEmap arg2) -> NODEmap
        """
        this = _pilot.new_NODEmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(NODEmap self) -> bool"""
        return _pilot.NODEmap_empty(self)

    def size(self):
        """size(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::size_type"""
        return _pilot.NODEmap_size(self)

    def clear(self):
        """clear(NODEmap self)"""
        return _pilot.NODEmap_clear(self)

    def swap(self, *args):
        """swap(NODEmap self, NODEmap v)"""
        return _pilot.NODEmap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::allocator_type"""
        return _pilot.NODEmap_get_allocator(self)

    def begin(self):
        """begin(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::iterator"""
        return _pilot.NODEmap_begin(self)

    def end(self):
        """end(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::iterator"""
        return _pilot.NODEmap_end(self)

    def rbegin(self):
        """rbegin(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::reverse_iterator"""
        return _pilot.NODEmap_rbegin(self)

    def rend(self):
        """rend(NODEmap self) -> std::map< std::string,YACS::ENGINE::Node * >::reverse_iterator"""
        return _pilot.NODEmap_rend(self)

    def count(self, *args):
        """count(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::Node * >::size_type"""
        return _pilot.NODEmap_count(self, *args)

    def erase(self, *args):
        """
        erase(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::Node * >::size_type
        erase(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::iterator position)
        erase(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::iterator first, std::map< std::string,YACS::ENGINE::Node * >::iterator last)
        """
        return _pilot.NODEmap_erase(self, *args)

    def find(self, *args):
        """find(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::Node * >::iterator"""
        return _pilot.NODEmap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::Node * >::iterator"""
        return _pilot.NODEmap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(NODEmap self, std::map< std::string,YACS::ENGINE::Node * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::Node * >::iterator"""
        return _pilot.NODEmap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_NODEmap
    __del__ = lambda self : None;
NODEmap_swigregister = _pilot.NODEmap_swigregister
NODEmap_swigregister(NODEmap)

class INODEmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::InlineNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INODEmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INODEmap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(INODEmap self) -> pilot_PySwigIterator"""
        return _pilot.INODEmap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(INODEmap self) -> bool"""
        return _pilot.INODEmap___nonzero__(self)

    def __bool__(self):
        """__bool__(INODEmap self) -> bool"""
        return _pilot.INODEmap___bool__(self)

    def __len__(self):
        """__len__(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::size_type"""
        return _pilot.INODEmap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & key) -> InlineNode"""
        return _pilot.INODEmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & key)"""
        return _pilot.INODEmap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & key) -> bool"""
        return _pilot.INODEmap_has_key(self, *args)

    def keys(self):
        """keys(INODEmap self) -> PyObject *"""
        return _pilot.INODEmap_keys(self)

    def values(self):
        """values(INODEmap self) -> PyObject *"""
        return _pilot.INODEmap_values(self)

    def items(self):
        """items(INODEmap self) -> PyObject *"""
        return _pilot.INODEmap_items(self)

    def __contains__(self, *args):
        """__contains__(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & key) -> bool"""
        return _pilot.INODEmap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(INODEmap self) -> pilot_PySwigIterator"""
        return _pilot.INODEmap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(INODEmap self) -> pilot_PySwigIterator"""
        return _pilot.INODEmap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & key)
        __setitem__(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & key, InlineNode x)
        """
        return _pilot.INODEmap___setitem__(self, *args)

    def asdict(self):
        """asdict(INODEmap self) -> PyObject *"""
        return _pilot.INODEmap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.YACS::ENGINE::InlineNode)> self, std::less< std::string > const & arg2) -> INODEmap
        __init__(std::map<(std::string,p.YACS::ENGINE::InlineNode)> self) -> INODEmap
        __init__(std::map<(std::string,p.YACS::ENGINE::InlineNode)> self, INODEmap arg2) -> INODEmap
        """
        this = _pilot.new_INODEmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(INODEmap self) -> bool"""
        return _pilot.INODEmap_empty(self)

    def size(self):
        """size(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::size_type"""
        return _pilot.INODEmap_size(self)

    def clear(self):
        """clear(INODEmap self)"""
        return _pilot.INODEmap_clear(self)

    def swap(self, *args):
        """swap(INODEmap self, INODEmap v)"""
        return _pilot.INODEmap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::allocator_type"""
        return _pilot.INODEmap_get_allocator(self)

    def begin(self):
        """begin(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::iterator"""
        return _pilot.INODEmap_begin(self)

    def end(self):
        """end(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::iterator"""
        return _pilot.INODEmap_end(self)

    def rbegin(self):
        """rbegin(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::reverse_iterator"""
        return _pilot.INODEmap_rbegin(self)

    def rend(self):
        """rend(INODEmap self) -> std::map< std::string,YACS::ENGINE::InlineNode * >::reverse_iterator"""
        return _pilot.INODEmap_rend(self)

    def count(self, *args):
        """count(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::InlineNode * >::size_type"""
        return _pilot.INODEmap_count(self, *args)

    def erase(self, *args):
        """
        erase(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::InlineNode * >::size_type
        erase(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::iterator position)
        erase(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::iterator first, std::map< std::string,YACS::ENGINE::InlineNode * >::iterator last)
        """
        return _pilot.INODEmap_erase(self, *args)

    def find(self, *args):
        """find(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::InlineNode * >::iterator"""
        return _pilot.INODEmap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::InlineNode * >::iterator"""
        return _pilot.INODEmap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(INODEmap self, std::map< std::string,YACS::ENGINE::InlineNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::InlineNode * >::iterator"""
        return _pilot.INODEmap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_INODEmap
    __del__ = lambda self : None;
INODEmap_swigregister = _pilot.INODEmap_swigregister
INODEmap_swigregister(INODEmap)

class SNODEmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::ServiceNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNODEmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SNODEmap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(SNODEmap self) -> pilot_PySwigIterator"""
        return _pilot.SNODEmap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(SNODEmap self) -> bool"""
        return _pilot.SNODEmap___nonzero__(self)

    def __bool__(self):
        """__bool__(SNODEmap self) -> bool"""
        return _pilot.SNODEmap___bool__(self)

    def __len__(self):
        """__len__(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::size_type"""
        return _pilot.SNODEmap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & key) -> ServiceNode"""
        return _pilot.SNODEmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & key)"""
        return _pilot.SNODEmap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & key) -> bool"""
        return _pilot.SNODEmap_has_key(self, *args)

    def keys(self):
        """keys(SNODEmap self) -> PyObject *"""
        return _pilot.SNODEmap_keys(self)

    def values(self):
        """values(SNODEmap self) -> PyObject *"""
        return _pilot.SNODEmap_values(self)

    def items(self):
        """items(SNODEmap self) -> PyObject *"""
        return _pilot.SNODEmap_items(self)

    def __contains__(self, *args):
        """__contains__(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & key) -> bool"""
        return _pilot.SNODEmap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(SNODEmap self) -> pilot_PySwigIterator"""
        return _pilot.SNODEmap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(SNODEmap self) -> pilot_PySwigIterator"""
        return _pilot.SNODEmap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & key)
        __setitem__(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & key, ServiceNode x)
        """
        return _pilot.SNODEmap___setitem__(self, *args)

    def asdict(self):
        """asdict(SNODEmap self) -> PyObject *"""
        return _pilot.SNODEmap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.YACS::ENGINE::ServiceNode)> self, std::less< std::string > const & arg2) -> SNODEmap
        __init__(std::map<(std::string,p.YACS::ENGINE::ServiceNode)> self) -> SNODEmap
        __init__(std::map<(std::string,p.YACS::ENGINE::ServiceNode)> self, SNODEmap arg2) -> SNODEmap
        """
        this = _pilot.new_SNODEmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(SNODEmap self) -> bool"""
        return _pilot.SNODEmap_empty(self)

    def size(self):
        """size(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::size_type"""
        return _pilot.SNODEmap_size(self)

    def clear(self):
        """clear(SNODEmap self)"""
        return _pilot.SNODEmap_clear(self)

    def swap(self, *args):
        """swap(SNODEmap self, SNODEmap v)"""
        return _pilot.SNODEmap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::allocator_type"""
        return _pilot.SNODEmap_get_allocator(self)

    def begin(self):
        """begin(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator"""
        return _pilot.SNODEmap_begin(self)

    def end(self):
        """end(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator"""
        return _pilot.SNODEmap_end(self)

    def rbegin(self):
        """rbegin(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::reverse_iterator"""
        return _pilot.SNODEmap_rbegin(self)

    def rend(self):
        """rend(SNODEmap self) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::reverse_iterator"""
        return _pilot.SNODEmap_rend(self)

    def count(self, *args):
        """count(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::size_type"""
        return _pilot.SNODEmap_count(self, *args)

    def erase(self, *args):
        """
        erase(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::size_type
        erase(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator position)
        erase(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator first, std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator last)
        """
        return _pilot.SNODEmap_erase(self, *args)

    def find(self, *args):
        """find(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator"""
        return _pilot.SNODEmap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator"""
        return _pilot.SNODEmap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(SNODEmap self, std::map< std::string,YACS::ENGINE::ServiceNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ServiceNode * >::iterator"""
        return _pilot.SNODEmap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_SNODEmap
    __del__ = lambda self : None;
SNODEmap_swigregister = _pilot.SNODEmap_swigregister
SNODEmap_swigregister(SNODEmap)

class CONTAINmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::Container)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CONTAINmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CONTAINmap, name)
    __repr__ = _swig_repr
    def __setitem__(self, *args):
        """__setitem__(CONTAINmap self, std::string const & name, Container c)"""
        return _pilot.CONTAINmap___setitem__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CONTAINmap self, std::string name) -> Container"""
        return _pilot.CONTAINmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(CONTAINmap self, std::string name)"""
        return _pilot.CONTAINmap___delitem__(self, *args)

    def keys(self):
        """keys(CONTAINmap self) -> PyObject *"""
        return _pilot.CONTAINmap_keys(self)

    def __init__(self): 
        """__init__(std::map<(std::string,p.YACS::ENGINE::Container)> self) -> CONTAINmap"""
        this = _pilot.new_CONTAINmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_CONTAINmap
    __del__ = lambda self : None;
CONTAINmap_swigregister = _pilot.CONTAINmap_swigregister
CONTAINmap_swigregister(CONTAINmap)

from UserDict import DictMixin
class CONTAINmap(CONTAINmap,DictMixin):pass
CONTAINmap_swigregister(CONTAINmap)

class strvec(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strvec, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(strvec self) -> pilot_PySwigIterator"""
        return _pilot.strvec_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(strvec self) -> bool"""
        return _pilot.strvec___nonzero__(self)

    def __bool__(self):
        """__bool__(strvec self) -> bool"""
        return _pilot.strvec___bool__(self)

    def __len__(self):
        """__len__(strvec self) -> std::vector< std::string >::size_type"""
        return _pilot.strvec___len__(self)

    def pop(self):
        """pop(strvec self) -> std::vector< std::string >::value_type"""
        return _pilot.strvec_pop(self)

    def __getslice__(self, *args):
        """__getslice__(strvec self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> strvec"""
        return _pilot.strvec___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(strvec self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            strvec v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(strvec self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _pilot.strvec___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(strvec self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _pilot.strvec___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(strvec self, std::vector< std::string >::difference_type i)
        __delitem__(strvec self, PySliceObject * slice)
        """
        return _pilot.strvec___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(strvec self, PySliceObject * slice) -> strvec
        __getitem__(strvec self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _pilot.strvec___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(strvec self, PySliceObject * slice, strvec v)
        __setitem__(strvec self, PySliceObject * slice)
        __setitem__(strvec self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _pilot.strvec___setitem__(self, *args)

    def append(self, *args):
        """append(strvec self, std::vector< std::string >::value_type const & x)"""
        return _pilot.strvec_append(self, *args)

    def empty(self):
        """empty(strvec self) -> bool"""
        return _pilot.strvec_empty(self)

    def size(self):
        """size(strvec self) -> std::vector< std::string >::size_type"""
        return _pilot.strvec_size(self)

    def clear(self):
        """clear(strvec self)"""
        return _pilot.strvec_clear(self)

    def swap(self, *args):
        """swap(strvec self, strvec v)"""
        return _pilot.strvec_swap(self, *args)

    def get_allocator(self):
        """get_allocator(strvec self) -> std::vector< std::string >::allocator_type"""
        return _pilot.strvec_get_allocator(self)

    def begin(self):
        """begin(strvec self) -> std::vector< std::string >::iterator"""
        return _pilot.strvec_begin(self)

    def end(self):
        """end(strvec self) -> std::vector< std::string >::iterator"""
        return _pilot.strvec_end(self)

    def rbegin(self):
        """rbegin(strvec self) -> std::vector< std::string >::reverse_iterator"""
        return _pilot.strvec_rbegin(self)

    def rend(self):
        """rend(strvec self) -> std::vector< std::string >::reverse_iterator"""
        return _pilot.strvec_rend(self)

    def pop_back(self):
        """pop_back(strvec self)"""
        return _pilot.strvec_pop_back(self)

    def erase(self, *args):
        """
        erase(strvec self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(strvec self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _pilot.strvec_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> strvec
        __init__(std::vector<(std::string)> self, strvec arg2) -> strvec
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> strvec
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> strvec
        """
        this = _pilot.new_strvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(strvec self, std::vector< std::string >::value_type const & x)"""
        return _pilot.strvec_push_back(self, *args)

    def front(self):
        """front(strvec self) -> std::vector< std::string >::value_type const &"""
        return _pilot.strvec_front(self)

    def back(self):
        """back(strvec self) -> std::vector< std::string >::value_type const &"""
        return _pilot.strvec_back(self)

    def assign(self, *args):
        """assign(strvec self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _pilot.strvec_assign(self, *args)

    def resize(self, *args):
        """
        resize(strvec self, std::vector< std::string >::size_type new_size)
        resize(strvec self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _pilot.strvec_resize(self, *args)

    def insert(self, *args):
        """
        insert(strvec self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(strvec self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _pilot.strvec_insert(self, *args)

    def reserve(self, *args):
        """reserve(strvec self, std::vector< std::string >::size_type n)"""
        return _pilot.strvec_reserve(self, *args)

    def capacity(self):
        """capacity(strvec self) -> std::vector< std::string >::size_type"""
        return _pilot.strvec_capacity(self)

    __swig_destroy__ = _pilot.delete_strvec
    __del__ = lambda self : None;
strvec_swigregister = _pilot.strvec_swigregister
strvec_swigregister(strvec)

class linksvec(_object):
    """Proxy of C++ std::vector<(std::pair<(p.YACS::ENGINE::OutPort,p.YACS::ENGINE::InPort)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, linksvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, linksvec, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(linksvec self) -> pilot_PySwigIterator"""
        return _pilot.linksvec_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(linksvec self) -> bool"""
        return _pilot.linksvec___nonzero__(self)

    def __bool__(self):
        """__bool__(linksvec self) -> bool"""
        return _pilot.linksvec___bool__(self)

    def __len__(self):
        """__len__(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type"""
        return _pilot.linksvec___len__(self)

    def pop(self):
        """pop(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type"""
        return _pilot.linksvec_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type j) -> linksvec
        """
        return _pilot.linksvec___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type j, 
            linksvec v=std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * >,std::allocator< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > > >())
        __setslice__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type j)
        """
        return _pilot.linksvec___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type j)
        """
        return _pilot.linksvec___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i)
        __delitem__(linksvec self, PySliceObject * slice)
        """
        return _pilot.linksvec___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(linksvec self, PySliceObject * slice) -> linksvec
        __getitem__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const &
        """
        return _pilot.linksvec___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(linksvec self, PySliceObject * slice, linksvec v)
        __setitem__(linksvec self, PySliceObject * slice)
        __setitem__(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x)
        """
        return _pilot.linksvec___setitem__(self, *args)

    def append(self, *args):
        """append(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x)"""
        return _pilot.linksvec_append(self, *args)

    def empty(self):
        """empty(linksvec self) -> bool"""
        return _pilot.linksvec_empty(self)

    def size(self):
        """size(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type"""
        return _pilot.linksvec_size(self)

    def clear(self):
        """clear(linksvec self)"""
        return _pilot.linksvec_clear(self)

    def swap(self, *args):
        """swap(linksvec self, linksvec v)"""
        return _pilot.linksvec_swap(self, *args)

    def get_allocator(self):
        """get_allocator(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::allocator_type"""
        return _pilot.linksvec_get_allocator(self)

    def begin(self):
        """begin(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator"""
        return _pilot.linksvec_begin(self)

    def end(self):
        """end(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator"""
        return _pilot.linksvec_end(self)

    def rbegin(self):
        """rbegin(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::reverse_iterator"""
        return _pilot.linksvec_rbegin(self)

    def rend(self):
        """rend(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::reverse_iterator"""
        return _pilot.linksvec_rend(self)

    def pop_back(self):
        """pop_back(linksvec self)"""
        return _pilot.linksvec_pop_back(self)

    def erase(self, *args):
        """
        erase(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator pos) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator
        erase(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator first, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator last) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator
        """
        return _pilot.linksvec_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::OutPort,p.YACS::ENGINE::InPort)>)> self) -> linksvec
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::OutPort,p.YACS::ENGINE::InPort)>)> self, linksvec arg2) -> linksvec
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::OutPort,p.YACS::ENGINE::InPort)>)> self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type size) -> linksvec
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::OutPort,p.YACS::ENGINE::InPort)>)> self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type size, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & value) -> linksvec
        """
        this = _pilot.new_linksvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x)"""
        return _pilot.linksvec_push_back(self, *args)

    def front(self):
        """front(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const &"""
        return _pilot.linksvec_front(self)

    def back(self):
        """back(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const &"""
        return _pilot.linksvec_back(self)

    def assign(self, *args):
        """
        assign(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type n, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x)
        """
        return _pilot.linksvec_assign(self, *args)

    def resize(self, *args):
        """
        resize(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type new_size)
        resize(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type new_size, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x)
        """
        return _pilot.linksvec_resize(self, *args)

    def insert(self, *args):
        """
        insert(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator pos, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator
        insert(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::iterator pos, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type n, 
            std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::value_type const & x)
        """
        return _pilot.linksvec_insert(self, *args)

    def reserve(self, *args):
        """reserve(linksvec self, std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type n)"""
        return _pilot.linksvec_reserve(self, *args)

    def capacity(self):
        """capacity(linksvec self) -> std::vector< std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * > >::size_type"""
        return _pilot.linksvec_capacity(self)

    __swig_destroy__ = _pilot.delete_linksvec
    __del__ = lambda self : None;
linksvec_swigregister = _pilot.linksvec_swigregister
linksvec_swigregister(linksvec)

class linkvec(_object):
    """Proxy of C++ std::vector<(std::pair<(p.YACS::ENGINE::InPort,p.YACS::ENGINE::OutPort)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, linkvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, linkvec, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(linkvec self) -> pilot_PySwigIterator"""
        return _pilot.linkvec_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(linkvec self) -> bool"""
        return _pilot.linkvec___nonzero__(self)

    def __bool__(self):
        """__bool__(linkvec self) -> bool"""
        return _pilot.linkvec___bool__(self)

    def __len__(self):
        """__len__(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type"""
        return _pilot.linkvec___len__(self)

    def pop(self):
        """pop(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type"""
        return _pilot.linkvec_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type j) -> linkvec
        """
        return _pilot.linkvec___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type j, 
            linkvec v=std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * >,std::allocator< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > > >())
        __setslice__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type j)
        """
        return _pilot.linkvec___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type j)
        """
        return _pilot.linkvec___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i)
        __delitem__(linkvec self, PySliceObject * slice)
        """
        return _pilot.linkvec___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(linkvec self, PySliceObject * slice) -> linkvec
        __getitem__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const &
        """
        return _pilot.linkvec___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(linkvec self, PySliceObject * slice, linkvec v)
        __setitem__(linkvec self, PySliceObject * slice)
        __setitem__(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::difference_type i, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x)
        """
        return _pilot.linkvec___setitem__(self, *args)

    def append(self, *args):
        """append(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x)"""
        return _pilot.linkvec_append(self, *args)

    def empty(self):
        """empty(linkvec self) -> bool"""
        return _pilot.linkvec_empty(self)

    def size(self):
        """size(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type"""
        return _pilot.linkvec_size(self)

    def clear(self):
        """clear(linkvec self)"""
        return _pilot.linkvec_clear(self)

    def swap(self, *args):
        """swap(linkvec self, linkvec v)"""
        return _pilot.linkvec_swap(self, *args)

    def get_allocator(self):
        """get_allocator(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::allocator_type"""
        return _pilot.linkvec_get_allocator(self)

    def begin(self):
        """begin(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator"""
        return _pilot.linkvec_begin(self)

    def end(self):
        """end(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator"""
        return _pilot.linkvec_end(self)

    def rbegin(self):
        """rbegin(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::reverse_iterator"""
        return _pilot.linkvec_rbegin(self)

    def rend(self):
        """rend(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::reverse_iterator"""
        return _pilot.linkvec_rend(self)

    def pop_back(self):
        """pop_back(linkvec self)"""
        return _pilot.linkvec_pop_back(self)

    def erase(self, *args):
        """
        erase(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator pos) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator
        erase(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator first, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator last) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator
        """
        return _pilot.linkvec_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::InPort,p.YACS::ENGINE::OutPort)>)> self) -> linkvec
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::InPort,p.YACS::ENGINE::OutPort)>)> self, linkvec arg2) -> linkvec
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::InPort,p.YACS::ENGINE::OutPort)>)> self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type size) -> linkvec
        __init__(std::vector<(std::pair<(p.YACS::ENGINE::InPort,p.YACS::ENGINE::OutPort)>)> self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type size, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & value) -> linkvec
        """
        this = _pilot.new_linkvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x)"""
        return _pilot.linkvec_push_back(self, *args)

    def front(self):
        """front(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const &"""
        return _pilot.linkvec_front(self)

    def back(self):
        """back(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const &"""
        return _pilot.linkvec_back(self)

    def assign(self, *args):
        """
        assign(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type n, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x)
        """
        return _pilot.linkvec_assign(self, *args)

    def resize(self, *args):
        """
        resize(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type new_size)
        resize(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type new_size, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x)
        """
        return _pilot.linkvec_resize(self, *args)

    def insert(self, *args):
        """
        insert(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator pos, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator
        insert(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::iterator pos, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type n, 
            std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::value_type const & x)
        """
        return _pilot.linkvec_insert(self, *args)

    def reserve(self, *args):
        """reserve(linkvec self, std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type n)"""
        return _pilot.linkvec_reserve(self, *args)

    def capacity(self):
        """capacity(linkvec self) -> std::vector< std::pair< YACS::ENGINE::InPort *,YACS::ENGINE::OutPort * > >::size_type"""
        return _pilot.linkvec_capacity(self)

    __swig_destroy__ = _pilot.delete_linkvec
    __del__ = lambda self : None;
linkvec_swigregister = _pilot.linkvec_swigregister
linkvec_swigregister(linkvec)

class instreamlist(_object):
    """Proxy of C++ std::list<(p.YACS::ENGINE::InputDataStreamPort)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, instreamlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, instreamlist, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(instreamlist self) -> pilot_PySwigIterator"""
        return _pilot.instreamlist_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(instreamlist self) -> bool"""
        return _pilot.instreamlist___nonzero__(self)

    def __bool__(self):
        """__bool__(instreamlist self) -> bool"""
        return _pilot.instreamlist___bool__(self)

    def __len__(self):
        """__len__(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::size_type"""
        return _pilot.instreamlist___len__(self)

    def pop(self):
        """pop(instreamlist self) -> InputDataStreamPort"""
        return _pilot.instreamlist_pop(self)

    def __getslice__(self, *args):
        """__getslice__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type j) -> instreamlist"""
        return _pilot.instreamlist___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type j, 
            instreamlist v=std::list< YACS::ENGINE::InputDataStreamPort *,std::allocator< YACS::ENGINE::InputDataStreamPort * > >())
        __setslice__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type j)
        """
        return _pilot.instreamlist___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type j)"""
        return _pilot.instreamlist___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i)
        __delitem__(instreamlist self, PySliceObject * slice)
        """
        return _pilot.instreamlist___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(instreamlist self, PySliceObject * slice) -> instreamlist
        __getitem__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i) -> InputDataStreamPort
        """
        return _pilot.instreamlist___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(instreamlist self, PySliceObject * slice, instreamlist v)
        __setitem__(instreamlist self, PySliceObject * slice)
        __setitem__(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::difference_type i, InputDataStreamPort x)
        """
        return _pilot.instreamlist___setitem__(self, *args)

    def append(self, *args):
        """append(instreamlist self, InputDataStreamPort x)"""
        return _pilot.instreamlist_append(self, *args)

    def empty(self):
        """empty(instreamlist self) -> bool"""
        return _pilot.instreamlist_empty(self)

    def size(self):
        """size(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::size_type"""
        return _pilot.instreamlist_size(self)

    def clear(self):
        """clear(instreamlist self)"""
        return _pilot.instreamlist_clear(self)

    def swap(self, *args):
        """swap(instreamlist self, instreamlist v)"""
        return _pilot.instreamlist_swap(self, *args)

    def get_allocator(self):
        """get_allocator(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::allocator_type"""
        return _pilot.instreamlist_get_allocator(self)

    def begin(self):
        """begin(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::iterator"""
        return _pilot.instreamlist_begin(self)

    def end(self):
        """end(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::iterator"""
        return _pilot.instreamlist_end(self)

    def rbegin(self):
        """rbegin(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::reverse_iterator"""
        return _pilot.instreamlist_rbegin(self)

    def rend(self):
        """rend(instreamlist self) -> std::list< YACS::ENGINE::InputDataStreamPort * >::reverse_iterator"""
        return _pilot.instreamlist_rend(self)

    def pop_back(self):
        """pop_back(instreamlist self)"""
        return _pilot.instreamlist_pop_back(self)

    def erase(self, *args):
        """
        erase(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::iterator pos) -> std::list< YACS::ENGINE::InputDataStreamPort * >::iterator
        erase(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::iterator first, std::list< YACS::ENGINE::InputDataStreamPort * >::iterator last) -> std::list< YACS::ENGINE::InputDataStreamPort * >::iterator
        """
        return _pilot.instreamlist_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.YACS::ENGINE::InputDataStreamPort)> self) -> instreamlist
        __init__(std::list<(p.YACS::ENGINE::InputDataStreamPort)> self, instreamlist arg2) -> instreamlist
        __init__(std::list<(p.YACS::ENGINE::InputDataStreamPort)> self, std::list< YACS::ENGINE::InputDataStreamPort * >::size_type size) -> instreamlist
        __init__(std::list<(p.YACS::ENGINE::InputDataStreamPort)> self, std::list< YACS::ENGINE::InputDataStreamPort * >::size_type size, InputDataStreamPort value) -> instreamlist
        """
        this = _pilot.new_instreamlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(instreamlist self, InputDataStreamPort x)"""
        return _pilot.instreamlist_push_back(self, *args)

    def front(self):
        """front(instreamlist self) -> InputDataStreamPort"""
        return _pilot.instreamlist_front(self)

    def back(self):
        """back(instreamlist self) -> InputDataStreamPort"""
        return _pilot.instreamlist_back(self)

    def assign(self, *args):
        """assign(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::size_type n, InputDataStreamPort x)"""
        return _pilot.instreamlist_assign(self, *args)

    def resize(self, *args):
        """
        resize(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::size_type new_size)
        resize(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::size_type new_size, InputDataStreamPort x)
        """
        return _pilot.instreamlist_resize(self, *args)

    def insert(self, *args):
        """
        insert(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::iterator pos, InputDataStreamPort x) -> std::list< YACS::ENGINE::InputDataStreamPort * >::iterator
        insert(instreamlist self, std::list< YACS::ENGINE::InputDataStreamPort * >::iterator pos, std::list< YACS::ENGINE::InputDataStreamPort * >::size_type n, 
            InputDataStreamPort x)
        """
        return _pilot.instreamlist_insert(self, *args)

    def pop_front(self):
        """pop_front(instreamlist self)"""
        return _pilot.instreamlist_pop_front(self)

    def push_front(self, *args):
        """push_front(instreamlist self, InputDataStreamPort x)"""
        return _pilot.instreamlist_push_front(self, *args)

    def remove(self, *args):
        """remove(instreamlist self, InputDataStreamPort x)"""
        return _pilot.instreamlist_remove(self, *args)

    def unique(self):
        """unique(instreamlist self)"""
        return _pilot.instreamlist_unique(self)

    def reverse(self):
        """reverse(instreamlist self)"""
        return _pilot.instreamlist_reverse(self)

    def sort(self):
        """sort(instreamlist self)"""
        return _pilot.instreamlist_sort(self)

    def merge(self, *args):
        """merge(instreamlist self, instreamlist x)"""
        return _pilot.instreamlist_merge(self, *args)

    __swig_destroy__ = _pilot.delete_instreamlist
    __del__ = lambda self : None;
instreamlist_swigregister = _pilot.instreamlist_swigregister
instreamlist_swigregister(instreamlist)

class outstreamlist(_object):
    """Proxy of C++ std::list<(p.YACS::ENGINE::OutputDataStreamPort)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, outstreamlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, outstreamlist, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(outstreamlist self) -> pilot_PySwigIterator"""
        return _pilot.outstreamlist_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(outstreamlist self) -> bool"""
        return _pilot.outstreamlist___nonzero__(self)

    def __bool__(self):
        """__bool__(outstreamlist self) -> bool"""
        return _pilot.outstreamlist___bool__(self)

    def __len__(self):
        """__len__(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type"""
        return _pilot.outstreamlist___len__(self)

    def pop(self):
        """pop(outstreamlist self) -> OutputDataStreamPort"""
        return _pilot.outstreamlist_pop(self)

    def __getslice__(self, *args):
        """__getslice__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type j) -> outstreamlist"""
        return _pilot.outstreamlist___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type j, 
            outstreamlist v=std::list< YACS::ENGINE::OutputDataStreamPort *,std::allocator< YACS::ENGINE::OutputDataStreamPort * > >())
        __setslice__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type j)
        """
        return _pilot.outstreamlist___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type j)"""
        return _pilot.outstreamlist___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i)
        __delitem__(outstreamlist self, PySliceObject * slice)
        """
        return _pilot.outstreamlist___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(outstreamlist self, PySliceObject * slice) -> outstreamlist
        __getitem__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i) -> OutputDataStreamPort
        """
        return _pilot.outstreamlist___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(outstreamlist self, PySliceObject * slice, outstreamlist v)
        __setitem__(outstreamlist self, PySliceObject * slice)
        __setitem__(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::difference_type i, OutputDataStreamPort x)
        """
        return _pilot.outstreamlist___setitem__(self, *args)

    def append(self, *args):
        """append(outstreamlist self, OutputDataStreamPort x)"""
        return _pilot.outstreamlist_append(self, *args)

    def empty(self):
        """empty(outstreamlist self) -> bool"""
        return _pilot.outstreamlist_empty(self)

    def size(self):
        """size(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type"""
        return _pilot.outstreamlist_size(self)

    def clear(self):
        """clear(outstreamlist self)"""
        return _pilot.outstreamlist_clear(self)

    def swap(self, *args):
        """swap(outstreamlist self, outstreamlist v)"""
        return _pilot.outstreamlist_swap(self, *args)

    def get_allocator(self):
        """get_allocator(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::allocator_type"""
        return _pilot.outstreamlist_get_allocator(self)

    def begin(self):
        """begin(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator"""
        return _pilot.outstreamlist_begin(self)

    def end(self):
        """end(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator"""
        return _pilot.outstreamlist_end(self)

    def rbegin(self):
        """rbegin(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::reverse_iterator"""
        return _pilot.outstreamlist_rbegin(self)

    def rend(self):
        """rend(outstreamlist self) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::reverse_iterator"""
        return _pilot.outstreamlist_rend(self)

    def pop_back(self):
        """pop_back(outstreamlist self)"""
        return _pilot.outstreamlist_pop_back(self)

    def erase(self, *args):
        """
        erase(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator pos) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator
        erase(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator first, std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator last) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator
        """
        return _pilot.outstreamlist_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.YACS::ENGINE::OutputDataStreamPort)> self) -> outstreamlist
        __init__(std::list<(p.YACS::ENGINE::OutputDataStreamPort)> self, outstreamlist arg2) -> outstreamlist
        __init__(std::list<(p.YACS::ENGINE::OutputDataStreamPort)> self, std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type size) -> outstreamlist
        __init__(std::list<(p.YACS::ENGINE::OutputDataStreamPort)> self, std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type size, OutputDataStreamPort value) -> outstreamlist
        """
        this = _pilot.new_outstreamlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(outstreamlist self, OutputDataStreamPort x)"""
        return _pilot.outstreamlist_push_back(self, *args)

    def front(self):
        """front(outstreamlist self) -> OutputDataStreamPort"""
        return _pilot.outstreamlist_front(self)

    def back(self):
        """back(outstreamlist self) -> OutputDataStreamPort"""
        return _pilot.outstreamlist_back(self)

    def assign(self, *args):
        """assign(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type n, OutputDataStreamPort x)"""
        return _pilot.outstreamlist_assign(self, *args)

    def resize(self, *args):
        """
        resize(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type new_size)
        resize(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type new_size, OutputDataStreamPort x)
        """
        return _pilot.outstreamlist_resize(self, *args)

    def insert(self, *args):
        """
        insert(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator pos, OutputDataStreamPort x) -> std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator
        insert(outstreamlist self, std::list< YACS::ENGINE::OutputDataStreamPort * >::iterator pos, std::list< YACS::ENGINE::OutputDataStreamPort * >::size_type n, 
            OutputDataStreamPort x)
        """
        return _pilot.outstreamlist_insert(self, *args)

    def pop_front(self):
        """pop_front(outstreamlist self)"""
        return _pilot.outstreamlist_pop_front(self)

    def push_front(self, *args):
        """push_front(outstreamlist self, OutputDataStreamPort x)"""
        return _pilot.outstreamlist_push_front(self, *args)

    def remove(self, *args):
        """remove(outstreamlist self, OutputDataStreamPort x)"""
        return _pilot.outstreamlist_remove(self, *args)

    def unique(self):
        """unique(outstreamlist self)"""
        return _pilot.outstreamlist_unique(self)

    def reverse(self):
        """reverse(outstreamlist self)"""
        return _pilot.outstreamlist_reverse(self)

    def sort(self):
        """sort(outstreamlist self)"""
        return _pilot.outstreamlist_sort(self)

    def merge(self, *args):
        """merge(outstreamlist self, outstreamlist x)"""
        return _pilot.outstreamlist_merge(self, *args)

    __swig_destroy__ = _pilot.delete_outstreamlist
    __del__ = lambda self : None;
outstreamlist_swigregister = _pilot.outstreamlist_swigregister
outstreamlist_swigregister(outstreamlist)

class loadermap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::CatalogLoader)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, loadermap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, loadermap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(loadermap self) -> pilot_PySwigIterator"""
        return _pilot.loadermap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(loadermap self) -> bool"""
        return _pilot.loadermap___nonzero__(self)

    def __bool__(self):
        """__bool__(loadermap self) -> bool"""
        return _pilot.loadermap___bool__(self)

    def __len__(self):
        """__len__(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::size_type"""
        return _pilot.loadermap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & key) -> CatalogLoader"""
        return _pilot.loadermap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & key)"""
        return _pilot.loadermap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & key) -> bool"""
        return _pilot.loadermap_has_key(self, *args)

    def keys(self):
        """keys(loadermap self) -> PyObject *"""
        return _pilot.loadermap_keys(self)

    def values(self):
        """values(loadermap self) -> PyObject *"""
        return _pilot.loadermap_values(self)

    def items(self):
        """items(loadermap self) -> PyObject *"""
        return _pilot.loadermap_items(self)

    def __contains__(self, *args):
        """__contains__(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & key) -> bool"""
        return _pilot.loadermap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(loadermap self) -> pilot_PySwigIterator"""
        return _pilot.loadermap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(loadermap self) -> pilot_PySwigIterator"""
        return _pilot.loadermap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & key)
        __setitem__(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & key, CatalogLoader x)
        """
        return _pilot.loadermap___setitem__(self, *args)

    def asdict(self):
        """asdict(loadermap self) -> PyObject *"""
        return _pilot.loadermap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.YACS::ENGINE::CatalogLoader)> self, std::less< std::string > const & arg2) -> loadermap
        __init__(std::map<(std::string,p.YACS::ENGINE::CatalogLoader)> self) -> loadermap
        __init__(std::map<(std::string,p.YACS::ENGINE::CatalogLoader)> self, loadermap arg2) -> loadermap
        """
        this = _pilot.new_loadermap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(loadermap self) -> bool"""
        return _pilot.loadermap_empty(self)

    def size(self):
        """size(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::size_type"""
        return _pilot.loadermap_size(self)

    def clear(self):
        """clear(loadermap self)"""
        return _pilot.loadermap_clear(self)

    def swap(self, *args):
        """swap(loadermap self, loadermap v)"""
        return _pilot.loadermap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::allocator_type"""
        return _pilot.loadermap_get_allocator(self)

    def begin(self):
        """begin(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator"""
        return _pilot.loadermap_begin(self)

    def end(self):
        """end(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator"""
        return _pilot.loadermap_end(self)

    def rbegin(self):
        """rbegin(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::reverse_iterator"""
        return _pilot.loadermap_rbegin(self)

    def rend(self):
        """rend(loadermap self) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::reverse_iterator"""
        return _pilot.loadermap_rend(self)

    def count(self, *args):
        """count(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::size_type"""
        return _pilot.loadermap_count(self, *args)

    def erase(self, *args):
        """
        erase(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::size_type
        erase(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator position)
        erase(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator first, std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator last)
        """
        return _pilot.loadermap_erase(self, *args)

    def find(self, *args):
        """find(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator"""
        return _pilot.loadermap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator"""
        return _pilot.loadermap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(loadermap self, std::map< std::string,YACS::ENGINE::CatalogLoader * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::CatalogLoader * >::iterator"""
        return _pilot.loadermap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_loadermap
    __del__ = lambda self : None;
loadermap_swigregister = _pilot.loadermap_swigregister
loadermap_swigregister(loadermap)

class composedmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::ComposedNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, composedmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, composedmap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(composedmap self) -> pilot_PySwigIterator"""
        return _pilot.composedmap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(composedmap self) -> bool"""
        return _pilot.composedmap___nonzero__(self)

    def __bool__(self):
        """__bool__(composedmap self) -> bool"""
        return _pilot.composedmap___bool__(self)

    def __len__(self):
        """__len__(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::size_type"""
        return _pilot.composedmap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & key) -> ComposedNode"""
        return _pilot.composedmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & key)"""
        return _pilot.composedmap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & key) -> bool"""
        return _pilot.composedmap_has_key(self, *args)

    def keys(self):
        """keys(composedmap self) -> PyObject *"""
        return _pilot.composedmap_keys(self)

    def values(self):
        """values(composedmap self) -> PyObject *"""
        return _pilot.composedmap_values(self)

    def items(self):
        """items(composedmap self) -> PyObject *"""
        return _pilot.composedmap_items(self)

    def __contains__(self, *args):
        """__contains__(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & key) -> bool"""
        return _pilot.composedmap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(composedmap self) -> pilot_PySwigIterator"""
        return _pilot.composedmap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(composedmap self) -> pilot_PySwigIterator"""
        return _pilot.composedmap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & key)
        __setitem__(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & key, ComposedNode x)
        """
        return _pilot.composedmap___setitem__(self, *args)

    def asdict(self):
        """asdict(composedmap self) -> PyObject *"""
        return _pilot.composedmap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.YACS::ENGINE::ComposedNode)> self, std::less< std::string > const & arg2) -> composedmap
        __init__(std::map<(std::string,p.YACS::ENGINE::ComposedNode)> self) -> composedmap
        __init__(std::map<(std::string,p.YACS::ENGINE::ComposedNode)> self, composedmap arg2) -> composedmap
        """
        this = _pilot.new_composedmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(composedmap self) -> bool"""
        return _pilot.composedmap_empty(self)

    def size(self):
        """size(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::size_type"""
        return _pilot.composedmap_size(self)

    def clear(self):
        """clear(composedmap self)"""
        return _pilot.composedmap_clear(self)

    def swap(self, *args):
        """swap(composedmap self, composedmap v)"""
        return _pilot.composedmap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::allocator_type"""
        return _pilot.composedmap_get_allocator(self)

    def begin(self):
        """begin(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator"""
        return _pilot.composedmap_begin(self)

    def end(self):
        """end(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator"""
        return _pilot.composedmap_end(self)

    def rbegin(self):
        """rbegin(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::reverse_iterator"""
        return _pilot.composedmap_rbegin(self)

    def rend(self):
        """rend(composedmap self) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::reverse_iterator"""
        return _pilot.composedmap_rend(self)

    def count(self, *args):
        """count(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::size_type"""
        return _pilot.composedmap_count(self, *args)

    def erase(self, *args):
        """
        erase(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::size_type
        erase(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator position)
        erase(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator first, std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator last)
        """
        return _pilot.composedmap_erase(self, *args)

    def find(self, *args):
        """find(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator"""
        return _pilot.composedmap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator"""
        return _pilot.composedmap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(composedmap self, std::map< std::string,YACS::ENGINE::ComposedNode * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComposedNode * >::iterator"""
        return _pilot.composedmap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_composedmap
    __del__ = lambda self : None;
composedmap_swigregister = _pilot.composedmap_swigregister
composedmap_swigregister(composedmap)

class compomap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::ComponentDefinition)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compomap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compomap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(compomap self) -> pilot_PySwigIterator"""
        return _pilot.compomap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(compomap self) -> bool"""
        return _pilot.compomap___nonzero__(self)

    def __bool__(self):
        """__bool__(compomap self) -> bool"""
        return _pilot.compomap___bool__(self)

    def __len__(self):
        """__len__(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::size_type"""
        return _pilot.compomap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & key) -> ComponentDefinition"""
        return _pilot.compomap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & key)"""
        return _pilot.compomap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & key) -> bool"""
        return _pilot.compomap_has_key(self, *args)

    def keys(self):
        """keys(compomap self) -> PyObject *"""
        return _pilot.compomap_keys(self)

    def values(self):
        """values(compomap self) -> PyObject *"""
        return _pilot.compomap_values(self)

    def items(self):
        """items(compomap self) -> PyObject *"""
        return _pilot.compomap_items(self)

    def __contains__(self, *args):
        """__contains__(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & key) -> bool"""
        return _pilot.compomap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(compomap self) -> pilot_PySwigIterator"""
        return _pilot.compomap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(compomap self) -> pilot_PySwigIterator"""
        return _pilot.compomap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & key)
        __setitem__(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & key, 
            ComponentDefinition x)
        """
        return _pilot.compomap___setitem__(self, *args)

    def asdict(self):
        """asdict(compomap self) -> PyObject *"""
        return _pilot.compomap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.YACS::ENGINE::ComponentDefinition)> self, std::less< std::string > const & arg2) -> compomap
        __init__(std::map<(std::string,p.YACS::ENGINE::ComponentDefinition)> self) -> compomap
        __init__(std::map<(std::string,p.YACS::ENGINE::ComponentDefinition)> self, compomap arg2) -> compomap
        """
        this = _pilot.new_compomap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(compomap self) -> bool"""
        return _pilot.compomap_empty(self)

    def size(self):
        """size(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::size_type"""
        return _pilot.compomap_size(self)

    def clear(self):
        """clear(compomap self)"""
        return _pilot.compomap_clear(self)

    def swap(self, *args):
        """swap(compomap self, compomap v)"""
        return _pilot.compomap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::allocator_type"""
        return _pilot.compomap_get_allocator(self)

    def begin(self):
        """begin(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator"""
        return _pilot.compomap_begin(self)

    def end(self):
        """end(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator"""
        return _pilot.compomap_end(self)

    def rbegin(self):
        """rbegin(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::reverse_iterator"""
        return _pilot.compomap_rbegin(self)

    def rend(self):
        """rend(compomap self) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::reverse_iterator"""
        return _pilot.compomap_rend(self)

    def count(self, *args):
        """count(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::size_type"""
        return _pilot.compomap_count(self, *args)

    def erase(self, *args):
        """
        erase(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::size_type
        erase(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator position)
        erase(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator first, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator last)
        """
        return _pilot.compomap_erase(self, *args)

    def find(self, *args):
        """find(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator"""
        return _pilot.compomap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator"""
        return _pilot.compomap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(compomap self, std::map< std::string,YACS::ENGINE::ComponentDefinition * >::key_type const & x) -> std::map< std::string,YACS::ENGINE::ComponentDefinition * >::iterator"""
        return _pilot.compomap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_compomap
    __del__ = lambda self : None;
compomap_swigregister = _pilot.compomap_swigregister
compomap_swigregister(compomap)

class propmap(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, propmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, propmap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(propmap self) -> pilot_PySwigIterator"""
        return _pilot.propmap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(propmap self) -> bool"""
        return _pilot.propmap___nonzero__(self)

    def __bool__(self):
        """__bool__(propmap self) -> bool"""
        return _pilot.propmap___bool__(self)

    def __len__(self):
        """__len__(propmap self) -> std::map< std::string,std::string >::size_type"""
        return _pilot.propmap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(propmap self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &"""
        return _pilot.propmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(propmap self, std::map< std::string,std::string >::key_type const & key)"""
        return _pilot.propmap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(propmap self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _pilot.propmap_has_key(self, *args)

    def keys(self):
        """keys(propmap self) -> PyObject *"""
        return _pilot.propmap_keys(self)

    def values(self):
        """values(propmap self) -> PyObject *"""
        return _pilot.propmap_values(self)

    def items(self):
        """items(propmap self) -> PyObject *"""
        return _pilot.propmap_items(self)

    def __contains__(self, *args):
        """__contains__(propmap self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _pilot.propmap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(propmap self) -> pilot_PySwigIterator"""
        return _pilot.propmap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(propmap self) -> pilot_PySwigIterator"""
        return _pilot.propmap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(propmap self, std::map< std::string,std::string >::key_type const & key)
        __setitem__(propmap self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)
        """
        return _pilot.propmap___setitem__(self, *args)

    def asdict(self):
        """asdict(propmap self) -> PyObject *"""
        return _pilot.propmap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> propmap
        __init__(std::map<(std::string,std::string)> self) -> propmap
        __init__(std::map<(std::string,std::string)> self, propmap arg2) -> propmap
        """
        this = _pilot.new_propmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(propmap self) -> bool"""
        return _pilot.propmap_empty(self)

    def size(self):
        """size(propmap self) -> std::map< std::string,std::string >::size_type"""
        return _pilot.propmap_size(self)

    def clear(self):
        """clear(propmap self)"""
        return _pilot.propmap_clear(self)

    def swap(self, *args):
        """swap(propmap self, propmap v)"""
        return _pilot.propmap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(propmap self) -> std::map< std::string,std::string >::allocator_type"""
        return _pilot.propmap_get_allocator(self)

    def begin(self):
        """begin(propmap self) -> std::map< std::string,std::string >::iterator"""
        return _pilot.propmap_begin(self)

    def end(self):
        """end(propmap self) -> std::map< std::string,std::string >::iterator"""
        return _pilot.propmap_end(self)

    def rbegin(self):
        """rbegin(propmap self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _pilot.propmap_rbegin(self)

    def rend(self):
        """rend(propmap self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _pilot.propmap_rend(self)

    def count(self, *args):
        """count(propmap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type"""
        return _pilot.propmap_count(self, *args)

    def erase(self, *args):
        """
        erase(propmap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type
        erase(propmap self, std::map< std::string,std::string >::iterator position)
        erase(propmap self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)
        """
        return _pilot.propmap_erase(self, *args)

    def find(self, *args):
        """find(propmap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _pilot.propmap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(propmap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _pilot.propmap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(propmap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _pilot.propmap_upper_bound(self, *args)

    __swig_destroy__ = _pilot.delete_propmap
    __del__ = lambda self : None;
propmap_swigregister = _pilot.propmap_swigregister
propmap_swigregister(propmap)

class CompoInstmap(_object):
    """Proxy of C++ std::map<(std::string,p.YACS::ENGINE::ComponentInstance)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoInstmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompoInstmap, name)
    __repr__ = _swig_repr
    def __setitem__(self, *args):
        """__setitem__(CompoInstmap self, std::string const & name, ComponentInstance c)"""
        return _pilot.CompoInstmap___setitem__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CompoInstmap self, std::string name) -> ComponentInstance"""
        return _pilot.CompoInstmap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(CompoInstmap self, std::string name)"""
        return _pilot.CompoInstmap___delitem__(self, *args)

    def keys(self):
        """keys(CompoInstmap self) -> PyObject *"""
        return _pilot.CompoInstmap_keys(self)

    def __init__(self): 
        """__init__(std::map<(std::string,p.YACS::ENGINE::ComponentInstance)> self) -> CompoInstmap"""
        this = _pilot.new_CompoInstmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_CompoInstmap
    __del__ = lambda self : None;
CompoInstmap_swigregister = _pilot.CompoInstmap_swigregister
CompoInstmap_swigregister(CompoInstmap)

from UserDict import DictMixin
class CompoInstmap(CompoInstmap,DictMixin):pass
CompoInstmap_swigregister(CompoInstmap)

White = _pilot.White
Grey = _pilot.Grey
Black = _pilot.Black
UNDEFINED = _pilot.UNDEFINED
INVALID = _pilot.INVALID
READY = _pilot.READY
TOLOAD = _pilot.TOLOAD
LOADED = _pilot.LOADED
TOACTIVATE = _pilot.TOACTIVATE
ACTIVATED = _pilot.ACTIVATED
DESACTIVATED = _pilot.DESACTIVATED
DONE = _pilot.DONE
SUSPENDED = _pilot.SUSPENDED
LOADFAILED = _pilot.LOADFAILED
EXECFAILED = _pilot.EXECFAILED
PAUSE = _pilot.PAUSE
TORECONNECT = _pilot.TORECONNECT
INTERNALERR = _pilot.INTERNALERR
DISABLED = _pilot.DISABLED
FAILED = _pilot.FAILED
ERROR = _pilot.ERROR
NOEVENT = _pilot.NOEVENT
START = _pilot.START
FINISH = _pilot.FINISH
ABORT = _pilot.ABORT
NOTYETINITIALIZED = _pilot.NOTYETINITIALIZED
INITIALISED = _pilot.INITIALISED
RUNNING = _pilot.RUNNING
WAITINGTASKS = _pilot.WAITINGTASKS
PAUSED = _pilot.PAUSED
FINISHED = _pilot.FINISHED
STOPPED = _pilot.STOPPED
CONTINUE = _pilot.CONTINUE
STEPBYSTEP = _pilot.STEPBYSTEP
STOPBEFORENODES = _pilot.STOPBEFORENODES
class Exception(_object):
    """Proxy of C++ YACS::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::Exception self, std::string const & what, int errNumber=0) -> Exception
        __init__(YACS::Exception self, std::string const & what) -> Exception
        """
        this = _pilot.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    def what(self):
        """what(Exception self) -> char const *"""
        return _pilot.Exception_what(self)

    __swig_destroy__ = _pilot.delete_Exception
    __del__ = lambda self : None;
    __swig_setmethods__["errNumber"] = _pilot.Exception_errNumber_set
    __swig_getmethods__["errNumber"] = _pilot.Exception_errNumber_get
    if _newclass:errNumber = _swig_property(_pilot.Exception_errNumber_get, _pilot.Exception_errNumber_set)
Exception_swigregister = _pilot.Exception_swigregister
Exception_swigregister(Exception)

class ConversionException(Exception):
    """Proxy of C++ YACS::ENGINE::ConversionException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::ConversionException self, std::string const & what, bool prefix=True) -> ConversionException
        __init__(YACS::ENGINE::ConversionException self, std::string const & what) -> ConversionException
        """
        this = _pilot.new_ConversionException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_ConversionException
    __del__ = lambda self : None;
ConversionException_swigregister = _pilot.ConversionException_swigregister
ConversionException_swigregister(ConversionException)


def getRuntime():
  """getRuntime() -> Runtime"""
  return _pilot.getRuntime()
class Runtime(_object):
    """Proxy of C++ YACS::ENGINE::Runtime class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Runtime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Runtime, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def init(self):
        """init(Runtime self)"""
        return _pilot.Runtime_init(self)

    def fini(self):
        """fini(Runtime self)"""
        return _pilot.Runtime_fini(self)

    def loadCatalog(self, *args):
        """loadCatalog(Runtime self, std::string const & sourceKind, std::string const & path) -> Catalog"""
        return _pilot.Runtime_loadCatalog(self, *args)

    def createFuncNode(self, *args):
        """createFuncNode(Runtime self, std::string const & kind, std::string const & name) -> InlineFuncNode"""
        return _pilot.Runtime_createFuncNode(self, *args)

    def createScriptNode(self, *args):
        """createScriptNode(Runtime self, std::string const & kind, std::string const & name) -> InlineNode"""
        return _pilot.Runtime_createScriptNode(self, *args)

    def createRefNode(self, *args):
        """createRefNode(Runtime self, std::string const & kind, std::string const & name) -> ServiceNode"""
        return _pilot.Runtime_createRefNode(self, *args)

    def createCompoNode(self, *args):
        """createCompoNode(Runtime self, std::string const & kind, std::string const & name) -> ServiceNode"""
        return _pilot.Runtime_createCompoNode(self, *args)

    def createSInlineNode(self, *args):
        """createSInlineNode(Runtime self, std::string const & kind, std::string const & name) -> ServiceInlineNode"""
        return _pilot.Runtime_createSInlineNode(self, *args)

    def createInDataNode(self, *args):
        """createInDataNode(Runtime self, std::string const & kind, std::string const & name) -> DataNode"""
        return _pilot.Runtime_createInDataNode(self, *args)

    def createOutDataNode(self, *args):
        """createOutDataNode(Runtime self, std::string const & kind, std::string const & name) -> DataNode"""
        return _pilot.Runtime_createOutDataNode(self, *args)

    def createComponentInstance(self, *args):
        """
        createComponentInstance(Runtime self, std::string const & name, std::string const & kind="") -> ComponentInstance
        createComponentInstance(Runtime self, std::string const & name) -> ComponentInstance
        """
        return _pilot.Runtime_createComponentInstance(self, *args)

    def createContainer(self, kind=""):
        """
        createContainer(Runtime self, std::string const & kind="") -> Container
        createContainer(Runtime self) -> Container
        """
        return _pilot.Runtime_createContainer(self, kind)

    def createProc(self, *args):
        """createProc(Runtime self, std::string const & name) -> Proc"""
        return _pilot.Runtime_createProc(self, *args)

    def createBloc(self, *args):
        """createBloc(Runtime self, std::string const & name) -> Bloc"""
        return _pilot.Runtime_createBloc(self, *args)

    def createWhileLoop(self, *args):
        """createWhileLoop(Runtime self, std::string const & name) -> WhileLoop"""
        return _pilot.Runtime_createWhileLoop(self, *args)

    def createForLoop(self, *args):
        """createForLoop(Runtime self, std::string const & name) -> ForLoop"""
        return _pilot.Runtime_createForLoop(self, *args)

    def createForEachLoop(self, *args):
        """createForEachLoop(Runtime self, std::string const & name, TypeCode type) -> ForEachLoop"""
        return _pilot.Runtime_createForEachLoop(self, *args)

    def createOptimizerLoop(self, *args):
        """
        createOptimizerLoop(Runtime self, std::string const & name, std::string const & algLib, std::string const & factoryName, 
            bool algInitOnFile, std::string const & kind="", Proc procForTypes=None) -> OptimizerLoop
        createOptimizerLoop(Runtime self, std::string const & name, std::string const & algLib, std::string const & factoryName, 
            bool algInitOnFile, std::string const & kind="") -> OptimizerLoop
        createOptimizerLoop(Runtime self, std::string const & name, std::string const & algLib, std::string const & factoryName, 
            bool algInitOnFile) -> OptimizerLoop
        """
        return _pilot.Runtime_createOptimizerLoop(self, *args)

    def createSwitch(self, *args):
        """createSwitch(Runtime self, std::string const & name) -> Switch"""
        return _pilot.Runtime_createSwitch(self, *args)

    def createInterfaceTc(self, *args):
        """createInterfaceTc(Runtime self, std::string const & id, std::string const & name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > ltc) -> TypeCode"""
        return _pilot.Runtime_createInterfaceTc(self, *args)

    def createSequenceTc(self, *args):
        """createSequenceTc(Runtime self, std::string const & id, std::string const & name, TypeCode content) -> TypeCode"""
        return _pilot.Runtime_createSequenceTc(self, *args)

    def createStructTc(self, *args):
        """createStructTc(Runtime self, std::string const & id, std::string const & name) -> TypeCodeStruct"""
        return _pilot.Runtime_createStructTc(self, *args)

    def createInputPort(self, *args):
        """createInputPort(Runtime self, std::string const & name, std::string const & impl, Node node, TypeCode type) -> InputPort"""
        return _pilot.Runtime_createInputPort(self, *args)

    def createOutputPort(self, *args):
        """createOutputPort(Runtime self, std::string const & name, std::string const & impl, Node node, TypeCode type) -> OutputPort"""
        return _pilot.Runtime_createOutputPort(self, *args)

    def createInputDataStreamPort(self, *args):
        """createInputDataStreamPort(Runtime self, std::string const & name, Node node, TypeCode type) -> InputDataStreamPort"""
        return _pilot.Runtime_createInputDataStreamPort(self, *args)

    def createOutputDataStreamPort(self, *args):
        """createOutputDataStreamPort(Runtime self, std::string const & name, Node node, TypeCode type) -> OutputDataStreamPort"""
        return _pilot.Runtime_createOutputDataStreamPort(self, *args)

    def adapt(self, *args):
        """
        adapt(Runtime self, InputPort source, std::string const & impl, TypeCode type, bool init=False) -> InputPort
        adapt(Runtime self, InputPort source, std::string const & impl, TypeCode type) -> InputPort
        adapt(Runtime self, InPropertyPort source, std::string const & impl, TypeCode type, bool init=False) -> InputPort
        adapt(Runtime self, InPropertyPort source, std::string const & impl, TypeCode type) -> InputPort
        """
        return _pilot.Runtime_adapt(self, *args)

    def convertNeutral(self, *args):
        """convertNeutral(Runtime self, TypeCode type, Any data) -> void *"""
        return _pilot.Runtime_convertNeutral(self, *args)

    def convertNeutralAsString(self, *args):
        """convertNeutralAsString(Runtime self, TypeCode type, Any data) -> std::string"""
        return _pilot.Runtime_convertNeutralAsString(self, *args)

    def removeRuntime(self):
        """removeRuntime(Runtime self)"""
        return _pilot.Runtime_removeRuntime(self)

    __swig_destroy__ = _pilot.delete_Runtime
    __del__ = lambda self : None;
    __swig_setmethods__["_tc_stringpair"] = _pilot.Runtime__tc_stringpair_set
    __swig_getmethods__["_tc_stringpair"] = _pilot.Runtime__tc_stringpair_get
    if _newclass:_tc_stringpair = _swig_property(_pilot.Runtime__tc_stringpair_get, _pilot.Runtime__tc_stringpair_set)
    __swig_setmethods__["_tc_propvec"] = _pilot.Runtime__tc_propvec_set
    __swig_getmethods__["_tc_propvec"] = _pilot.Runtime__tc_propvec_get
    if _newclass:_tc_propvec = _swig_property(_pilot.Runtime__tc_propvec_get, _pilot.Runtime__tc_propvec_set)
    def setCatalogLoaderFactory(self, *args):
        """setCatalogLoaderFactory(Runtime self, std::string const & name, CatalogLoader factory)"""
        return _pilot.Runtime_setCatalogLoaderFactory(self, *args)

    __swig_setmethods__["_catalogLoaderFactoryMap"] = _pilot.Runtime__catalogLoaderFactoryMap_set
    __swig_getmethods__["_catalogLoaderFactoryMap"] = _pilot.Runtime__catalogLoaderFactoryMap_get
    if _newclass:_catalogLoaderFactoryMap = _swig_property(_pilot.Runtime__catalogLoaderFactoryMap_get, _pilot.Runtime__catalogLoaderFactoryMap_set)
    def getBuiltinCatalog(self):
        """getBuiltinCatalog(Runtime self) -> Catalog"""
        return _pilot.Runtime_getBuiltinCatalog(self)

    def addCatalog(self, *args):
        """addCatalog(Runtime self, Catalog catalog)"""
        return _pilot.Runtime_addCatalog(self, *args)

    def getTypeCode(self, *args):
        """getTypeCode(Runtime self, std::string const & name) -> TypeCode"""
        return _pilot.Runtime_getTypeCode(self, *args)

Runtime_swigregister = _pilot.Runtime_swigregister
Runtime_swigregister(Runtime)
cvar = _pilot.cvar
Runtime.RUNTIME_ENGINE_INTERACTION_IMPL_NAME = _pilot.cvar.Runtime_RUNTIME_ENGINE_INTERACTION_IMPL_NAME

class PropertyInterface(_object):
    """Proxy of C++ YACS::ENGINE::PropertyInterface class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyInterface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_PropertyInterface
    __del__ = lambda self : None;
    def setProperty(self, *args):
        """setProperty(PropertyInterface self, std::string const & name, std::string const & value)"""
        return _pilot.PropertyInterface_setProperty(self, *args)

    def getProperty(self, *args):
        """getProperty(PropertyInterface self, std::string const & name) -> std::string"""
        return _pilot.PropertyInterface_getProperty(self, *args)

    def getProperties(self):
        """getProperties(PropertyInterface self) -> propmap"""
        return _pilot.PropertyInterface_getProperties(self)

    def setProperties(self, *args):
        """setProperties(PropertyInterface self, propmap properties)"""
        return _pilot.PropertyInterface_setProperties(self, *args)

    def __init__(self): 
        """__init__(YACS::ENGINE::PropertyInterface self) -> PropertyInterface"""
        this = _pilot.new_PropertyInterface()
        try: self.this.append(this)
        except: self.this = this
PropertyInterface_swigregister = _pilot.PropertyInterface_swigregister
PropertyInterface_swigregister(PropertyInterface)

class Executor(_object):
    """Proxy of C++ YACS::ENGINE::Executor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Executor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Executor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(YACS::ENGINE::Executor self) -> Executor"""
        this = _pilot.new_Executor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Executor
    __del__ = lambda self : None;
    def RunA(self, *args):
        """
        RunA(Executor self, Scheduler graph, int debug=0, bool fromScratch=True)
        RunA(Executor self, Scheduler graph, int debug=0)
        RunA(Executor self, Scheduler graph)
        """
        return _pilot.Executor_RunA(self, *args)

    def RunW(self, *args):
        """
        RunW(Executor self, Scheduler graph, int debug=0, bool fromScratch=True)
        RunW(Executor self, Scheduler graph, int debug=0)
        RunW(Executor self, Scheduler graph)
        """
        return _pilot.Executor_RunW(self, *args)

    def RunB(self, *args):
        """
        RunB(Executor self, Scheduler graph, int debug=0, bool fromScratch=True)
        RunB(Executor self, Scheduler graph, int debug=0)
        RunB(Executor self, Scheduler graph)
        """
        return _pilot.Executor_RunB(self, *args)

    def getCurrentExecMode(self):
        """getCurrentExecMode(Executor self) -> YACS::ExecutionMode"""
        return _pilot.Executor_getCurrentExecMode(self)

    def getExecutorState(self):
        """getExecutorState(Executor self) -> YACS::ExecutorState"""
        return _pilot.Executor_getExecutorState(self)

    def setExecMode(self, *args):
        """setExecMode(Executor self, YACS::ExecutionMode mode)"""
        return _pilot.Executor_setExecMode(self, *args)

    def setListOfBreakPoints(self, *args):
        """setListOfBreakPoints(Executor self, std::list< std::string,std::allocator< std::string > > listOfBreakPoints)"""
        return _pilot.Executor_setListOfBreakPoints(self, *args)

    def getTasksToLoad(self):
        """getTasksToLoad(Executor self) -> std::list< std::string,std::allocator< std::string > >"""
        return _pilot.Executor_getTasksToLoad(self)

    def setStepsToExecute(self, *args):
        """setStepsToExecute(Executor self, std::list< std::string,std::allocator< std::string > > listToExecute) -> bool"""
        return _pilot.Executor_setStepsToExecute(self, *args)

    def resumeCurrentBreakPoint(self):
        """resumeCurrentBreakPoint(Executor self) -> bool"""
        return _pilot.Executor_resumeCurrentBreakPoint(self)

    def isNotFinished(self):
        """isNotFinished(Executor self) -> bool"""
        return _pilot.Executor_isNotFinished(self)

    def stopExecution(self):
        """stopExecution(Executor self)"""
        return _pilot.Executor_stopExecution(self)

    def saveState(self, *args):
        """saveState(Executor self, std::string const & xmlFile) -> bool"""
        return _pilot.Executor_saveState(self, *args)

    def loadState(self):
        """loadState(Executor self) -> bool"""
        return _pilot.Executor_loadState(self)

    def getNbOfThreads(self):
        """getNbOfThreads(Executor self) -> int"""
        return _pilot.Executor_getNbOfThreads(self)

    def displayDot(self, *args):
        """displayDot(Executor self, Scheduler graph)"""
        return _pilot.Executor_displayDot(self, *args)

    def setStopOnError(self, dumpRequested=False, xmlFile=""):
        """
        setStopOnError(Executor self, bool dumpRequested=False, std::string xmlFile="")
        setStopOnError(Executor self, bool dumpRequested=False)
        setStopOnError(Executor self)
        """
        return _pilot.Executor_setStopOnError(self, dumpRequested, xmlFile)

    def unsetStopOnError(self):
        """unsetStopOnError(Executor self)"""
        return _pilot.Executor_unsetStopOnError(self)

    def waitPause(self):
        """waitPause(Executor self)"""
        return _pilot.Executor_waitPause(self)

    __swig_setmethods__["_maxThreads"] = _pilot.Executor__maxThreads_set
    __swig_getmethods__["_maxThreads"] = _pilot.Executor__maxThreads_get
    if _newclass:_maxThreads = _swig_property(_pilot.Executor__maxThreads_get, _pilot.Executor__maxThreads_set)
    __swig_setmethods__["_threadStackSize"] = _pilot.Executor__threadStackSize_set
    __swig_getmethods__["_threadStackSize"] = _pilot.Executor__threadStackSize_get
    if _newclass:_threadStackSize = _swig_property(_pilot.Executor__threadStackSize_get, _pilot.Executor__threadStackSize_set)
Executor_swigregister = _pilot.Executor_swigregister
Executor_swigregister(Executor)

class ExecutorSwig(Executor):
    """Proxy of C++ YACS::ENGINE::ExecutorSwig class"""
    __swig_setmethods__ = {}
    for _s in [Executor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutorSwig, name, value)
    __swig_getmethods__ = {}
    for _s in [Executor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutorSwig, name)
    __repr__ = _swig_repr
    def RunPy(self, *args):
        """
        RunPy(ExecutorSwig self, Scheduler graph, int debug=0, bool isPyThread=True, bool fromscratch=True)
        RunPy(ExecutorSwig self, Scheduler graph, int debug=0, bool isPyThread=True)
        RunPy(ExecutorSwig self, Scheduler graph, int debug=0)
        RunPy(ExecutorSwig self, Scheduler graph)
        """
        return _pilot.ExecutorSwig_RunPy(self, *args)

    def waitPause(self):
        """waitPause(ExecutorSwig self)"""
        return _pilot.ExecutorSwig_waitPause(self)

    def __init__(self): 
        """__init__(YACS::ENGINE::ExecutorSwig self) -> ExecutorSwig"""
        this = _pilot.new_ExecutorSwig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_ExecutorSwig
    __del__ = lambda self : None;
ExecutorSwig_swigregister = _pilot.ExecutorSwig_swigregister
ExecutorSwig_swigregister(ExecutorSwig)

class RefCounter(_object):
    """Proxy of C++ YACS::ENGINE::RefCounter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefCounter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getRefCnt(self):
        """getRefCnt(RefCounter self) -> unsigned int"""
        return _pilot.RefCounter_getRefCnt(self)

    def incrRef(self):
        """incrRef(RefCounter self)"""
        return _pilot.RefCounter_incrRef(self)

    def decrRef(self):
        """decrRef(RefCounter self) -> bool"""
        return _pilot.RefCounter_decrRef(self)

    __swig_setmethods__["_totalCnt"] = _pilot.RefCounter__totalCnt_set
    __swig_getmethods__["_totalCnt"] = _pilot.RefCounter__totalCnt_get
    if _newclass:_totalCnt = _swig_property(_pilot.RefCounter__totalCnt_get, _pilot.RefCounter__totalCnt_set)
    __swig_destroy__ = _pilot.delete_RefCounter
    __del__ = lambda self : None;
RefCounter_swigregister = _pilot.RefCounter_swigregister
RefCounter_swigregister(RefCounter)

class StringOnHeap(_object):
    """Proxy of C++ YACS::ENGINE::StringOnHeap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringOnHeap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringOnHeap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
StringOnHeap_swigregister = _pilot.StringOnHeap_swigregister
StringOnHeap_swigregister(StringOnHeap)

class Any(RefCounter):
    """Proxy of C++ YACS::ENGINE::Any class"""
    __swig_setmethods__ = {}
    for _s in [RefCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Any, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Any, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getType(self):
        """getType(Any self) -> TypeCode"""
        return _pilot.Any_getType(self)

    def clone(self):
        """clone(Any self) -> Any"""
        return _pilot.Any_clone(self)

    def __eq__(self, *args):
        """__eq__(Any self, Any other) -> bool"""
        return _pilot.Any___eq__(self, *args)

    def getIntValue(self):
        """getIntValue(Any self) -> int"""
        return _pilot.Any_getIntValue(self)

    def getBoolValue(self):
        """getBoolValue(Any self) -> bool"""
        return _pilot.Any_getBoolValue(self)

    def getDoubleValue(self):
        """getDoubleValue(Any self) -> double"""
        return _pilot.Any_getDoubleValue(self)

    def getStringValue(self):
        """getStringValue(Any self) -> std::string"""
        return _pilot.Any_getStringValue(self)

    __swig_destroy__ = _pilot.delete_Any
    __del__ = lambda self : None;
Any_swigregister = _pilot.Any_swigregister
Any_swigregister(Any)

class AtomAny(Any):
    """Proxy of C++ YACS::ENGINE::AtomAny class"""
    __swig_setmethods__ = {}
    for _s in [Any]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomAny, name, value)
    __swig_getmethods__ = {}
    for _s in [Any]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomAny, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def clone(self):
        """clone(AtomAny self) -> Any"""
        return _pilot.AtomAny_clone(self)

    def New(*args):
        """New(char * val, YACS::ENGINE::Deallocator dealloc) -> AtomAny"""
        return _pilot.AtomAny_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __eq__(self, *args):
        """__eq__(AtomAny self, Any other) -> bool"""
        return _pilot.AtomAny___eq__(self, *args)

    def getIntValue(self):
        """getIntValue(AtomAny self) -> int"""
        return _pilot.AtomAny_getIntValue(self)

    def getBoolValue(self):
        """getBoolValue(AtomAny self) -> bool"""
        return _pilot.AtomAny_getBoolValue(self)

    def getDoubleValue(self):
        """getDoubleValue(AtomAny self) -> double"""
        return _pilot.AtomAny_getDoubleValue(self)

    def getStringValue(self):
        """getStringValue(AtomAny self) -> std::string"""
        return _pilot.AtomAny_getStringValue(self)

AtomAny_swigregister = _pilot.AtomAny_swigregister
AtomAny_swigregister(AtomAny)

def AtomAny_New(*args):
  """AtomAny_New(char * val, YACS::ENGINE::Deallocator dealloc) -> AtomAny"""
  return _pilot.AtomAny_New(*args)

class SeqAlloc(_object):
    """Proxy of C++ YACS::ENGINE::SeqAlloc class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeqAlloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SeqAlloc, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SeqAlloc_swigregister = _pilot.SeqAlloc_swigregister
SeqAlloc_swigregister(SeqAlloc)

class ComposedAny(Any):
    """Proxy of C++ YACS::ENGINE::ComposedAny class"""
    __swig_setmethods__ = {}
    for _s in [Any]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComposedAny, name, value)
    __swig_getmethods__ = {}
    for _s in [Any]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComposedAny, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setEltAtRank(self, *args):
        """setEltAtRank(ComposedAny self, int i, Any elem)"""
        return _pilot.ComposedAny_setEltAtRank(self, *args)

    __swig_destroy__ = _pilot.delete_ComposedAny
    __del__ = lambda self : None;
ComposedAny_swigregister = _pilot.ComposedAny_swigregister
ComposedAny_swigregister(ComposedAny)

class SequenceAny(ComposedAny):
    """Proxy of C++ YACS::ENGINE::SequenceAny class"""
    __swig_setmethods__ = {}
    for _s in [ComposedAny]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceAny, name, value)
    __swig_getmethods__ = {}
    for _s in [ComposedAny]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceAny, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def clear(self):
        """clear(SequenceAny self)"""
        return _pilot.SequenceAny_clear(self)

    def popBack(self):
        """popBack(SequenceAny self)"""
        return _pilot.SequenceAny_popBack(self)

    def size(self):
        """size(SequenceAny self) -> unsigned int"""
        return _pilot.SequenceAny_size(self)

    def pushBack(self, *args):
        """pushBack(SequenceAny self, Any elem)"""
        return _pilot.SequenceAny_pushBack(self, *args)

    def __eq__(self, *args):
        """__eq__(SequenceAny self, Any other) -> bool"""
        return _pilot.SequenceAny___eq__(self, *args)

    def setEltAtRank(self, *args):
        """setEltAtRank(SequenceAny self, int i, Any elem)"""
        return _pilot.SequenceAny_setEltAtRank(self, *args)

    def clone(self):
        """clone(SequenceAny self) -> Any"""
        return _pilot.SequenceAny_clone(self)

    def New(*args):
        """
        New(TypeCode typeOfContent) -> SequenceAny
        New(TypeCode typeOfContent, unsigned int lgth) -> SequenceAny
        """
        return _pilot.SequenceAny_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def __getitem__(self, *args):
        """__getitem__(SequenceAny self, int i) -> Any"""
        return _pilot.SequenceAny___getitem__(self, *args)

SequenceAny_swigregister = _pilot.SequenceAny_swigregister
SequenceAny_swigregister(SequenceAny)

def SequenceAny_New(*args):
  """
    New(TypeCode typeOfContent) -> SequenceAny
    SequenceAny_New(TypeCode typeOfContent, unsigned int lgth) -> SequenceAny
    """
  return _pilot.SequenceAny_New(*args)

class ArrayAny(ComposedAny):
    """Proxy of C++ YACS::ENGINE::ArrayAny class"""
    __swig_setmethods__ = {}
    for _s in [ComposedAny]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayAny, name, value)
    __swig_getmethods__ = {}
    for _s in [ComposedAny]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayAny, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setEltAtRank(self, *args):
        """setEltAtRank(ArrayAny self, int i, Any elem)"""
        return _pilot.ArrayAny_setEltAtRank(self, *args)

    def __eq__(self, *args):
        """__eq__(ArrayAny self, Any other) -> bool"""
        return _pilot.ArrayAny___eq__(self, *args)

    def size(self):
        """size(ArrayAny self) -> unsigned int"""
        return _pilot.ArrayAny_size(self)

    def clone(self):
        """clone(ArrayAny self) -> Any"""
        return _pilot.ArrayAny_clone(self)

    def New(*args):
        """New(TypeCode typeOfContent, unsigned int lgth) -> ArrayAny"""
        return _pilot.ArrayAny_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
ArrayAny_swigregister = _pilot.ArrayAny_swigregister
ArrayAny_swigregister(ArrayAny)

def ArrayAny_New(*args):
  """ArrayAny_New(TypeCode typeOfContent, unsigned int lgth) -> ArrayAny"""
  return _pilot.ArrayAny_New(*args)

class StructAny(ComposedAny):
    """Proxy of C++ YACS::ENGINE::StructAny class"""
    __swig_setmethods__ = {}
    for _s in [ComposedAny]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructAny, name, value)
    __swig_getmethods__ = {}
    for _s in [ComposedAny]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructAny, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def clone(self):
        """clone(StructAny self) -> Any"""
        return _pilot.StructAny_clone(self)

    def __eq__(self, *args):
        """__eq__(StructAny self, Any other) -> bool"""
        return _pilot.StructAny___eq__(self, *args)

    def New(*args):
        """New(TypeCodeStruct type) -> StructAny"""
        return _pilot.StructAny_New(*args)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def setEltAtRank(self, *args):
        """
        setEltAtRank(StructAny self, int i, Any elem)
        setEltAtRank(StructAny self, char const * key, Any elem)
        """
        return _pilot.StructAny_setEltAtRank(self, *args)

    def __getitem__(self, *args):
        """__getitem__(StructAny self, char const * key) -> Any"""
        return _pilot.StructAny___getitem__(self, *args)

StructAny_swigregister = _pilot.StructAny_swigregister
StructAny_swigregister(StructAny)

def StructAny_New(*args):
  """StructAny_New(TypeCodeStruct type) -> StructAny"""
  return _pilot.StructAny_New(*args)

NONE = _pilot.NONE
Double = _pilot.Double
Int = _pilot.Int
String = _pilot.String
Bool = _pilot.Bool
Objref = _pilot.Objref
Sequence = _pilot.Sequence
Array = _pilot.Array
Struct = _pilot.Struct
class TypeCode(RefCounter):
    """Proxy of C++ YACS::ENGINE::TypeCode class"""
    __swig_setmethods__ = {}
    for _s in [RefCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeCode, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeCode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::TypeCode self, YACS::ENGINE::DynType kind) -> TypeCode"""
        this = _pilot.new_TypeCode(*args)
        try: self.this.append(this)
        except: self.this = this
    def kind(self):
        """kind(TypeCode self) -> YACS::ENGINE::DynType"""
        return _pilot.TypeCode_kind(self)

    def clone(self):
        """clone(TypeCode self) -> TypeCode"""
        return _pilot.TypeCode_clone(self)

    def putReprAtPlace(self, *args):
        """putReprAtPlace(TypeCode self, char * pt, char const * val, bool deepCpy)"""
        return _pilot.TypeCode_putReprAtPlace(self, *args)

    def destroyZippedAny(self, *args):
        """destroyZippedAny(TypeCode self, char * data)"""
        return _pilot.TypeCode_destroyZippedAny(self, *args)

    def name(self):
        """name(TypeCode self) -> char const *"""
        return _pilot.TypeCode_name(self)

    def shortName(self):
        """shortName(TypeCode self) -> char const *"""
        return _pilot.TypeCode_shortName(self)

    def id(self):
        """id(TypeCode self) -> char const *"""
        return _pilot.TypeCode_id(self)

    def contentType(self):
        """contentType(TypeCode self) -> TypeCode"""
        return _pilot.TypeCode_contentType(self)

    def isA(self, *args):
        """
        isA(TypeCode self, char const * repositoryId) -> int
        isA(TypeCode self, TypeCode tc) -> int
        """
        return _pilot.TypeCode_isA(self, *args)

    def isAdaptable(self, *args):
        """isAdaptable(TypeCode self, TypeCode tc) -> int"""
        return _pilot.TypeCode_isAdaptable(self, *args)

    def isEquivalent(self, *args):
        """isEquivalent(TypeCode self, TypeCode tc) -> int"""
        return _pilot.TypeCode_isEquivalent(self, *args)

    def getSizeInByteOfAnyReprInSeq(self):
        """getSizeInByteOfAnyReprInSeq(TypeCode self) -> unsigned int"""
        return _pilot.TypeCode_getSizeInByteOfAnyReprInSeq(self)

    def getKindRepr(*args):
        """
        getKindRepr() -> char const
        getKindRepr(YACS::ENGINE::DynType kind) -> char const *
        """
        return _pilot.TypeCode_getKindRepr(*args)

    if _newclass:getKindRepr = staticmethod(getKindRepr)
    __swig_getmethods__["getKindRepr"] = lambda x: getKindRepr
    def interfaceTc(*args):
        """
        interfaceTc(char const * id, char const * name) -> TypeCode
        interfaceTc(char const * id, char const * name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > const & ltc) -> TypeCode
        """
        return _pilot.TypeCode_interfaceTc(*args)

    if _newclass:interfaceTc = staticmethod(interfaceTc)
    __swig_getmethods__["interfaceTc"] = lambda x: interfaceTc
    def sequenceTc(*args):
        """sequenceTc(char const * id, char const * name, TypeCode content) -> TypeCode"""
        return _pilot.TypeCode_sequenceTc(*args)

    if _newclass:sequenceTc = staticmethod(sequenceTc)
    __swig_getmethods__["sequenceTc"] = lambda x: sequenceTc
    def structTc(*args):
        """structTc(char const * id, char const * name) -> TypeCode"""
        return _pilot.TypeCode_structTc(*args)

    if _newclass:structTc = staticmethod(structTc)
    __swig_getmethods__["structTc"] = lambda x: structTc
    __swig_destroy__ = _pilot.delete_TypeCode
    __del__ = lambda self : None;
TypeCode_swigregister = _pilot.TypeCode_swigregister
TypeCode_swigregister(TypeCode)

def TypeCode_getKindRepr(*args):
  """
    getKindRepr() -> char const
    TypeCode_getKindRepr(YACS::ENGINE::DynType kind) -> char const *
    """
  return _pilot.TypeCode_getKindRepr(*args)

def TypeCode_interfaceTc(*args):
  """
    interfaceTc(char const * id, char const * name) -> TypeCode
    TypeCode_interfaceTc(char const * id, char const * name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > const & ltc) -> TypeCode
    """
  return _pilot.TypeCode_interfaceTc(*args)

def TypeCode_sequenceTc(*args):
  """TypeCode_sequenceTc(char const * id, char const * name, TypeCode content) -> TypeCode"""
  return _pilot.TypeCode_sequenceTc(*args)

def TypeCode_structTc(*args):
  """TypeCode_structTc(char const * id, char const * name) -> TypeCode"""
  return _pilot.TypeCode_structTc(*args)

class TypeCodeComposed(TypeCode):
    """Proxy of C++ YACS::ENGINE::TypeCodeComposed class"""
    __swig_setmethods__ = {}
    for _s in [TypeCode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeCodeComposed, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeCode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeCodeComposed, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_TypeCodeComposed
    __del__ = lambda self : None;
TypeCodeComposed_swigregister = _pilot.TypeCodeComposed_swigregister
TypeCodeComposed_swigregister(TypeCodeComposed)

class TypeCodeObjref(TypeCodeComposed):
    """Proxy of C++ YACS::ENGINE::TypeCodeObjref class"""
    __swig_setmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeCodeObjref, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeCodeObjref, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::TypeCodeObjref self, char const * repositoryId, char const * name) -> TypeCodeObjref
        __init__(YACS::ENGINE::TypeCodeObjref self, char const * repositoryId, char const * name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > const & ltc) -> TypeCodeObjref
        """
        this = _pilot.new_TypeCodeObjref(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(TypeCodeObjref self) -> TypeCode"""
        return _pilot.TypeCodeObjref_clone(self)

    def putReprAtPlace(self, *args):
        """putReprAtPlace(TypeCodeObjref self, char * pt, char const * val, bool deepCpy)"""
        return _pilot.TypeCodeObjref_putReprAtPlace(self, *args)

    def destroyZippedAny(self, *args):
        """destroyZippedAny(TypeCodeObjref self, char * data)"""
        return _pilot.TypeCodeObjref_destroyZippedAny(self, *args)

    def id(self):
        """id(TypeCodeObjref self) -> char const *"""
        return _pilot.TypeCodeObjref_id(self)

    def name(self):
        """name(TypeCodeObjref self) -> char const *"""
        return _pilot.TypeCodeObjref_name(self)

    def shortName(self):
        """shortName(TypeCodeObjref self) -> char const *"""
        return _pilot.TypeCodeObjref_shortName(self)

    def isA(self, *args):
        """
        isA(TypeCodeObjref self, char const * repositoryId) -> int
        isA(TypeCodeObjref self, TypeCode tc) -> int
        """
        return _pilot.TypeCodeObjref_isA(self, *args)

    def isAdaptable(self, *args):
        """isAdaptable(TypeCodeObjref self, TypeCode tc) -> int"""
        return _pilot.TypeCodeObjref_isAdaptable(self, *args)

    def isEquivalent(self, *args):
        """isEquivalent(TypeCodeObjref self, TypeCode tc) -> int"""
        return _pilot.TypeCodeObjref_isEquivalent(self, *args)

    __swig_destroy__ = _pilot.delete_TypeCodeObjref
    __del__ = lambda self : None;
TypeCodeObjref_swigregister = _pilot.TypeCodeObjref_swigregister
TypeCodeObjref_swigregister(TypeCodeObjref)

class TypeCodeSeq(TypeCodeComposed):
    """Proxy of C++ YACS::ENGINE::TypeCodeSeq class"""
    __swig_setmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeCodeSeq, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeCodeSeq, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::TypeCodeSeq self, char const * repositoryId, char const * name, TypeCode content) -> TypeCodeSeq"""
        this = _pilot.new_TypeCodeSeq(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(TypeCodeSeq self) -> TypeCode"""
        return _pilot.TypeCodeSeq_clone(self)

    def putReprAtPlace(self, *args):
        """putReprAtPlace(TypeCodeSeq self, char * pt, char const * val, bool deepCpy)"""
        return _pilot.TypeCodeSeq_putReprAtPlace(self, *args)

    def destroyZippedAny(self, *args):
        """destroyZippedAny(TypeCodeSeq self, char * data)"""
        return _pilot.TypeCodeSeq_destroyZippedAny(self, *args)

    def getSizeInByteOfAnyReprInSeq(self):
        """getSizeInByteOfAnyReprInSeq(TypeCodeSeq self) -> unsigned int"""
        return _pilot.TypeCodeSeq_getSizeInByteOfAnyReprInSeq(self)

    def id(self):
        """id(TypeCodeSeq self) -> char const *"""
        return _pilot.TypeCodeSeq_id(self)

    def name(self):
        """name(TypeCodeSeq self) -> char const *"""
        return _pilot.TypeCodeSeq_name(self)

    def shortName(self):
        """shortName(TypeCodeSeq self) -> char const *"""
        return _pilot.TypeCodeSeq_shortName(self)

    def contentType(self):
        """contentType(TypeCodeSeq self) -> TypeCode"""
        return _pilot.TypeCodeSeq_contentType(self)

    def isA(self, *args):
        """isA(TypeCodeSeq self, TypeCode tc) -> int"""
        return _pilot.TypeCodeSeq_isA(self, *args)

    def isAdaptable(self, *args):
        """isAdaptable(TypeCodeSeq self, TypeCode tc) -> int"""
        return _pilot.TypeCodeSeq_isAdaptable(self, *args)

    def isEquivalent(self, *args):
        """isEquivalent(TypeCodeSeq self, TypeCode tc) -> int"""
        return _pilot.TypeCodeSeq_isEquivalent(self, *args)

    __swig_destroy__ = _pilot.delete_TypeCodeSeq
    __del__ = lambda self : None;
TypeCodeSeq_swigregister = _pilot.TypeCodeSeq_swigregister
TypeCodeSeq_swigregister(TypeCodeSeq)

class TypeCodeArray(TypeCodeComposed):
    """Proxy of C++ YACS::ENGINE::TypeCodeArray class"""
    __swig_setmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeCodeArray, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeCodeArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::TypeCodeArray self, char const * repositoryId, char const * name, TypeCode content, unsigned int staticLgth) -> TypeCodeArray"""
        this = _pilot.new_TypeCodeArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(TypeCodeArray self) -> TypeCode"""
        return _pilot.TypeCodeArray_clone(self)

    def putReprAtPlace(self, *args):
        """putReprAtPlace(TypeCodeArray self, char * pt, char const * val, bool deepCpy)"""
        return _pilot.TypeCodeArray_putReprAtPlace(self, *args)

    def destroyZippedAny(self, *args):
        """destroyZippedAny(TypeCodeArray self, char * data)"""
        return _pilot.TypeCodeArray_destroyZippedAny(self, *args)

    def id(self):
        """id(TypeCodeArray self) -> char const *"""
        return _pilot.TypeCodeArray_id(self)

    def name(self):
        """name(TypeCodeArray self) -> char const *"""
        return _pilot.TypeCodeArray_name(self)

    def shortName(self):
        """shortName(TypeCodeArray self) -> char const *"""
        return _pilot.TypeCodeArray_shortName(self)

    def getStaticLgth(self):
        """getStaticLgth(TypeCodeArray self) -> unsigned int"""
        return _pilot.TypeCodeArray_getStaticLgth(self)

    def contentType(self):
        """contentType(TypeCodeArray self) -> TypeCode"""
        return _pilot.TypeCodeArray_contentType(self)

    def isA(self, *args):
        """isA(TypeCodeArray self, TypeCode tc) -> int"""
        return _pilot.TypeCodeArray_isA(self, *args)

    def isAdaptable(self, *args):
        """isAdaptable(TypeCodeArray self, TypeCode tc) -> int"""
        return _pilot.TypeCodeArray_isAdaptable(self, *args)

    def isEquivalent(self, *args):
        """isEquivalent(TypeCodeArray self, TypeCode tc) -> int"""
        return _pilot.TypeCodeArray_isEquivalent(self, *args)

    def getSizeInByteOfAnyReprInSeq(self):
        """getSizeInByteOfAnyReprInSeq(TypeCodeArray self) -> unsigned int"""
        return _pilot.TypeCodeArray_getSizeInByteOfAnyReprInSeq(self)

    __swig_destroy__ = _pilot.delete_TypeCodeArray
    __del__ = lambda self : None;
TypeCodeArray_swigregister = _pilot.TypeCodeArray_swigregister
TypeCodeArray_swigregister(TypeCodeArray)

class TypeCodeStruct(TypeCodeComposed):
    """Proxy of C++ YACS::ENGINE::TypeCodeStruct class"""
    __swig_setmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeCodeStruct, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeCodeComposed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeCodeStruct, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::TypeCodeStruct self, char const * repositoryId, char const * name) -> TypeCodeStruct"""
        this = _pilot.new_TypeCodeStruct(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(TypeCodeStruct self) -> TypeCode"""
        return _pilot.TypeCodeStruct_clone(self)

    def putReprAtPlace(self, *args):
        """putReprAtPlace(TypeCodeStruct self, char * pt, char const * val, bool deepCpy)"""
        return _pilot.TypeCodeStruct_putReprAtPlace(self, *args)

    def destroyZippedAny(self, *args):
        """destroyZippedAny(TypeCodeStruct self, char * data)"""
        return _pilot.TypeCodeStruct_destroyZippedAny(self, *args)

    def id(self):
        """id(TypeCodeStruct self) -> char const *"""
        return _pilot.TypeCodeStruct_id(self)

    def name(self):
        """name(TypeCodeStruct self) -> char const *"""
        return _pilot.TypeCodeStruct_name(self)

    def shortName(self):
        """shortName(TypeCodeStruct self) -> char const *"""
        return _pilot.TypeCodeStruct_shortName(self)

    def getSizeInByteOfAnyReprInSeq(self):
        """getSizeInByteOfAnyReprInSeq(TypeCodeStruct self) -> unsigned int"""
        return _pilot.TypeCodeStruct_getSizeInByteOfAnyReprInSeq(self)

    def contentType(self):
        """contentType(TypeCodeStruct self) -> TypeCode"""
        return _pilot.TypeCodeStruct_contentType(self)

    def isA(self, *args):
        """
        isA(TypeCodeStruct self, char const * repositoryId) -> int
        isA(TypeCodeStruct self, TypeCode tc) -> int
        """
        return _pilot.TypeCodeStruct_isA(self, *args)

    def isAdaptable(self, *args):
        """isAdaptable(TypeCodeStruct self, TypeCode tc) -> int"""
        return _pilot.TypeCodeStruct_isAdaptable(self, *args)

    def isEquivalent(self, *args):
        """isEquivalent(TypeCodeStruct self, TypeCode tc) -> int"""
        return _pilot.TypeCodeStruct_isEquivalent(self, *args)

    def addMember(self, *args):
        """addMember(TypeCodeStruct self, std::string const & name, TypeCode tc)"""
        return _pilot.TypeCodeStruct_addMember(self, *args)

    def getMember(self, *args):
        """getMember(TypeCodeStruct self, std::string const & name, unsigned int & offset) -> TypeCode"""
        return _pilot.TypeCodeStruct_getMember(self, *args)

    def memberCount(self):
        """memberCount(TypeCodeStruct self) -> int"""
        return _pilot.TypeCodeStruct_memberCount(self)

    def memberName(self, *args):
        """memberName(TypeCodeStruct self, int index) -> char const *"""
        return _pilot.TypeCodeStruct_memberName(self, *args)

    def memberType(self, *args):
        """memberType(TypeCodeStruct self, int index) -> TypeCode"""
        return _pilot.TypeCodeStruct_memberType(self, *args)

    __swig_destroy__ = _pilot.delete_TypeCodeStruct
    __del__ = lambda self : None;
TypeCodeStruct_swigregister = _pilot.TypeCodeStruct_swigregister
TypeCodeStruct_swigregister(TypeCodeStruct)

class Scheduler(_object):
    """Proxy of C++ YACS::ENGINE::Scheduler class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scheduler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scheduler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def init(self, start=True):
        """
        init(Scheduler self, bool start=True)
        init(Scheduler self)
        """
        return _pilot.Scheduler_init(self, start)

    def isFinished(self):
        """isFinished(Scheduler self) -> bool"""
        return _pilot.Scheduler_isFinished(self)

    def exUpdateState(self):
        """exUpdateState(Scheduler self)"""
        return _pilot.Scheduler_exUpdateState(self)

    def getName(self):
        """getName(Scheduler self) -> std::string"""
        return _pilot.Scheduler_getName(self)

    def getTaskName(self, *args):
        """getTaskName(Scheduler self, Task task) -> std::string"""
        return _pilot.Scheduler_getTaskName(self, *args)

    def getNextTasks(self, *args):
        """getNextTasks(Scheduler self, bool & isMore) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.Scheduler_getNextTasks(self, *args)

    def selectRunnableTasks(self, *args):
        """selectRunnableTasks(Scheduler self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Scheduler_selectRunnableTasks(self, *args)

    def notifyFrom(self, *args):
        """notifyFrom(Scheduler self, Task sender, YACS::Event event)"""
        return _pilot.Scheduler_notifyFrom(self, *args)

    def getDeploymentTree(self):
        """getDeploymentTree(Scheduler self) -> DeploymentTree"""
        return _pilot.Scheduler_getDeploymentTree(self)

    def isPlacementPredictableB4Run(self):
        """isPlacementPredictableB4Run(Scheduler self) -> bool"""
        return _pilot.Scheduler_isPlacementPredictableB4Run(self)

    def isMultiplicitySpecified(self, *args):
        """isMultiplicitySpecified(Scheduler self, unsigned int & value) -> bool"""
        return _pilot.Scheduler_isMultiplicitySpecified(self, *args)

    def forceMultiplicity(self, *args):
        """forceMultiplicity(Scheduler self, unsigned int value)"""
        return _pilot.Scheduler_forceMultiplicity(self, *args)

    __swig_destroy__ = _pilot.delete_Scheduler
    __del__ = lambda self : None;
Scheduler_swigregister = _pilot.Scheduler_swigregister
Scheduler_swigregister(Scheduler)

class Task(_object):
    """Proxy of C++ YACS::ENGINE::Task class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def begin(self):
        """begin(Task self)"""
        return _pilot.Task_begin(self)

    def isReady(self):
        """isReady(Task self) -> bool"""
        return _pilot.Task_isReady(self)

    def execute(self):
        """execute(Task self)"""
        return _pilot.Task_execute(self)

    def load(self):
        """load(Task self)"""
        return _pilot.Task_load(self)

    def loaded(self):
        """loaded(Task self)"""
        return _pilot.Task_loaded(self)

    def connected(self):
        """connected(Task self)"""
        return _pilot.Task_connected(self)

    def initService(self):
        """initService(Task self)"""
        return _pilot.Task_initService(self)

    def connectService(self):
        """connectService(Task self)"""
        return _pilot.Task_connectService(self)

    def disconnectService(self):
        """disconnectService(Task self)"""
        return _pilot.Task_disconnectService(self)

    def getCoupledTasks(self, *args):
        """getCoupledTasks(Task self, std::set< YACS::ENGINE::Task *,std::less< YACS::ENGINE::Task * >,std::allocator< YACS::ENGINE::Task * > > & coupledSet)"""
        return _pilot.Task_getCoupledTasks(self, *args)

    def isDeployable(self):
        """isDeployable(Task self) -> bool"""
        return _pilot.Task_isDeployable(self)

    def getComponent(self):
        """getComponent(Task self) -> ComponentInstance"""
        return _pilot.Task_getComponent(self)

    def getContainer(self):
        """getContainer(Task self) -> Container"""
        return _pilot.Task_getContainer(self)

    def getState(self):
        """getState(Task self) -> YACS::StatesForNode"""
        return _pilot.Task_getState(self)

    def finished(self):
        """finished(Task self)"""
        return _pilot.Task_finished(self)

    def aborted(self):
        """aborted(Task self)"""
        return _pilot.Task_aborted(self)

    __swig_destroy__ = _pilot.delete_Task
    __del__ = lambda self : None;
Task_swigregister = _pilot.Task_swigregister
Task_swigregister(Task)

class Observer(_object):
    """Proxy of C++ YACS::ENGINE::Observer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    __repr__ = _swig_repr
    def notifyObserver(self, *args):
        """notifyObserver(Observer self, Node object, std::string const & event)"""
        return _pilot.Observer_notifyObserver(self, *args)

    __swig_destroy__ = _pilot.delete_Observer
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(YACS::ENGINE::Observer self) -> Observer"""
        this = _pilot.new_Observer()
        try: self.this.append(this)
        except: self.this = this
Observer_swigregister = _pilot.Observer_swigregister
Observer_swigregister(Observer)

class Dispatcher(_object):
    """Proxy of C++ YACS::ENGINE::Dispatcher class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dispatcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dispatcher, name)
    __repr__ = _swig_repr
    def dispatch(self, *args):
        """dispatch(Dispatcher self, Node object, std::string const & event)"""
        return _pilot.Dispatcher_dispatch(self, *args)

    def addObserver(self, *args):
        """addObserver(Dispatcher self, Observer observer, Node object, std::string const & event)"""
        return _pilot.Dispatcher_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(Dispatcher self, Observer observer, Node object, std::string const & event)"""
        return _pilot.Dispatcher_removeObserver(self, *args)

    def printObservers(self):
        """printObservers(Dispatcher self)"""
        return _pilot.Dispatcher_printObservers(self)

    def getDispatcher():
        """getDispatcher() -> Dispatcher"""
        return _pilot.Dispatcher_getDispatcher()

    if _newclass:getDispatcher = staticmethod(getDispatcher)
    __swig_getmethods__["getDispatcher"] = lambda x: getDispatcher
    def setDispatcher(*args):
        """setDispatcher(Dispatcher dispatcher)"""
        return _pilot.Dispatcher_setDispatcher(*args)

    if _newclass:setDispatcher = staticmethod(setDispatcher)
    __swig_getmethods__["setDispatcher"] = lambda x: setDispatcher
    __swig_destroy__ = _pilot.delete_Dispatcher
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(YACS::ENGINE::Dispatcher self) -> Dispatcher"""
        this = _pilot.new_Dispatcher()
        try: self.this.append(this)
        except: self.this = this
Dispatcher_swigregister = _pilot.Dispatcher_swigregister
Dispatcher_swigregister(Dispatcher)

def Dispatcher_getDispatcher():
  """Dispatcher_getDispatcher() -> Dispatcher"""
  return _pilot.Dispatcher_getDispatcher()

def Dispatcher_setDispatcher(*args):
  """Dispatcher_setDispatcher(Dispatcher dispatcher)"""
  return _pilot.Dispatcher_setDispatcher(*args)

class DeploymentTreeOnHeap(_object):
    """Proxy of C++ YACS::ENGINE::DeploymentTreeOnHeap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeploymentTreeOnHeap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeploymentTreeOnHeap, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(YACS::ENGINE::DeploymentTreeOnHeap self) -> DeploymentTreeOnHeap"""
        this = _pilot.new_DeploymentTreeOnHeap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_DeploymentTreeOnHeap
    __del__ = lambda self : None;
    def decrRef(self):
        """decrRef(DeploymentTreeOnHeap self) -> bool"""
        return _pilot.DeploymentTreeOnHeap_decrRef(self)

    def incrRef(self):
        """incrRef(DeploymentTreeOnHeap self)"""
        return _pilot.DeploymentTreeOnHeap_incrRef(self)

    def appendTask(self, *args):
        """appendTask(DeploymentTreeOnHeap self, Task task, Scheduler cloner) -> unsigned char"""
        return _pilot.DeploymentTreeOnHeap_appendTask(self, *args)

    def getNumberOfCTDefContainer(self):
        """getNumberOfCTDefContainer(DeploymentTreeOnHeap self) -> unsigned int"""
        return _pilot.DeploymentTreeOnHeap_getNumberOfCTDefContainer(self)

    def getNumberOfRTODefContainer(self):
        """getNumberOfRTODefContainer(DeploymentTreeOnHeap self) -> unsigned int"""
        return _pilot.DeploymentTreeOnHeap_getNumberOfRTODefContainer(self)

    def getNumberOfCTDefComponentInstances(self):
        """getNumberOfCTDefComponentInstances(DeploymentTreeOnHeap self) -> unsigned int"""
        return _pilot.DeploymentTreeOnHeap_getNumberOfCTDefComponentInstances(self)

    def getNumberOfRTODefComponentInstances(self):
        """getNumberOfRTODefComponentInstances(DeploymentTreeOnHeap self) -> unsigned int"""
        return _pilot.DeploymentTreeOnHeap_getNumberOfRTODefComponentInstances(self)

    def getAllContainers(self):
        """getAllContainers(DeploymentTreeOnHeap self) -> std::vector< YACS::ENGINE::Container *,std::allocator< YACS::ENGINE::Container * > >"""
        return _pilot.DeploymentTreeOnHeap_getAllContainers(self)

    def getAllCTDefContainers(self):
        """getAllCTDefContainers(DeploymentTreeOnHeap self) -> std::vector< YACS::ENGINE::Container *,std::allocator< YACS::ENGINE::Container * > >"""
        return _pilot.DeploymentTreeOnHeap_getAllCTDefContainers(self)

    def getAllRTODefContainers(self):
        """getAllRTODefContainers(DeploymentTreeOnHeap self) -> std::vector< YACS::ENGINE::Container *,std::allocator< YACS::ENGINE::Container * > >"""
        return _pilot.DeploymentTreeOnHeap_getAllRTODefContainers(self)

    def getTasksLinkedToComponent(self, *args):
        """getTasksLinkedToComponent(DeploymentTreeOnHeap self, ComponentInstance comp) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.DeploymentTreeOnHeap_getTasksLinkedToComponent(self, *args)

    def getTasksLinkedToContainer(self, *args):
        """getTasksLinkedToContainer(DeploymentTreeOnHeap self, Container cont) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.DeploymentTreeOnHeap_getTasksLinkedToContainer(self, *args)

    def getComponentsLinkedToContainer(self, *args):
        """getComponentsLinkedToContainer(DeploymentTreeOnHeap self, Container cont) -> std::vector< YACS::ENGINE::ComponentInstance *,std::allocator< YACS::ENGINE::ComponentInstance * > >"""
        return _pilot.DeploymentTreeOnHeap_getComponentsLinkedToContainer(self, *args)

    def presenceOfDefaultContainer(self):
        """presenceOfDefaultContainer(DeploymentTreeOnHeap self) -> bool"""
        return _pilot.DeploymentTreeOnHeap_presenceOfDefaultContainer(self)

    def getFreeDeployableTasks(self):
        """getFreeDeployableTasks(DeploymentTreeOnHeap self) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.DeploymentTreeOnHeap_getFreeDeployableTasks(self)

DeploymentTreeOnHeap_swigregister = _pilot.DeploymentTreeOnHeap_swigregister
DeploymentTreeOnHeap_swigregister(DeploymentTreeOnHeap)

class DeploymentTree(_object):
    """Proxy of C++ YACS::ENGINE::DeploymentTree class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeploymentTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeploymentTree, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_DeploymentTree
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::DeploymentTree self) -> DeploymentTree
        __init__(YACS::ENGINE::DeploymentTree self, DeploymentTree other) -> DeploymentTree
        """
        this = _pilot.new_DeploymentTree(*args)
        try: self.this.append(this)
        except: self.this = this
    def appendTask(self, *args):
        """appendTask(DeploymentTree self, Task task, Scheduler cloner) -> unsigned char"""
        return _pilot.DeploymentTree_appendTask(self, *args)

    def getNumberOfCTDefContainer(self):
        """getNumberOfCTDefContainer(DeploymentTree self) -> unsigned int"""
        return _pilot.DeploymentTree_getNumberOfCTDefContainer(self)

    def getNumberOfRTODefContainer(self):
        """getNumberOfRTODefContainer(DeploymentTree self) -> unsigned int"""
        return _pilot.DeploymentTree_getNumberOfRTODefContainer(self)

    def getNumberOfCTDefComponentInstances(self):
        """getNumberOfCTDefComponentInstances(DeploymentTree self) -> unsigned int"""
        return _pilot.DeploymentTree_getNumberOfCTDefComponentInstances(self)

    def getNumberOfRTODefComponentInstances(self):
        """getNumberOfRTODefComponentInstances(DeploymentTree self) -> unsigned int"""
        return _pilot.DeploymentTree_getNumberOfRTODefComponentInstances(self)

    def presenceOfDefaultContainer(self):
        """presenceOfDefaultContainer(DeploymentTree self) -> bool"""
        return _pilot.DeploymentTree_presenceOfDefaultContainer(self)

    def getAllContainers(self):
        """getAllContainers(DeploymentTree self) -> std::vector< YACS::ENGINE::Container *,std::allocator< YACS::ENGINE::Container * > >"""
        return _pilot.DeploymentTree_getAllContainers(self)

    def getAllCTDefContainers(self):
        """getAllCTDefContainers(DeploymentTree self) -> std::vector< YACS::ENGINE::Container *,std::allocator< YACS::ENGINE::Container * > >"""
        return _pilot.DeploymentTree_getAllCTDefContainers(self)

    def getAllRTODefContainers(self):
        """getAllRTODefContainers(DeploymentTree self) -> std::vector< YACS::ENGINE::Container *,std::allocator< YACS::ENGINE::Container * > >"""
        return _pilot.DeploymentTree_getAllRTODefContainers(self)

    def getTasksLinkedToComponent(self, *args):
        """getTasksLinkedToComponent(DeploymentTree self, ComponentInstance comp) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.DeploymentTree_getTasksLinkedToComponent(self, *args)

    def getTasksLinkedToContainer(self, *args):
        """getTasksLinkedToContainer(DeploymentTree self, Container cont) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.DeploymentTree_getTasksLinkedToContainer(self, *args)

    def getComponentsLinkedToContainer(self, *args):
        """getComponentsLinkedToContainer(DeploymentTree self, Container cont) -> std::vector< YACS::ENGINE::ComponentInstance *,std::allocator< YACS::ENGINE::ComponentInstance * > >"""
        return _pilot.DeploymentTree_getComponentsLinkedToContainer(self, *args)

    def isNull(self):
        """isNull(DeploymentTree self) -> bool"""
        return _pilot.DeploymentTree_isNull(self)

    def getFreeDeployableTasks(self):
        """getFreeDeployableTasks(DeploymentTree self) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.DeploymentTree_getFreeDeployableTasks(self)

    NULL_TASK = _pilot.DeploymentTree_NULL_TASK
    APPEND_OK = _pilot.DeploymentTree_APPEND_OK
    NULL_TREE = _pilot.DeploymentTree_NULL_TREE
    ALREADY_IN_TREE = _pilot.DeploymentTree_ALREADY_IN_TREE
    NOT_DEPLOYABLE_TASK = _pilot.DeploymentTree_NOT_DEPLOYABLE_TASK
    DEPLOYABLE_BUT_NOT_SPECIFIED = _pilot.DeploymentTree_DEPLOYABLE_BUT_NOT_SPECIFIED
    DUP_TASK_NOT_COMPATIBLE_WITH_EXISTING_TREE = _pilot.DeploymentTree_DUP_TASK_NOT_COMPATIBLE_WITH_EXISTING_TREE
DeploymentTree_swigregister = _pilot.DeploymentTree_swigregister
DeploymentTree_swigregister(DeploymentTree)

class Port(_object):
    """Proxy of C++ YACS::ENGINE::Port class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_Port
    __del__ = lambda self : None;
    def getNode(self):
        """getNode(Port self) -> Node"""
        return _pilot.Port_getNode(self)

    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(Port self) -> std::string"""
        return _pilot.Port_getNameOfTypeOfCurrentInstance(self)

    def getNumId(self):
        """getNumId(Port self) -> int"""
        return _pilot.Port_getNumId(self)

    def typeName(self):
        """typeName(Port self) -> std::string"""
        return _pilot.Port_typeName(self)

    def modified(self):
        """modified(Port self)"""
        return _pilot.Port_modified(self)

    def __cmp__(self, *args):
        """__cmp__(Port self, Port other) -> int"""
        return _pilot.Port___cmp__(self, *args)

    def ptr(self):
        """ptr(Port self) -> long"""
        return _pilot.Port_ptr(self)

Port_swigregister = _pilot.Port_swigregister
Port_swigregister(Port)

DATAFLOW = _pilot.DATAFLOW
DATASTREAM = _pilot.DATASTREAM
class DataPort(Port):
    """Proxy of C++ YACS::ENGINE::DataPort class"""
    __swig_setmethods__ = {}
    for _s in [Port]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPort, name, value)
    __swig_getmethods__ = {}
    for _s in [Port]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def edGetType(self):
        """edGetType(DataPort self) -> TypeCode"""
        return _pilot.DataPort_edGetType(self)

    def edSetType(self, *args):
        """edSetType(DataPort self, TypeCode type)"""
        return _pilot.DataPort_edSetType(self, *args)

    def getName(self):
        """getName(DataPort self) -> std::string"""
        return _pilot.DataPort_getName(self)

    def setName(self, *args):
        """setName(DataPort self, std::string theName)"""
        return _pilot.DataPort_setName(self, *args)

    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(DataPort self) -> std::string"""
        return _pilot.DataPort_getNameOfTypeOfCurrentInstance(self)

    def getTypeOfChannel(self):
        """getTypeOfChannel(DataPort self) -> YACS::ENGINE::TypeOfChannel"""
        return _pilot.DataPort_getTypeOfChannel(self)

    def isDifferentTypeOf(self, *args):
        """isDifferentTypeOf(DataPort self, DataPort other) -> bool"""
        return _pilot.DataPort_isDifferentTypeOf(self, *args)

    def edRemoveAllLinksLinkedWithMe(self):
        """edRemoveAllLinksLinkedWithMe(DataPort self)"""
        return _pilot.DataPort_edRemoveAllLinksLinkedWithMe(self)

    def typeName(self):
        """typeName(DataPort self) -> std::string"""
        return _pilot.DataPort_typeName(self)

    def getAsString(self):
        """getAsString(DataPort self) -> std::string"""
        return _pilot.DataPort_getAsString(self)

    def isCrossingType(*args):
        """isCrossingType(std::vector< YACS::ENGINE::DataPort *,std::allocator< YACS::ENGINE::DataPort * > > const & historyOfLink) -> DataPort"""
        return _pilot.DataPort_isCrossingType(*args)

    if _newclass:isCrossingType = staticmethod(isCrossingType)
    __swig_getmethods__["isCrossingType"] = lambda x: isCrossingType
DataPort_swigregister = _pilot.DataPort_swigregister
DataPort_swigregister(DataPort)
DataPort.NAME = _pilot.cvar.DataPort_NAME

def DataPort_isCrossingType(*args):
  """DataPort_isCrossingType(std::vector< YACS::ENGINE::DataPort *,std::allocator< YACS::ENGINE::DataPort * > > const & historyOfLink) -> DataPort"""
  return _pilot.DataPort_isCrossingType(*args)

class InPort(DataPort):
    """Proxy of C++ YACS::ENGINE::InPort class"""
    __swig_setmethods__ = {}
    for _s in [DataPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getPublicRepresentant(self):
        """getPublicRepresentant(InPort self) -> InPort"""
        return _pilot.InPort_getPublicRepresentant(self)

    def edGetNumberOfLinks(self):
        """edGetNumberOfLinks(InPort self) -> int"""
        return _pilot.InPort_edGetNumberOfLinks(self)

    def edSetOutPort(self):
        """edSetOutPort(InPort self) -> std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > >"""
        return _pilot.InPort_edSetOutPort(self)

    __swig_destroy__ = _pilot.delete_InPort
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(InPort self) -> std::string"""
        return _pilot.InPort_typeName(self)

InPort_swigregister = _pilot.InPort_swigregister
InPort_swigregister(InPort)

class OutPort(DataPort):
    """Proxy of C++ YACS::ENGINE::OutPort class"""
    __swig_setmethods__ = {}
    for _s in [DataPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def checkConsistency(self, *args):
        """checkConsistency(OutPort self, LinkInfo info)"""
        return _pilot.OutPort_checkConsistency(self, *args)

    def edGetNumberOfOutLinks(self):
        """edGetNumberOfOutLinks(OutPort self) -> int"""
        return _pilot.OutPort_edGetNumberOfOutLinks(self)

    def edSetInPort(self):
        """edSetInPort(OutPort self) -> std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.OutPort_edSetInPort(self)

    def isAlreadyLinkedWith(self, *args):
        """isAlreadyLinkedWith(OutPort self, InPort with) -> bool"""
        return _pilot.OutPort_isAlreadyLinkedWith(self, *args)

    def getAllRepresented(self, *args):
        """getAllRepresented(OutPort self, std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > > & represented)"""
        return _pilot.OutPort_getAllRepresented(self, *args)

    def addInPort(self, *args):
        """addInPort(OutPort self, InPort inPort) -> bool"""
        return _pilot.OutPort_addInPort(self, *args)

    def removeInPort(self, *args):
        """removeInPort(OutPort self, InPort inPort, bool forward) -> int"""
        return _pilot.OutPort_removeInPort(self, *args)

    __swig_destroy__ = _pilot.delete_OutPort
    __del__ = lambda self : None;
    def calculateHistoryOfLinkWith(self, *args):
        """calculateHistoryOfLinkWith(OutPort self, InPort end) -> std::vector< YACS::ENGINE::DataPort *,std::allocator< YACS::ENGINE::DataPort * > >"""
        return _pilot.OutPort_calculateHistoryOfLinkWith(self, *args)

    def typeName(self):
        """typeName(OutPort self) -> std::string"""
        return _pilot.OutPort_typeName(self)

OutPort_swigregister = _pilot.OutPort_swigregister
OutPort_swigregister(OutPort)

class InGate(Port):
    """Proxy of C++ YACS::ENGINE::InGate class"""
    __swig_setmethods__ = {}
    for _s in [Port]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InGate, name, value)
    __swig_getmethods__ = {}
    for _s in [Port]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InGate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::InGate self, Node node) -> InGate"""
        this = _pilot.new_InGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_InGate
    __del__ = lambda self : None;
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(InGate self) -> std::string"""
        return _pilot.InGate_getNameOfTypeOfCurrentInstance(self)

    def exNotifyFromPrecursor(self, *args):
        """exNotifyFromPrecursor(InGate self, OutGate fromgate)"""
        return _pilot.InGate_exNotifyFromPrecursor(self, *args)

    def edMapOutGate(self):
        """edMapOutGate(InGate self) -> std::map< YACS::ENGINE::OutGate *,bool,std::less< YACS::ENGINE::OutGate * >,std::allocator< std::pair< YACS::ENGINE::OutGate *const,bool > > > &"""
        return _pilot.InGate_edMapOutGate(self)

    def edAppendPrecursor(self, *args):
        """edAppendPrecursor(InGate self, OutGate fromgate)"""
        return _pilot.InGate_edAppendPrecursor(self, *args)

    def edRemovePrecursor(self, *args):
        """edRemovePrecursor(InGate self, OutGate fromgate)"""
        return _pilot.InGate_edRemovePrecursor(self, *args)

    def getNumberOfBackLinks(self):
        """getNumberOfBackLinks(InGate self) -> int"""
        return _pilot.InGate_getNumberOfBackLinks(self)

    def edDisconnectAllLinksToMe(self):
        """edDisconnectAllLinksToMe(InGate self)"""
        return _pilot.InGate_edDisconnectAllLinksToMe(self)

    def exNotifyFailed(self):
        """exNotifyFailed(InGate self)"""
        return _pilot.InGate_exNotifyFailed(self)

    def exNotifyDisabled(self):
        """exNotifyDisabled(InGate self)"""
        return _pilot.InGate_exNotifyDisabled(self)

    def exReset(self):
        """exReset(InGate self)"""
        return _pilot.InGate_exReset(self)

    def exIsReady(self):
        """exIsReady(InGate self) -> bool"""
        return _pilot.InGate_exIsReady(self)

    def getBackLinks(self):
        """getBackLinks(InGate self) -> std::list< YACS::ENGINE::OutGate *,std::allocator< YACS::ENGINE::OutGate * > >"""
        return _pilot.InGate_getBackLinks(self)

    def setPrecursorDone(self, *args):
        """setPrecursorDone(InGate self, OutGate fromgate)"""
        return _pilot.InGate_setPrecursorDone(self, *args)

    def typeName(self):
        """typeName(InGate self) -> std::string"""
        return _pilot.InGate_typeName(self)

InGate_swigregister = _pilot.InGate_swigregister
InGate_swigregister(InGate)

class OutGate(Port):
    """Proxy of C++ YACS::ENGINE::OutGate class"""
    __swig_setmethods__ = {}
    for _s in [Port]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutGate, name, value)
    __swig_getmethods__ = {}
    for _s in [Port]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutGate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::OutGate self, Node node) -> OutGate"""
        this = _pilot.new_OutGate(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(OutGate self) -> std::string"""
        return _pilot.OutGate_getNameOfTypeOfCurrentInstance(self)

    def exReset(self):
        """exReset(OutGate self)"""
        return _pilot.OutGate_exReset(self)

    def exNotifyDone(self):
        """exNotifyDone(OutGate self)"""
        return _pilot.OutGate_exNotifyDone(self)

    def exNotifyFailed(self):
        """exNotifyFailed(OutGate self)"""
        return _pilot.OutGate_exNotifyFailed(self)

    def exNotifyDisabled(self):
        """exNotifyDisabled(OutGate self)"""
        return _pilot.OutGate_exNotifyDisabled(self)

    def edDisconnectAllLinksFromMe(self):
        """edDisconnectAllLinksFromMe(OutGate self)"""
        return _pilot.OutGate_edDisconnectAllLinksFromMe(self)

    def edAddInGate(self, *args):
        """edAddInGate(OutGate self, InGate inGate) -> bool"""
        return _pilot.OutGate_edAddInGate(self, *args)

    def edMapInGate(self):
        """edMapInGate(OutGate self) -> std::map< YACS::ENGINE::InGate *,bool,std::less< YACS::ENGINE::InGate * >,std::allocator< std::pair< YACS::ENGINE::InGate *const,bool > > > &"""
        return _pilot.OutGate_edMapInGate(self)

    def edSetInGate(self):
        """edSetInGate(OutGate self) -> std::set< YACS::ENGINE::InGate *,std::less< YACS::ENGINE::InGate * >,std::allocator< YACS::ENGINE::InGate * > >"""
        return _pilot.OutGate_edSetInGate(self)

    def edRemoveInGate(self, *args):
        """
        edRemoveInGate(OutGate self, InGate inGate, bool coherenceWithInGate=True)
        edRemoveInGate(OutGate self, InGate inGate)
        """
        return _pilot.OutGate_edRemoveInGate(self, *args)

    def getNbOfInGatesConnected(self):
        """getNbOfInGatesConnected(OutGate self) -> int"""
        return _pilot.OutGate_getNbOfInGatesConnected(self)

    def isAlreadyInSet(self, *args):
        """isAlreadyInSet(OutGate self, InGate inGate) -> bool"""
        return _pilot.OutGate_isAlreadyInSet(self, *args)

    def typeName(self):
        """typeName(OutGate self) -> std::string"""
        return _pilot.OutGate_typeName(self)

    __swig_destroy__ = _pilot.delete_OutGate
    __del__ = lambda self : None;
OutGate_swigregister = _pilot.OutGate_swigregister
OutGate_swigregister(OutGate)
OutGate.NAME = _pilot.cvar.OutGate_NAME

class DataFlowPort(DataPort):
    """Proxy of C++ YACS::ENGINE::DataFlowPort class"""
    __swig_setmethods__ = {}
    for _s in [DataPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataFlowPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataFlowPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(DataFlowPort self) -> std::string"""
        return _pilot.DataFlowPort_getNameOfTypeOfCurrentInstance(self)

    def getTypeOfChannel(self):
        """getTypeOfChannel(DataFlowPort self) -> YACS::ENGINE::TypeOfChannel"""
        return _pilot.DataFlowPort_getTypeOfChannel(self)

    __swig_destroy__ = _pilot.delete_DataFlowPort
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(DataFlowPort self) -> std::string"""
        return _pilot.DataFlowPort_typeName(self)

    def valToStr(self):
        """valToStr(DataFlowPort self) -> std::string"""
        return _pilot.DataFlowPort_valToStr(self)

    def valFromStr(self, *args):
        """valFromStr(DataFlowPort self, std::string valstr)"""
        return _pilot.DataFlowPort_valFromStr(self, *args)

DataFlowPort_swigregister = _pilot.DataFlowPort_swigregister
DataFlowPort_swigregister(DataFlowPort)
DataFlowPort.NAME = _pilot.cvar.DataFlowPort_NAME

class DataStreamPort(DataPort):
    """Proxy of C++ YACS::ENGINE::DataStreamPort class"""
    __swig_setmethods__ = {}
    for _s in [DataPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataStreamPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataStreamPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(DataStreamPort self) -> std::string"""
        return _pilot.DataStreamPort_getNameOfTypeOfCurrentInstance(self)

    def getTypeOfChannel(self):
        """getTypeOfChannel(DataStreamPort self) -> YACS::ENGINE::TypeOfChannel"""
        return _pilot.DataStreamPort_getTypeOfChannel(self)

    def setProperty(self, *args):
        """setProperty(DataStreamPort self, std::string const & name, std::string const & value)"""
        return _pilot.DataStreamPort_setProperty(self, *args)

    def setProperties(self, *args):
        """setProperties(DataStreamPort self, propmap properties)"""
        return _pilot.DataStreamPort_setProperties(self, *args)

    def getProperty(self, *args):
        """getProperty(DataStreamPort self, std::string const & name) -> std::string"""
        return _pilot.DataStreamPort_getProperty(self, *args)

    def getProperties(self):
        """getProperties(DataStreamPort self) -> propmap"""
        return _pilot.DataStreamPort_getProperties(self)

    def initPortProperties(self):
        """initPortProperties(DataStreamPort self)"""
        return _pilot.DataStreamPort_initPortProperties(self)

    __swig_destroy__ = _pilot.delete_DataStreamPort
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(DataStreamPort self) -> std::string"""
        return _pilot.DataStreamPort_typeName(self)

DataStreamPort_swigregister = _pilot.DataStreamPort_swigregister
DataStreamPort_swigregister(DataStreamPort)
DataStreamPort.NAME = _pilot.cvar.DataStreamPort_NAME

I_CF_USELESS = _pilot.I_CF_USELESS
I_USELESS = _pilot.I_USELESS
I_BACK = _pilot.I_BACK
I_BACK_USELESS = _pilot.I_BACK_USELESS
I_BACK_CRAZY = _pilot.I_BACK_CRAZY
I_DFDS = _pilot.I_DFDS
I_ALL = _pilot.I_ALL
W_COLLAPSE = _pilot.W_COLLAPSE
W_COLLAPSE_AND_USELESS = _pilot.W_COLLAPSE_AND_USELESS
W_COLLAPSE_EL = _pilot.W_COLLAPSE_EL
W_COLLAPSE_EL_AND_USELESS = _pilot.W_COLLAPSE_EL_AND_USELESS
W_BACK_COLLAPSE = _pilot.W_BACK_COLLAPSE
W_BACK_COLLAPSE_AND_USELESS = _pilot.W_BACK_COLLAPSE_AND_USELESS
W_BACK_COLLAPSE_EL = _pilot.W_BACK_COLLAPSE_EL
W_BACK_COLLAPSE_EL_AND_USELESS = _pilot.W_BACK_COLLAPSE_EL_AND_USELESS
W_ALL = _pilot.W_ALL
E_NEVER_SET_INPUTPORT = _pilot.E_NEVER_SET_INPUTPORT
E_ONLY_BACKWARD_DEFINED = _pilot.E_ONLY_BACKWARD_DEFINED
E_DS_LINK_UNESTABLISHABLE = _pilot.E_DS_LINK_UNESTABLISHABLE
E_COLLAPSE_DFDS = _pilot.E_COLLAPSE_DFDS
E_COLLAPSE_DS = _pilot.E_COLLAPSE_DS
E_UNPREDICTABLE_FED = _pilot.E_UNPREDICTABLE_FED
E_UNCOMPLETE_SW = _pilot.E_UNCOMPLETE_SW
E_ALL = _pilot.E_ALL
class LinkInfo(_object):
    """Proxy of C++ YACS::ENGINE::LinkInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinkInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::LinkInfo self, unsigned char level) -> LinkInfo"""
        this = _pilot.new_LinkInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def clearAll(self):
        """clearAll(LinkInfo self)"""
        return _pilot.LinkInfo_clearAll(self)

    def startCollapseTransac(self):
        """startCollapseTransac(LinkInfo self)"""
        return _pilot.LinkInfo_startCollapseTransac(self)

    def endCollapseTransac(self):
        """endCollapseTransac(LinkInfo self)"""
        return _pilot.LinkInfo_endCollapseTransac(self)

    def setPointOfView(self, *args):
        """setPointOfView(LinkInfo self, ComposedNode pov)"""
        return _pilot.LinkInfo_setPointOfView(self, *args)

    def pushInfoLink(self, *args):
        """pushInfoLink(LinkInfo self, OutPort semStart, InPort end, YACS::ENGINE::InfoReason reason)"""
        return _pilot.LinkInfo_pushInfoLink(self, *args)

    def pushWarnLink(self, *args):
        """pushWarnLink(LinkInfo self, OutPort semStart, InPort end, YACS::ENGINE::WarnReason reason)"""
        return _pilot.LinkInfo_pushWarnLink(self, *args)

    def pushErrLink(self, *args):
        """pushErrLink(LinkInfo self, OutPort semStart, InPort end, YACS::ENGINE::ErrReason reason)"""
        return _pilot.LinkInfo_pushErrLink(self, *args)

    def pushErrSwitch(self, *args):
        """pushErrSwitch(LinkInfo self, CollectorSwOutPort collector)"""
        return _pilot.LinkInfo_pushErrSwitch(self, *args)

    def pushUselessCFLink(self, *args):
        """pushUselessCFLink(LinkInfo self, Node start, Node end)"""
        return _pilot.LinkInfo_pushUselessCFLink(self, *args)

    def takeDecision(self):
        """takeDecision(LinkInfo self)"""
        return _pilot.LinkInfo_takeDecision(self)

    def getGlobalRepr(self):
        """getGlobalRepr(LinkInfo self) -> std::string"""
        return _pilot.LinkInfo_getGlobalRepr(self)

    def getInfoRepr(self):
        """getInfoRepr(LinkInfo self) -> std::string"""
        return _pilot.LinkInfo_getInfoRepr(self)

    def getWarnRepr(self):
        """getWarnRepr(LinkInfo self) -> std::string"""
        return _pilot.LinkInfo_getWarnRepr(self)

    def getErrRepr(self):
        """getErrRepr(LinkInfo self) -> std::string"""
        return _pilot.LinkInfo_getErrRepr(self)

    def areWarningsOrErrors(self):
        """areWarningsOrErrors(LinkInfo self) -> bool"""
        return _pilot.LinkInfo_areWarningsOrErrors(self)

    def getNumberOfInfoLinks(self, *args):
        """getNumberOfInfoLinks(LinkInfo self, YACS::ENGINE::InfoReason reason) -> unsigned int"""
        return _pilot.LinkInfo_getNumberOfInfoLinks(self, *args)

    def getNumberOfWarnLinksGrp(self, *args):
        """getNumberOfWarnLinksGrp(LinkInfo self, YACS::ENGINE::WarnReason reason) -> unsigned int"""
        return _pilot.LinkInfo_getNumberOfWarnLinksGrp(self, *args)

    def getNumberOfErrLinks(self, *args):
        """getNumberOfErrLinks(LinkInfo self, YACS::ENGINE::ErrReason reason) -> unsigned int"""
        return _pilot.LinkInfo_getNumberOfErrLinks(self, *args)

    def getInfoUselessLinks(self):
        """getInfoUselessLinks(LinkInfo self) -> std::set< std::pair< YACS::ENGINE::Node *,YACS::ENGINE::Node * >,std::less< std::pair< YACS::ENGINE::Node *,YACS::ENGINE::Node * > >,std::allocator< std::pair< YACS::ENGINE::Node *,YACS::ENGINE::Node * > > >"""
        return _pilot.LinkInfo_getInfoUselessLinks(self)

    def getInfoLink(self, *args):
        """getInfoLink(LinkInfo self, unsigned int id, YACS::ENGINE::InfoReason reason) -> std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * >"""
        return _pilot.LinkInfo_getInfoLink(self, *args)

    def getWarnLink(self, *args):
        """getWarnLink(LinkInfo self, unsigned int id, YACS::ENGINE::WarnReason reason) -> linksvec"""
        return _pilot.LinkInfo_getWarnLink(self, *args)

    def getErrLink(self, *args):
        """getErrLink(LinkInfo self, unsigned int id, YACS::ENGINE::ErrReason reason) -> std::pair< YACS::ENGINE::OutPort *,YACS::ENGINE::InPort * >"""
        return _pilot.LinkInfo_getErrLink(self, *args)

    ALL_STOP_ASAP = _pilot.LinkInfo_ALL_STOP_ASAP
    ALL_DONT_STOP = _pilot.LinkInfo_ALL_DONT_STOP
    WARN_ONLY_DONT_STOP = _pilot.LinkInfo_WARN_ONLY_DONT_STOP
    __swig_destroy__ = _pilot.delete_LinkInfo
    __del__ = lambda self : None;
LinkInfo_swigregister = _pilot.LinkInfo_swigregister
LinkInfo_swigregister(LinkInfo)

class Logger(_object):
    """Proxy of C++ YACS::ENGINE::Logger class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::Logger self, std::string const & name) -> Logger"""
        this = _pilot.new_Logger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Logger
    __del__ = lambda self : None;
    def getName(self):
        """getName(Logger self) -> std::string const &"""
        return _pilot.Logger_getName(self)

    def log(self, *args):
        """log(Logger self, int level, std::string const & message, char const * filename, int line)"""
        return _pilot.Logger_log(self, *args)

    def error(self, *args):
        """error(Logger self, std::string const & message, char const * filename, int line)"""
        return _pilot.Logger_error(self, *args)

    def fatal(self, *args):
        """fatal(Logger self, std::string const & message, char const * filename, int line)"""
        return _pilot.Logger_fatal(self, *args)

    def warning(self, *args):
        """warning(Logger self, std::string const & message, char const * filename, int line)"""
        return _pilot.Logger_warning(self, *args)

    def makeRecord(self, *args):
        """
        makeRecord(Logger self, std::string const & name, int level, std::string const & message, char const * filename, 
            int line) -> YACS::ENGINE::LogRecord *
        """
        return _pilot.Logger_makeRecord(self, *args)

    def handle(self, *args):
        """handle(Logger self, YACS::ENGINE::LogRecord * record)"""
        return _pilot.Logger_handle(self, *args)

    def reset(self):
        """reset(Logger self)"""
        return _pilot.Logger_reset(self)

    def getStr(self):
        """getStr(Logger self) -> std::string"""
        return _pilot.Logger_getStr(self)

    def isEmpty(self):
        """isEmpty(Logger self) -> bool"""
        return _pilot.Logger_isEmpty(self)

    def hasErrors(self):
        """hasErrors(Logger self) -> bool"""
        return _pilot.Logger_hasErrors(self)

Logger_swigregister = _pilot.Logger_swigregister
Logger_swigregister(Logger)

class ComponentInstance(PropertyInterface,RefCounter):
    """Proxy of C++ YACS::ENGINE::ComponentInstance class"""
    __swig_setmethods__ = {}
    for _s in [PropertyInterface,RefCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyInterface,RefCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentInstance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_ComponentInstance
    __del__ = lambda self : None;
    def getCompoName(self):
        """getCompoName(ComponentInstance self) -> std::string const &"""
        return _pilot.ComponentInstance_getCompoName(self)

    def getInstanceName(self):
        """getInstanceName(ComponentInstance self) -> std::string const &"""
        return _pilot.ComponentInstance_getInstanceName(self)

    def setName(self, *args):
        """setName(ComponentInstance self, std::string const & name)"""
        return _pilot.ComponentInstance_setName(self, *args)

    def setAnonymous(self, *args):
        """setAnonymous(ComponentInstance self, bool anon)"""
        return _pilot.ComponentInstance_setAnonymous(self, *args)

    def isAnonymous(self):
        """isAnonymous(ComponentInstance self) -> bool"""
        return _pilot.ComponentInstance_isAnonymous(self)

    def getNumId(self):
        """getNumId(ComponentInstance self) -> int"""
        return _pilot.ComponentInstance_getNumId(self)

    def setContainer(self, *args):
        """setContainer(ComponentInstance self, Container cont)"""
        return _pilot.ComponentInstance_setContainer(self, *args)

    def getContainer(self):
        """getContainer(ComponentInstance self) -> Container"""
        return _pilot.ComponentInstance_getContainer(self)

    def load(self):
        """load(ComponentInstance self)"""
        return _pilot.ComponentInstance_load(self)

    def unload(self):
        """unload(ComponentInstance self)"""
        return _pilot.ComponentInstance_unload(self)

    def isLoaded(self):
        """isLoaded(ComponentInstance self) -> bool"""
        return _pilot.ComponentInstance_isLoaded(self)

    def attachOnCloning(self):
        """attachOnCloning(ComponentInstance self)"""
        return _pilot.ComponentInstance_attachOnCloning(self)

    def dettachOnCloning(self):
        """dettachOnCloning(ComponentInstance self)"""
        return _pilot.ComponentInstance_dettachOnCloning(self)

    def isAttachedOnCloning(self):
        """isAttachedOnCloning(ComponentInstance self) -> bool"""
        return _pilot.ComponentInstance_isAttachedOnCloning(self)

    def getFileRepr(self):
        """getFileRepr(ComponentInstance self) -> std::string"""
        return _pilot.ComponentInstance_getFileRepr(self)

    def createNode(self, *args):
        """createNode(ComponentInstance self, std::string const & name) -> ServiceNode"""
        return _pilot.ComponentInstance_createNode(self, *args)

    def clone(self):
        """clone(ComponentInstance self) -> ComponentInstance"""
        return _pilot.ComponentInstance_clone(self)

    def getKind(self):
        """getKind(ComponentInstance self) -> std::string"""
        return _pilot.ComponentInstance_getKind(self)

    def shutdown(self, *args):
        """shutdown(ComponentInstance self, int level)"""
        return _pilot.ComponentInstance_shutdown(self, *args)

ComponentInstance_swigregister = _pilot.ComponentInstance_swigregister
ComponentInstance_swigregister(ComponentInstance)
ComponentInstance.KIND = _pilot.cvar.ComponentInstance_KIND

class Container(RefCounter):
    """Proxy of C++ YACS::ENGINE::Container class"""
    __swig_setmethods__ = {}
    for _s in [RefCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isAlreadyStarted(self, *args):
        """isAlreadyStarted(Container self, ComponentInstance inst) -> bool"""
        return _pilot.Container_isAlreadyStarted(self, *args)

    def start(self, *args):
        """start(Container self, ComponentInstance inst)"""
        return _pilot.Container_start(self, *args)

    def getPlacementId(self, *args):
        """getPlacementId(Container self, ComponentInstance inst) -> std::string"""
        return _pilot.Container_getPlacementId(self, *args)

    def getFullPlacementId(self, *args):
        """getFullPlacementId(Container self, ComponentInstance inst) -> std::string"""
        return _pilot.Container_getFullPlacementId(self, *args)

    def attachOnCloning(self):
        """attachOnCloning(Container self)"""
        return _pilot.Container_attachOnCloning(self)

    def dettachOnCloning(self):
        """dettachOnCloning(Container self)"""
        return _pilot.Container_dettachOnCloning(self)

    def isAttachedOnCloning(self):
        """isAttachedOnCloning(Container self) -> bool"""
        return _pilot.Container_isAttachedOnCloning(self)

    def clone(self):
        """clone(Container self) -> Container"""
        return _pilot.Container_clone(self)

    def isSupportingRTODefNbOfComp(self):
        """isSupportingRTODefNbOfComp(Container self) -> bool"""
        return _pilot.Container_isSupportingRTODefNbOfComp(self)

    def checkCapabilityToDealWith(self, *args):
        """checkCapabilityToDealWith(Container self, ComponentInstance inst)"""
        return _pilot.Container_checkCapabilityToDealWith(self, *args)

    def setProperty(self, *args):
        """setProperty(Container self, std::string const & name, std::string const & value)"""
        return _pilot.Container_setProperty(self, *args)

    def getProperty(self, *args):
        """getProperty(Container self, std::string const & name) -> std::string"""
        return _pilot.Container_getProperty(self, *args)

    def getProperties(self):
        """getProperties(Container self) -> propmap"""
        return _pilot.Container_getProperties(self)

    def setProperties(self, *args):
        """setProperties(Container self, propmap properties)"""
        return _pilot.Container_setProperties(self, *args)

    def getName(self):
        """getName(Container self) -> std::string"""
        return _pilot.Container_getName(self)

    def setName(self, *args):
        """setName(Container self, std::string name)"""
        return _pilot.Container_setName(self, *args)

    def setProc(self, *args):
        """setProc(Container self, Proc proc)"""
        return _pilot.Container_setProc(self, *args)

    def getProc(self):
        """getProc(Container self) -> Proc"""
        return _pilot.Container_getProc(self)

    def shutdown(self, *args):
        """shutdown(Container self, int level)"""
        return _pilot.Container_shutdown(self, *args)

    def getResourceProperties(self, *args):
        """getResourceProperties(Container self, std::string const & name) -> propmap"""
        return _pilot.Container_getResourceProperties(self, *args)

    __swig_destroy__ = _pilot.delete_Container
    __del__ = lambda self : None;
Container_swigregister = _pilot.Container_swigregister
Container_swigregister(Container)

class InputPort(DataFlowPort,InPort):
    """Proxy of C++ YACS::ENGINE::InputPort class"""
    __swig_setmethods__ = {}
    for _s in [DataFlowPort,InPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataFlowPort,InPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_InputPort
    __del__ = lambda self : None;
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(InputPort self) -> std::string"""
        return _pilot.InputPort_getNameOfTypeOfCurrentInstance(self)

    def getPublicRepresentant(self):
        """getPublicRepresentant(InputPort self) -> InputPort"""
        return _pilot.InputPort_getPublicRepresentant(self)

    def isIntermediate(self):
        """isIntermediate(InputPort self) -> bool"""
        return _pilot.InputPort_isIntermediate(self)

    def edIsManuallyInitialized(self):
        """edIsManuallyInitialized(InputPort self) -> bool"""
        return _pilot.InputPort_edIsManuallyInitialized(self)

    def edIsInitialized(self):
        """edIsInitialized(InputPort self) -> bool"""
        return _pilot.InputPort_edIsInitialized(self)

    def edInit(self, *args):
        """
        edInit(InputPort self, Any value)
        edInit(InputPort self, std::string const & impl, void const * value)
        """
        return _pilot.InputPort_edInit(self, *args)

    def edRemoveManInit(self):
        """edRemoveManInit(InputPort self)"""
        return _pilot.InputPort_edRemoveManInit(self)

    def checkBasicConsistency(self):
        """checkBasicConsistency(InputPort self)"""
        return _pilot.InputPort_checkBasicConsistency(self)

    def exInit(self, *args):
        """exInit(InputPort self, bool start)"""
        return _pilot.InputPort_exInit(self, *args)

    def exSaveInit(self):
        """exSaveInit(InputPort self)"""
        return _pilot.InputPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(InputPort self)"""
        return _pilot.InputPort_exRestoreInit(self)

    def clone(self, *args):
        """clone(InputPort self, Node newHelder) -> InputPort"""
        return _pilot.InputPort_clone(self, *args)

    def isEmpty(self):
        """isEmpty(InputPort self) -> bool"""
        return _pilot.InputPort_isEmpty(self)

    def get(self):
        """get(InputPort self) -> void *"""
        return _pilot.InputPort_get(self)

    def put(self, *args):
        """put(InputPort self, void const * data)"""
        return _pilot.InputPort_put(self, *args)

    def dump(self):
        """dump(InputPort self) -> std::string"""
        return _pilot.InputPort_dump(self)

    def setStringRef(self, *args):
        """setStringRef(InputPort self, std::string strRef)"""
        return _pilot.InputPort_setStringRef(self, *args)

    def typeName(self):
        """typeName(InputPort self) -> std::string"""
        return _pilot.InputPort_typeName(self)

    def canBeNull(self):
        """canBeNull(InputPort self) -> bool"""
        return _pilot.InputPort_canBeNull(self)

    def edInitXML(self, *args):
        """edInitXML(InputPort self, char const * s)"""
        return _pilot.InputPort_edInitXML(self, *args)

    def edInitPy(self, *args):
        """edInitPy(InputPort self, PyObject * ob)"""
        return _pilot.InputPort_edInitPy(self, *args)

    def edInitInt(self, *args):
        """edInitInt(InputPort self, int value)"""
        return _pilot.InputPort_edInitInt(self, *args)

    def edInitBool(self, *args):
        """edInitBool(InputPort self, bool value)"""
        return _pilot.InputPort_edInitBool(self, *args)

    def edInitString(self, *args):
        """edInitString(InputPort self, std::string value)"""
        return _pilot.InputPort_edInitString(self, *args)

    def edInitDbl(self, *args):
        """edInitDbl(InputPort self, double value)"""
        return _pilot.InputPort_edInitDbl(self, *args)

InputPort_swigregister = _pilot.InputPort_swigregister
InputPort_swigregister(InputPort)
InputPort.NAME = _pilot.cvar.InputPort_NAME

class ProxyPort(InputPort):
    """Proxy of C++ YACS::ENGINE::ProxyPort class"""
    __swig_setmethods__ = {}
    for _s in [InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyPort, name, value)
    __swig_getmethods__ = {}
    for _s in [InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::ProxyPort self, InputPort p) -> ProxyPort"""
        this = _pilot.new_ProxyPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_ProxyPort
    __del__ = lambda self : None;
    def edRemoveAllLinksLinkedWithMe(self):
        """edRemoveAllLinksLinkedWithMe(ProxyPort self)"""
        return _pilot.ProxyPort_edRemoveAllLinksLinkedWithMe(self)

    def clone(self, *args):
        """clone(ProxyPort self, Node newHelder) -> InputPort"""
        return _pilot.ProxyPort_clone(self, *args)

    def edNotifyReferencedBy(self, *args):
        """edNotifyReferencedBy(ProxyPort self, OutPort fromPort)"""
        return _pilot.ProxyPort_edNotifyReferencedBy(self, *args)

    def edNotifyDereferencedBy(self, *args):
        """edNotifyDereferencedBy(ProxyPort self, OutPort fromPort)"""
        return _pilot.ProxyPort_edNotifyDereferencedBy(self, *args)

    def edSetOutPort(self):
        """edSetOutPort(ProxyPort self) -> std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > >"""
        return _pilot.ProxyPort_edSetOutPort(self)

    def getPublicRepresentant(self):
        """getPublicRepresentant(ProxyPort self) -> InputPort"""
        return _pilot.ProxyPort_getPublicRepresentant(self)

    def get(self):
        """get(ProxyPort self) -> void *"""
        return _pilot.ProxyPort_get(self)

    def put(self, *args):
        """put(ProxyPort self, void const * data)"""
        return _pilot.ProxyPort_put(self, *args)

    def edGetNumberOfLinks(self):
        """edGetNumberOfLinks(ProxyPort self) -> int"""
        return _pilot.ProxyPort_edGetNumberOfLinks(self)

    def isIntermediate(self):
        """isIntermediate(ProxyPort self) -> bool"""
        return _pilot.ProxyPort_isIntermediate(self)

    def exRestoreInit(self):
        """exRestoreInit(ProxyPort self)"""
        return _pilot.ProxyPort_exRestoreInit(self)

    def exSaveInit(self):
        """exSaveInit(ProxyPort self)"""
        return _pilot.ProxyPort_exSaveInit(self)

    def getAllRepresentants(self, *args):
        """getAllRepresentants(ProxyPort self, std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > > & repr)"""
        return _pilot.ProxyPort_getAllRepresentants(self, *args)

    def typeName(self):
        """typeName(ProxyPort self) -> std::string"""
        return _pilot.ProxyPort_typeName(self)

ProxyPort_swigregister = _pilot.ProxyPort_swigregister
ProxyPort_swigregister(ProxyPort)

class InPropertyPort(InputPort):
    """Proxy of C++ YACS::ENGINE::InPropertyPort class"""
    __swig_setmethods__ = {}
    for _s in [InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InPropertyPort, name, value)
    __swig_getmethods__ = {}
    for _s in [InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InPropertyPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_InPropertyPort
    __del__ = lambda self : None;
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(InPropertyPort self) -> std::string"""
        return _pilot.InPropertyPort_getNameOfTypeOfCurrentInstance(self)

    def getPublicRepresentant(self):
        """getPublicRepresentant(InPropertyPort self) -> InPropertyPort"""
        return _pilot.InPropertyPort_getPublicRepresentant(self)

    def typeName(self):
        """typeName(InPropertyPort self) -> std::string"""
        return _pilot.InPropertyPort_typeName(self)

    def exNewPropertyValue(self, *args):
        """exNewPropertyValue(InPropertyPort self, std::string const & name, std::string const & value)"""
        return _pilot.InPropertyPort_exNewPropertyValue(self, *args)

    def exSaveInit(self):
        """exSaveInit(InPropertyPort self)"""
        return _pilot.InPropertyPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(InPropertyPort self)"""
        return _pilot.InPropertyPort_exRestoreInit(self)

    def clone(self, *args):
        """clone(InPropertyPort self, Node newHelder) -> InPropertyPort"""
        return _pilot.InPropertyPort_clone(self, *args)

    def get(self):
        """get(InPropertyPort self) -> void *"""
        return _pilot.InPropertyPort_get(self)

    def put(self, *args):
        """
        put(InPropertyPort self, void const * data)
        put(InPropertyPort self, Any data)
        """
        return _pilot.InPropertyPort_put(self, *args)

    def edInitXML(self, *args):
        """edInitXML(InPropertyPort self, char const * s)"""
        return _pilot.InPropertyPort_edInitXML(self, *args)

    def edInitPy(self, *args):
        """edInitPy(InPropertyPort self, PyObject * ob)"""
        return _pilot.InPropertyPort_edInitPy(self, *args)

InPropertyPort_swigregister = _pilot.InPropertyPort_swigregister
InPropertyPort_swigregister(InPropertyPort)
InPropertyPort.NAME = _pilot.cvar.InPropertyPort_NAME

class AnyInputPort(InputPort):
    """Proxy of C++ YACS::ENGINE::AnyInputPort class"""
    __swig_setmethods__ = {}
    for _s in [InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnyInputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnyInputPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::AnyInputPort self, std::string const & name, Node node, TypeCode type, bool canBeNull=False) -> AnyInputPort
        __init__(YACS::ENGINE::AnyInputPort self, std::string const & name, Node node, TypeCode type) -> AnyInputPort
        __init__(YACS::ENGINE::AnyInputPort self, AnyInputPort other, Node newHelder) -> AnyInputPort
        """
        this = _pilot.new_AnyInputPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_AnyInputPort
    __del__ = lambda self : None;
    def exSaveInit(self):
        """exSaveInit(AnyInputPort self)"""
        return _pilot.AnyInputPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(AnyInputPort self)"""
        return _pilot.AnyInputPort_exRestoreInit(self)

    def getValue(self):
        """getValue(AnyInputPort self) -> Any"""
        return _pilot.AnyInputPort_getValue(self)

    def getIntValue(self):
        """getIntValue(AnyInputPort self) -> int"""
        return _pilot.AnyInputPort_getIntValue(self)

    def get(self):
        """get(AnyInputPort self) -> void *"""
        return _pilot.AnyInputPort_get(self)

    def getAsString(self):
        """getAsString(AnyInputPort self) -> std::string"""
        return _pilot.AnyInputPort_getAsString(self)

    def isEmpty(self):
        """isEmpty(AnyInputPort self) -> bool"""
        return _pilot.AnyInputPort_isEmpty(self)

    def put(self, *args):
        """
        put(AnyInputPort self, Any data)
        put(AnyInputPort self, void const * data)
        """
        return _pilot.AnyInputPort_put(self, *args)

    def clone(self, *args):
        """clone(AnyInputPort self, Node newHelder) -> InputPort"""
        return _pilot.AnyInputPort_clone(self, *args)

    def dump(self):
        """dump(AnyInputPort self) -> std::string"""
        return _pilot.AnyInputPort_dump(self)

    def typeName(self):
        """typeName(AnyInputPort self) -> std::string"""
        return _pilot.AnyInputPort_typeName(self)

    def getPyObj(self):
        """getPyObj(AnyInputPort self) -> PyObject *"""
        return _pilot.AnyInputPort_getPyObj(self)

AnyInputPort_swigregister = _pilot.AnyInputPort_swigregister
AnyInputPort_swigregister(AnyInputPort)

class ConditionInputPort(InputPort):
    """Proxy of C++ YACS::ENGINE::ConditionInputPort class"""
    __swig_setmethods__ = {}
    for _s in [InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionInputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionInputPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def exSaveInit(self):
        """exSaveInit(ConditionInputPort self)"""
        return _pilot.ConditionInputPort_exSaveInit(self)

    def exRestoreInit(self):
        """exRestoreInit(ConditionInputPort self)"""
        return _pilot.ConditionInputPort_exRestoreInit(self)

    def isLinkedOutOfScope(self):
        """isLinkedOutOfScope(ConditionInputPort self) -> bool"""
        return _pilot.ConditionInputPort_isLinkedOutOfScope(self)

    def edNotifyReferencedBy(self, *args):
        """edNotifyReferencedBy(ConditionInputPort self, OutPort fromPort)"""
        return _pilot.ConditionInputPort_edNotifyReferencedBy(self, *args)

    def edNotifyDereferencedBy(self, *args):
        """edNotifyDereferencedBy(ConditionInputPort self, OutPort fromPort)"""
        return _pilot.ConditionInputPort_edNotifyDereferencedBy(self, *args)

    def get(self):
        """get(ConditionInputPort self) -> void *"""
        return _pilot.ConditionInputPort_get(self)

    def put(self, *args):
        """
        put(ConditionInputPort self, void const * data)
        put(ConditionInputPort self, Any data)
        """
        return _pilot.ConditionInputPort_put(self, *args)

    def dump(self):
        """dump(ConditionInputPort self) -> std::string"""
        return _pilot.ConditionInputPort_dump(self)

    def getAsString(self):
        """getAsString(ConditionInputPort self) -> std::string"""
        return _pilot.ConditionInputPort_getAsString(self)

    def getValue(self):
        """getValue(ConditionInputPort self) -> bool"""
        return _pilot.ConditionInputPort_getValue(self)

    def typeName(self):
        """typeName(ConditionInputPort self) -> std::string"""
        return _pilot.ConditionInputPort_typeName(self)

    def getPyObj(self):
        """getPyObj(ConditionInputPort self) -> bool"""
        return _pilot.ConditionInputPort_getPyObj(self)

ConditionInputPort_swigregister = _pilot.ConditionInputPort_swigregister
ConditionInputPort_swigregister(ConditionInputPort)

class OutputPort(DataFlowPort,OutPort):
    """Proxy of C++ YACS::ENGINE::OutputPort class"""
    __swig_setmethods__ = {}
    for _s in [DataFlowPort,OutPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataFlowPort,OutPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_OutputPort
    __del__ = lambda self : None;
    def edSetInPort(self):
        """edSetInPort(OutputPort self) -> std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.OutputPort_edSetInPort(self)

    def isAlreadyLinkedWith(self, *args):
        """isAlreadyLinkedWith(OutputPort self, InPort with) -> bool"""
        return _pilot.OutputPort_isAlreadyLinkedWith(self, *args)

    def isAlreadyInSet(self, *args):
        """isAlreadyInSet(OutputPort self, InputPort inputPort) -> bool"""
        return _pilot.OutputPort_isAlreadyInSet(self, *args)

    def isConnected(self):
        """isConnected(OutputPort self) -> bool"""
        return _pilot.OutputPort_isConnected(self)

    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(OutputPort self) -> std::string"""
        return _pilot.OutputPort_getNameOfTypeOfCurrentInstance(self)

    def removeInPort(self, *args):
        """removeInPort(OutputPort self, InPort inPort, bool forward) -> int"""
        return _pilot.OutputPort_removeInPort(self, *args)

    def edAddInputPort(self, *args):
        """edAddInputPort(OutputPort self, InputPort phyPort) -> bool"""
        return _pilot.OutputPort_edAddInputPort(self, *args)

    def edAddInPropertyPort(self, *args):
        """edAddInPropertyPort(OutputPort self, InPropertyPort phyPort) -> bool"""
        return _pilot.OutputPort_edAddInPropertyPort(self, *args)

    def edRemoveInputPort(self, *args):
        """edRemoveInputPort(OutputPort self, InputPort inputPort, bool forward) -> int"""
        return _pilot.OutputPort_edRemoveInputPort(self, *args)

    def addInPort(self, *args):
        """addInPort(OutputPort self, InPort inPort) -> bool"""
        return _pilot.OutputPort_addInPort(self, *args)

    def edRemoveAllLinksLinkedWithMe(self):
        """edRemoveAllLinksLinkedWithMe(OutputPort self)"""
        return _pilot.OutputPort_edRemoveAllLinksLinkedWithMe(self)

    def exInit(self):
        """exInit(OutputPort self)"""
        return _pilot.OutputPort_exInit(self)

    def checkBasicConsistency(self):
        """checkBasicConsistency(OutputPort self)"""
        return _pilot.OutputPort_checkBasicConsistency(self)

    def clone(self, *args):
        """clone(OutputPort self, Node newHelder) -> OutputPort"""
        return _pilot.OutputPort_clone(self, *args)

    def dump(self):
        """dump(OutputPort self) -> std::string"""
        return _pilot.OutputPort_dump(self)

    def put(self, *args):
        """put(OutputPort self, void const * data)"""
        return _pilot.OutputPort_put(self, *args)

    def typeName(self):
        """typeName(OutputPort self) -> std::string"""
        return _pilot.OutputPort_typeName(self)

OutputPort_swigregister = _pilot.OutputPort_swigregister
OutputPort_swigregister(OutputPort)
OutputPort.NAME = _pilot.cvar.OutputPort_NAME

class AnyOutputPort(OutputPort):
    """Proxy of C++ YACS::ENGINE::AnyOutputPort class"""
    __swig_setmethods__ = {}
    for _s in [OutputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnyOutputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnyOutputPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::AnyOutputPort self, std::string const & name, Node node, TypeCode type) -> AnyOutputPort
        __init__(YACS::ENGINE::AnyOutputPort self, AnyOutputPort other, Node newHelder) -> AnyOutputPort
        """
        this = _pilot.new_AnyOutputPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_AnyOutputPort
    __del__ = lambda self : None;
    def setValue(self, *args):
        """setValue(AnyOutputPort self, Any data)"""
        return _pilot.AnyOutputPort_setValue(self, *args)

    def put(self, *args):
        """
        put(AnyOutputPort self, void const * data)
        put(AnyOutputPort self, Any data)
        """
        return _pilot.AnyOutputPort_put(self, *args)

    def getValue(self):
        """getValue(AnyOutputPort self) -> Any"""
        return _pilot.AnyOutputPort_getValue(self)

    def getAsString(self):
        """getAsString(AnyOutputPort self) -> std::string"""
        return _pilot.AnyOutputPort_getAsString(self)

    def typeName(self):
        """typeName(AnyOutputPort self) -> std::string"""
        return _pilot.AnyOutputPort_typeName(self)

    def getPyObj(self):
        """getPyObj(AnyOutputPort self) -> PyObject *"""
        return _pilot.AnyOutputPort_getPyObj(self)

AnyOutputPort_swigregister = _pilot.AnyOutputPort_swigregister
AnyOutputPort_swigregister(AnyOutputPort)

class InputDataStreamPort(DataStreamPort,InPort):
    """Proxy of C++ YACS::ENGINE::InputDataStreamPort class"""
    __swig_setmethods__ = {}
    for _s in [DataStreamPort,InPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputDataStreamPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataStreamPort,InPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputDataStreamPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::InputDataStreamPort self, InputDataStreamPort other, Node newHelder) -> InputDataStreamPort
        __init__(YACS::ENGINE::InputDataStreamPort self, std::string const & name, Node node, TypeCode type) -> InputDataStreamPort
        """
        this = _pilot.new_InputDataStreamPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_InputDataStreamPort
    __del__ = lambda self : None;
    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(InputDataStreamPort self) -> std::string"""
        return _pilot.InputDataStreamPort_getNameOfTypeOfCurrentInstance(self)

    def clone(self, *args):
        """clone(InputDataStreamPort self, Node newHelder) -> InputDataStreamPort"""
        return _pilot.InputDataStreamPort_clone(self, *args)

    def typeName(self):
        """typeName(InputDataStreamPort self) -> std::string"""
        return _pilot.InputDataStreamPort_typeName(self)

    def edAddOutputDataStreamPort(self, *args):
        """edAddOutputDataStreamPort(InputDataStreamPort self, OutputDataStreamPort port)"""
        return _pilot.InputDataStreamPort_edAddOutputDataStreamPort(self, *args)

    def getConnectedOutputDataStreamPort(self):
        """getConnectedOutputDataStreamPort(InputDataStreamPort self) -> std::set< YACS::ENGINE::OutputDataStreamPort *,std::less< YACS::ENGINE::OutputDataStreamPort * >,std::allocator< YACS::ENGINE::OutputDataStreamPort * > >"""
        return _pilot.InputDataStreamPort_getConnectedOutputDataStreamPort(self)

InputDataStreamPort_swigregister = _pilot.InputDataStreamPort_swigregister
InputDataStreamPort_swigregister(InputDataStreamPort)
InputDataStreamPort.NAME = _pilot.cvar.InputDataStreamPort_NAME

class OutputDataStreamPort(DataStreamPort,OutPort):
    """Proxy of C++ YACS::ENGINE::OutputDataStreamPort class"""
    __swig_setmethods__ = {}
    for _s in [DataStreamPort,OutPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputDataStreamPort, name, value)
    __swig_getmethods__ = {}
    for _s in [DataStreamPort,OutPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputDataStreamPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OutputDataStreamPort self, OutputDataStreamPort other, Node newHelder) -> OutputDataStreamPort
        __init__(YACS::ENGINE::OutputDataStreamPort self, std::string const & name, Node node, TypeCode type) -> OutputDataStreamPort
        """
        this = _pilot.new_OutputDataStreamPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_OutputDataStreamPort
    __del__ = lambda self : None;
    def clone(self, *args):
        """clone(OutputDataStreamPort self, Node newHelder) -> OutputDataStreamPort"""
        return _pilot.OutputDataStreamPort_clone(self, *args)

    def edSetInPort(self):
        """edSetInPort(OutputDataStreamPort self) -> std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.OutputDataStreamPort_edSetInPort(self)

    def isAlreadyLinkedWith(self, *args):
        """isAlreadyLinkedWith(OutputDataStreamPort self, InPort with) -> bool"""
        return _pilot.OutputDataStreamPort_isAlreadyLinkedWith(self, *args)

    def getNameOfTypeOfCurrentInstance(self):
        """getNameOfTypeOfCurrentInstance(OutputDataStreamPort self) -> std::string"""
        return _pilot.OutputDataStreamPort_getNameOfTypeOfCurrentInstance(self)

    def addInPort(self, *args):
        """addInPort(OutputDataStreamPort self, InPort inPort) -> bool"""
        return _pilot.OutputDataStreamPort_addInPort(self, *args)

    def edAddInputDataStreamPort(self, *args):
        """edAddInputDataStreamPort(OutputDataStreamPort self, InputDataStreamPort port) -> bool"""
        return _pilot.OutputDataStreamPort_edAddInputDataStreamPort(self, *args)

    def edRemoveInputDataStreamPort(self, *args):
        """edRemoveInputDataStreamPort(OutputDataStreamPort self, InputDataStreamPort inPort, bool forward) -> int"""
        return _pilot.OutputDataStreamPort_edRemoveInputDataStreamPort(self, *args)

    def edRemoveAllLinksLinkedWithMe(self):
        """edRemoveAllLinksLinkedWithMe(OutputDataStreamPort self)"""
        return _pilot.OutputDataStreamPort_edRemoveAllLinksLinkedWithMe(self)

    def removeInPort(self, *args):
        """removeInPort(OutputDataStreamPort self, InPort inPort, bool forward) -> int"""
        return _pilot.OutputDataStreamPort_removeInPort(self, *args)

    def typeName(self):
        """typeName(OutputDataStreamPort self) -> std::string"""
        return _pilot.OutputDataStreamPort_typeName(self)

OutputDataStreamPort_swigregister = _pilot.OutputDataStreamPort_swigregister
OutputDataStreamPort_swigregister(OutputDataStreamPort)
OutputDataStreamPort.NAME = _pilot.cvar.OutputDataStreamPort_NAME


def StateLoader(*args):
  """StateLoader(Node node, YACS::StatesForNode state)"""
  return _pilot.StateLoader(*args)
class NodeStateNameMap(_object):
    """Proxy of C++ YACS::ENGINE::NodeStateNameMap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeStateNameMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeStateNameMap, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(YACS::ENGINE::NodeStateNameMap self) -> NodeStateNameMap"""
        this = _pilot.new_NodeStateNameMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_NodeStateNameMap
    __del__ = lambda self : None;
NodeStateNameMap_swigregister = _pilot.NodeStateNameMap_swigregister
NodeStateNameMap_swigregister(NodeStateNameMap)

class Node(_object):
    """Proxy of C++ YACS::ENGINE::Node class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["_colour"] = _pilot.Node__colour_set
    __swig_getmethods__["_colour"] = _pilot.Node__colour_get
    if _newclass:_colour = _swig_property(_pilot.Node__colour_get, _pilot.Node__colour_set)
    __swig_destroy__ = _pilot.delete_Node
    __del__ = lambda self : None;
    def init(self, start=True):
        """
        init(Node self, bool start=True)
        init(Node self)
        """
        return _pilot.Node_init(self, start)

    def shutdown(self, *args):
        """shutdown(Node self, int level)"""
        return _pilot.Node_shutdown(self, *args)

    def resetState(self, *args):
        """resetState(Node self, int level)"""
        return _pilot.Node_resetState(self, *args)

    def clone(self, *args):
        """
        clone(Node self, ComposedNode father, bool editionOnly=True) -> Node
        clone(Node self, ComposedNode father) -> Node
        """
        return _pilot.Node_clone(self, *args)

    def setState(self, *args):
        """setState(Node self, YACS::StatesForNode theState)"""
        return _pilot.Node_setState(self, *args)

    def getState(self):
        """getState(Node self) -> YACS::StatesForNode"""
        return _pilot.Node_getState(self)

    def getEffectiveState(self, *args):
        """
        getEffectiveState(Node self) -> YACS::StatesForNode
        getEffectiveState(Node self, Node arg2) -> YACS::StatesForNode
        """
        return _pilot.Node_getEffectiveState(self, *args)

    def getColorState(self, *args):
        """getColorState(Node self, YACS::StatesForNode state) -> std::string"""
        return _pilot.Node_getColorState(self, *args)

    def getStateName(*args):
        """getStateName(YACS::StatesForNode state) -> std::string"""
        return _pilot.Node_getStateName(*args)

    if _newclass:getStateName = staticmethod(getStateName)
    __swig_getmethods__["getStateName"] = lambda x: getStateName
    def getInGate(self):
        """getInGate(Node self) -> InGate"""
        return _pilot.Node_getInGate(self)

    def getOutGate(self):
        """getOutGate(Node self) -> OutGate"""
        return _pilot.Node_getOutGate(self)

    def getName(self):
        """getName(Node self) -> std::string const &"""
        return _pilot.Node_getName(self)

    def setName(self, *args):
        """setName(Node self, std::string const & name)"""
        return _pilot.Node_setName(self, *args)

    def getFather(self):
        """getFather(Node self) -> ComposedNode"""
        return _pilot.Node_getFather(self)

    def getId(self):
        """getId(Node self) -> std::string const"""
        return _pilot.Node_getId(self)

    def exIsControlReady(self):
        """exIsControlReady(Node self) -> bool"""
        return _pilot.Node_exIsControlReady(self)

    def getOutNodes(self):
        """getOutNodes(Node self) -> std::set< YACS::ENGINE::Node *,std::less< YACS::ENGINE::Node * >,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.Node_getOutNodes(self)

    def writeDot(self, *args):
        """writeDot(Node self, std::ostream & os)"""
        return _pilot.Node_writeDot(self, *args)

    def exUpdateState(self):
        """exUpdateState(Node self)"""
        return _pilot.Node_exUpdateState(self)

    def exFailedState(self):
        """exFailedState(Node self)"""
        return _pilot.Node_exFailedState(self)

    def exDisabledState(self):
        """exDisabledState(Node self)"""
        return _pilot.Node_exDisabledState(self)

    def getReadyTasks(self, *args):
        """getReadyTasks(Node self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Node_getReadyTasks(self, *args)

    def getRecursiveConstituents(self):
        """getRecursiveConstituents(Node self) -> std::list< YACS::ENGINE::ElementaryNode *,std::allocator< YACS::ENGINE::ElementaryNode * > >"""
        return _pilot.Node_getRecursiveConstituents(self)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(Node self) -> int"""
        return _pilot.Node_getNumberOfInputPorts(self)

    def getNumberOfOutputPorts(self):
        """getNumberOfOutputPorts(Node self) -> int"""
        return _pilot.Node_getNumberOfOutputPorts(self)

    def getSetOfInPort(self):
        """getSetOfInPort(Node self) -> std::list< YACS::ENGINE::InPort *,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.Node_getSetOfInPort(self)

    def getSetOfOutPort(self):
        """getSetOfOutPort(Node self) -> std::list< YACS::ENGINE::OutPort *,std::allocator< YACS::ENGINE::OutPort * > >"""
        return _pilot.Node_getSetOfOutPort(self)

    def getSetOfInputPort(self):
        """getSetOfInputPort(Node self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.Node_getSetOfInputPort(self)

    def getSetOfOutputPort(self):
        """getSetOfOutputPort(Node self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.Node_getSetOfOutputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(Node self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.Node_getLocalInputPorts(self)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(Node self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.Node_getLocalOutputPorts(self)

    def edGetSetOfUnitializedInputPort(self):
        """edGetSetOfUnitializedInputPort(Node self) -> std::set< YACS::ENGINE::InputPort *,std::less< YACS::ENGINE::InputPort * >,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.Node_edGetSetOfUnitializedInputPort(self)

    def edAreAllInputPortInitialized(self):
        """edAreAllInputPortInitialized(Node self) -> bool"""
        return _pilot.Node_edAreAllInputPortInitialized(self)

    def getInPortName(self, *args):
        """getInPortName(Node self, InPort arg2) -> std::string"""
        return _pilot.Node_getInPortName(self, *args)

    def getOutPortName(self, *args):
        """getOutPortName(Node self, OutPort arg2) -> std::string"""
        return _pilot.Node_getOutPortName(self, *args)

    def getSetOfInputDataStreamPort(self):
        """getSetOfInputDataStreamPort(Node self) -> instreamlist"""
        return _pilot.Node_getSetOfInputDataStreamPort(self)

    def getSetOfOutputDataStreamPort(self):
        """getSetOfOutputDataStreamPort(Node self) -> outstreamlist"""
        return _pilot.Node_getSetOfOutputDataStreamPort(self)

    def getInPort(self, *args):
        """getInPort(Node self, std::string const & name) -> InPort"""
        return _pilot.Node_getInPort(self, *args)

    def getInPropertyPort(self):
        """getInPropertyPort(Node self) -> InPropertyPort"""
        return _pilot.Node_getInPropertyPort(self)

    def getOutPort(self, *args):
        """getOutPort(Node self, std::string const & name) -> OutPort"""
        return _pilot.Node_getOutPort(self, *args)

    def getAllOutPortsLeavingCurrentScope(self):
        """getAllOutPortsLeavingCurrentScope(Node self) -> std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > >"""
        return _pilot.Node_getAllOutPortsLeavingCurrentScope(self)

    def getAllInPortsComingFromOutsideOfCurrentScope(self):
        """getAllInPortsComingFromOutsideOfCurrentScope(Node self) -> std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.Node_getAllInPortsComingFromOutsideOfCurrentScope(self)

    def getSetOfLinksLeavingCurrentScope(self):
        """getSetOfLinksLeavingCurrentScope(Node self) -> linksvec"""
        return _pilot.Node_getSetOfLinksLeavingCurrentScope(self)

    def getSetOfLinksComingInCurrentScope(self):
        """getSetOfLinksComingInCurrentScope(Node self) -> linkvec"""
        return _pilot.Node_getSetOfLinksComingInCurrentScope(self)

    def getInputPort(self, *args):
        """getInputPort(Node self, std::string const & name) -> InputPort"""
        return _pilot.Node_getInputPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(Node self, std::string const & name) -> OutputPort"""
        return _pilot.Node_getOutputPort(self, *args)

    def getInputDataStreamPort(self, *args):
        """getInputDataStreamPort(Node self, std::string const & name) -> InputDataStreamPort"""
        return _pilot.Node_getInputDataStreamPort(self, *args)

    def getOutputDataStreamPort(self, *args):
        """getOutputDataStreamPort(Node self, std::string const & name) -> OutputDataStreamPort"""
        return _pilot.Node_getOutputDataStreamPort(self, *args)

    def getAllAscendanceOf(self, levelToStop=None):
        """
        getAllAscendanceOf(Node self, ComposedNode levelToStop=None) -> std::list< YACS::ENGINE::ComposedNode *,std::allocator< YACS::ENGINE::ComposedNode * > >
        getAllAscendanceOf(Node self) -> std::list< YACS::ENGINE::ComposedNode *,std::allocator< YACS::ENGINE::ComposedNode * > >
        """
        return _pilot.Node_getAllAscendanceOf(self, levelToStop)

    def __gt__(self, *args):
        """__gt__(Node self, Node other) -> bool"""
        return _pilot.Node___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(Node self, Node other) -> bool"""
        return _pilot.Node___lt__(self, *args)

    def getImplementation(self):
        """getImplementation(Node self) -> std::string"""
        return _pilot.Node_getImplementation(self)

    def getRootNode(self):
        """getRootNode(Node self) -> ComposedNode"""
        return _pilot.Node_getRootNode(self)

    def setProperty(self, *args):
        """setProperty(Node self, std::string const & name, std::string const & value)"""
        return _pilot.Node_setProperty(self, *args)

    def getProperty(self, *args):
        """getProperty(Node self, std::string const & name) -> std::string"""
        return _pilot.Node_getProperty(self, *args)

    def getProperties(self):
        """getProperties(Node self) -> propmap"""
        return _pilot.Node_getProperties(self)

    def getPropertyMap(self):
        """getPropertyMap(Node self) -> propmap"""
        return _pilot.Node_getPropertyMap(self)

    def setProperties(self, *args):
        """setProperties(Node self, propmap properties)"""
        return _pilot.Node_setProperties(self, *args)

    def getChildByName(self, *args):
        """getChildByName(Node self, std::string const & name) -> Node"""
        return _pilot.Node_getChildByName(self, *args)

    def getProc(self, *args):
        """
        getProc(Node self) -> Proc
        getProc(Node self) -> Proc
        """
        return _pilot.Node_getProc(self, *args)

    def accept(self, *args):
        """accept(Node self, Visitor visitor)"""
        return _pilot.Node_accept(self, *args)

    def getQualifiedName(self):
        """getQualifiedName(Node self) -> std::string"""
        return _pilot.Node_getQualifiedName(self)

    def getNumId(self):
        """getNumId(Node self) -> int"""
        return _pilot.Node_getNumId(self)

    def sendEvent(self, *args):
        """sendEvent(Node self, std::string const & event)"""
        return _pilot.Node_sendEvent(self, *args)

    __swig_setmethods__["idMap"] = _pilot.Node_idMap_set
    __swig_getmethods__["idMap"] = _pilot.Node_idMap_get
    if _newclass:idMap = _swig_property(_pilot.Node_idMap_get, _pilot.Node_idMap_set)
    def typeName(self):
        """typeName(Node self) -> std::string"""
        return _pilot.Node_typeName(self)

    def getErrorDetails(self):
        """getErrorDetails(Node self) -> std::string"""
        return _pilot.Node_getErrorDetails(self)

    def setErrorDetails(self, *args):
        """setErrorDetails(Node self, std::string const & error)"""
        return _pilot.Node_setErrorDetails(self, *args)

    def modified(self):
        """modified(Node self)"""
        return _pilot.Node_modified(self)

    def isModified(self):
        """isModified(Node self) -> int"""
        return _pilot.Node_isModified(self)

    def isValid(self):
        """isValid(Node self) -> int"""
        return _pilot.Node_isValid(self)

    def edUpdateState(self):
        """edUpdateState(Node self)"""
        return _pilot.Node_edUpdateState(self)

    def getErrorReport(self):
        """getErrorReport(Node self) -> std::string"""
        return _pilot.Node_getErrorReport(self)

    def getContainerLog(self):
        """getContainerLog(Node self) -> std::string"""
        return _pilot.Node_getContainerLog(self)

    def ensureLoading(self):
        """ensureLoading(Node self)"""
        return _pilot.Node_ensureLoading(self)

    def getCoupledNodes(self, *args):
        """getCoupledNodes(Node self, std::set< YACS::ENGINE::Task *,std::less< YACS::ENGINE::Task * >,std::allocator< YACS::ENGINE::Task * > > & coupledNodes)"""
        return _pilot.Node_getCoupledNodes(self, *args)

    def cleanNodes(self):
        """cleanNodes(Node self)"""
        return _pilot.Node_cleanNodes(self)

    def __cmp__(self, *args):
        """__cmp__(Node self, Node other) -> int"""
        return _pilot.Node___cmp__(self, *args)

    def ptr(self):
        """ptr(Node self) -> long"""
        return _pilot.Node_ptr(self)

Node_swigregister = _pilot.Node_swigregister
Node_swigregister(Node)

def Node_getStateName(*args):
  """Node_getStateName(YACS::StatesForNode state) -> std::string"""
  return _pilot.Node_getStateName(*args)

class ElementaryNode(Node,Task):
    """Proxy of C++ YACS::ENGINE::ElementaryNode class"""
    __swig_setmethods__ = {}
    for _s in [Node,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementaryNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElementaryNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_ElementaryNode
    __del__ = lambda self : None;
    def exUpdateState(self):
        """exUpdateState(ElementaryNode self)"""
        return _pilot.ElementaryNode_exUpdateState(self)

    def init(self, start=True):
        """
        init(ElementaryNode self, bool start=True)
        init(ElementaryNode self)
        """
        return _pilot.ElementaryNode_init(self, start)

    def isDeployable(self):
        """isDeployable(ElementaryNode self) -> bool"""
        return _pilot.ElementaryNode_isDeployable(self)

    def getComponent(self):
        """getComponent(ElementaryNode self) -> ComponentInstance"""
        return _pilot.ElementaryNode_getComponent(self)

    def getContainer(self):
        """getContainer(ElementaryNode self) -> Container"""
        return _pilot.ElementaryNode_getContainer(self)

    def getState(self):
        """getState(ElementaryNode self) -> YACS::StatesForNode"""
        return _pilot.ElementaryNode_getState(self)

    def getReadyTasks(self, *args):
        """getReadyTasks(ElementaryNode self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.ElementaryNode_getReadyTasks(self, *args)

    def edRemovePort(self, *args):
        """edRemovePort(ElementaryNode self, Port port)"""
        return _pilot.ElementaryNode_edRemovePort(self, *args)

    def getRecursiveConstituents(self):
        """getRecursiveConstituents(ElementaryNode self) -> std::list< YACS::ENGINE::ElementaryNode *,std::allocator< YACS::ENGINE::ElementaryNode * > >"""
        return _pilot.ElementaryNode_getRecursiveConstituents(self)

    def getChildByName(self, *args):
        """getChildByName(ElementaryNode self, std::string const & name) -> Node"""
        return _pilot.ElementaryNode_getChildByName(self, *args)

    def checkBasicConsistency(self):
        """checkBasicConsistency(ElementaryNode self)"""
        return _pilot.ElementaryNode_checkBasicConsistency(self)

    def getDynClonerIfExists(self, *args):
        """getDynClonerIfExists(ElementaryNode self, ComposedNode levelToStop) -> ComposedNode"""
        return _pilot.ElementaryNode_getDynClonerIfExists(self, *args)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(ElementaryNode self) -> int"""
        return _pilot.ElementaryNode_getNumberOfInputPorts(self)

    def getNumberOfOutputPorts(self):
        """getNumberOfOutputPorts(ElementaryNode self) -> int"""
        return _pilot.ElementaryNode_getNumberOfOutputPorts(self)

    def getInPortName(self, *args):
        """getInPortName(ElementaryNode self, InPort arg2) -> std::string"""
        return _pilot.ElementaryNode_getInPortName(self, *args)

    def getOutPortName(self, *args):
        """getOutPortName(ElementaryNode self, OutPort arg2) -> std::string"""
        return _pilot.ElementaryNode_getOutPortName(self, *args)

    def getInputPort(self, *args):
        """getInputPort(ElementaryNode self, std::string const & name) -> InputPort"""
        return _pilot.ElementaryNode_getInputPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(ElementaryNode self, std::string const & name) -> OutputPort"""
        return _pilot.ElementaryNode_getOutputPort(self, *args)

    def getSetOfInputPort(self):
        """getSetOfInputPort(ElementaryNode self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ElementaryNode_getSetOfInputPort(self)

    def getSetOfOutputPort(self):
        """getSetOfOutputPort(ElementaryNode self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ElementaryNode_getSetOfOutputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(ElementaryNode self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ElementaryNode_getLocalInputPorts(self)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(ElementaryNode self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ElementaryNode_getLocalOutputPorts(self)

    def getAllOutPortsLeavingCurrentScope(self):
        """getAllOutPortsLeavingCurrentScope(ElementaryNode self) -> std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > >"""
        return _pilot.ElementaryNode_getAllOutPortsLeavingCurrentScope(self)

    def getAllInPortsComingFromOutsideOfCurrentScope(self):
        """getAllInPortsComingFromOutsideOfCurrentScope(ElementaryNode self) -> std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.ElementaryNode_getAllInPortsComingFromOutsideOfCurrentScope(self)

    def getSetOfLinksLeavingCurrentScope(self):
        """getSetOfLinksLeavingCurrentScope(ElementaryNode self) -> linksvec"""
        return _pilot.ElementaryNode_getSetOfLinksLeavingCurrentScope(self)

    def getSetOfLinksComingInCurrentScope(self):
        """getSetOfLinksComingInCurrentScope(ElementaryNode self) -> linkvec"""
        return _pilot.ElementaryNode_getSetOfLinksComingInCurrentScope(self)

    def getSetOfInputDataStreamPort(self):
        """getSetOfInputDataStreamPort(ElementaryNode self) -> instreamlist"""
        return _pilot.ElementaryNode_getSetOfInputDataStreamPort(self)

    def getSetOfOutputDataStreamPort(self):
        """getSetOfOutputDataStreamPort(ElementaryNode self) -> outstreamlist"""
        return _pilot.ElementaryNode_getSetOfOutputDataStreamPort(self)

    def getInputDataStreamPort(self, *args):
        """getInputDataStreamPort(ElementaryNode self, std::string const & name) -> InputDataStreamPort"""
        return _pilot.ElementaryNode_getInputDataStreamPort(self, *args)

    def getOutputDataStreamPort(self, *args):
        """getOutputDataStreamPort(ElementaryNode self, std::string const & name) -> OutputDataStreamPort"""
        return _pilot.ElementaryNode_getOutputDataStreamPort(self, *args)

    def createInputPort(self, *args):
        """createInputPort(ElementaryNode self, std::string const & inputPortName, TypeCode type) -> InputPort"""
        return _pilot.ElementaryNode_createInputPort(self, *args)

    def createOutputPort(self, *args):
        """createOutputPort(ElementaryNode self, std::string const & outputPortName, TypeCode type) -> OutputPort"""
        return _pilot.ElementaryNode_createOutputPort(self, *args)

    def createInputDataStreamPort(self, *args):
        """createInputDataStreamPort(ElementaryNode self, std::string const & inputPortDSName, TypeCode type) -> InputDataStreamPort"""
        return _pilot.ElementaryNode_createInputDataStreamPort(self, *args)

    def createOutputDataStreamPort(self, *args):
        """createOutputDataStreamPort(ElementaryNode self, std::string const & outputPortDSName, TypeCode type) -> OutputDataStreamPort"""
        return _pilot.ElementaryNode_createOutputDataStreamPort(self, *args)

    def edAddInputPort(self, *args):
        """edAddInputPort(ElementaryNode self, std::string const & inputPortName, TypeCode type) -> InputPort"""
        return _pilot.ElementaryNode_edAddInputPort(self, *args)

    def edAddOutputPort(self, *args):
        """edAddOutputPort(ElementaryNode self, std::string const & outputPortName, TypeCode type) -> OutputPort"""
        return _pilot.ElementaryNode_edAddOutputPort(self, *args)

    def edAddInputDataStreamPort(self, *args):
        """edAddInputDataStreamPort(ElementaryNode self, std::string const & inputPortDSName, TypeCode type) -> InputDataStreamPort"""
        return _pilot.ElementaryNode_edAddInputDataStreamPort(self, *args)

    def edAddOutputDataStreamPort(self, *args):
        """edAddOutputDataStreamPort(ElementaryNode self, std::string const & outputPortDSName, TypeCode type) -> OutputDataStreamPort"""
        return _pilot.ElementaryNode_edAddOutputDataStreamPort(self, *args)

    def edOrderInputPorts(self, *args):
        """edOrderInputPorts(ElementaryNode self, std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > > const & ports)"""
        return _pilot.ElementaryNode_edOrderInputPorts(self, *args)

    def edOrderOutputPorts(self, *args):
        """edOrderOutputPorts(ElementaryNode self, std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > > const & ports)"""
        return _pilot.ElementaryNode_edOrderOutputPorts(self, *args)

    def typeName(self):
        """typeName(ElementaryNode self) -> std::string"""
        return _pilot.ElementaryNode_typeName(self)

    def edUpdateState(self):
        """edUpdateState(ElementaryNode self)"""
        return _pilot.ElementaryNode_edUpdateState(self)

    def ensureLoading(self):
        """ensureLoading(ElementaryNode self)"""
        return _pilot.ElementaryNode_ensureLoading(self)

    def begin(self):
        """begin(ElementaryNode self)"""
        return _pilot.ElementaryNode_begin(self)

    def isReady(self):
        """isReady(ElementaryNode self) -> bool"""
        return _pilot.ElementaryNode_isReady(self)

    def finished(self):
        """finished(ElementaryNode self)"""
        return _pilot.ElementaryNode_finished(self)

    def aborted(self):
        """aborted(ElementaryNode self)"""
        return _pilot.ElementaryNode_aborted(self)

    def loaded(self):
        """loaded(ElementaryNode self)"""
        return _pilot.ElementaryNode_loaded(self)

    def connected(self):
        """connected(ElementaryNode self)"""
        return _pilot.ElementaryNode_connected(self)

    def getErrorDetails(self):
        """getErrorDetails(ElementaryNode self) -> std::string"""
        return _pilot.ElementaryNode_getErrorDetails(self)

    def initService(self):
        """initService(ElementaryNode self)"""
        return _pilot.ElementaryNode_initService(self)

    def connectService(self):
        """connectService(ElementaryNode self)"""
        return _pilot.ElementaryNode_connectService(self)

    def disconnectService(self):
        """disconnectService(ElementaryNode self)"""
        return _pilot.ElementaryNode_disconnectService(self)

    def load(self):
        """load(ElementaryNode self)"""
        return _pilot.ElementaryNode_load(self)

    def getCoupledTasks(self, *args):
        """getCoupledTasks(ElementaryNode self, std::set< YACS::ENGINE::Task *,std::less< YACS::ENGINE::Task * >,std::allocator< YACS::ENGINE::Task * > > & coupledSet)"""
        return _pilot.ElementaryNode_getCoupledTasks(self, *args)

    def getCoupledNodes(self, *args):
        """getCoupledNodes(ElementaryNode self, std::set< YACS::ENGINE::Task *,std::less< YACS::ENGINE::Task * >,std::allocator< YACS::ENGINE::Task * > > & coupledSet)"""
        return _pilot.ElementaryNode_getCoupledNodes(self, *args)

    def accept(self, *args):
        """accept(ElementaryNode self, Visitor visitor)"""
        return _pilot.ElementaryNode_accept(self, *args)

    def addDatastreamPortToInitMultiService(self, *args):
        """addDatastreamPortToInitMultiService(ElementaryNode self, std::string const & port_name, int number)"""
        return _pilot.ElementaryNode_addDatastreamPortToInitMultiService(self, *args)

ElementaryNode_swigregister = _pilot.ElementaryNode_swigregister
ElementaryNode_swigregister(ElementaryNode)

class InlineNode(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::InlineNode class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InlineNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InlineNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setScript(self, *args):
        """setScript(InlineNode self, std::string const & script)"""
        return _pilot.InlineNode_setScript(self, *args)

    def getScript(self):
        """getScript(InlineNode self) -> std::string"""
        return _pilot.InlineNode_getScript(self)

    def cloneNode(self, *args):
        """cloneNode(InlineNode self, std::string const & name) -> InlineNode"""
        return _pilot.InlineNode_cloneNode(self, *args)

    def accept(self, *args):
        """accept(InlineNode self, Visitor visitor)"""
        return _pilot.InlineNode_accept(self, *args)

    __swig_destroy__ = _pilot.delete_InlineNode
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(InlineNode self) -> std::string"""
        return _pilot.InlineNode_typeName(self)

    def setExecutionMode(self, *args):
        """setExecutionMode(InlineNode self, std::string const & mode)"""
        return _pilot.InlineNode_setExecutionMode(self, *args)

    def getExecutionMode(self):
        """getExecutionMode(InlineNode self) -> std::string"""
        return _pilot.InlineNode_getExecutionMode(self)

    def setContainer(self, *args):
        """setContainer(InlineNode self, Container container)"""
        return _pilot.InlineNode_setContainer(self, *args)

    def getContainer(self):
        """getContainer(InlineNode self) -> Container"""
        return _pilot.InlineNode_getContainer(self)

    def performDuplicationOfPlacement(self, *args):
        """performDuplicationOfPlacement(InlineNode self, Node other)"""
        return _pilot.InlineNode_performDuplicationOfPlacement(self, *args)

    def isDeployable(self):
        """isDeployable(InlineNode self) -> bool"""
        return _pilot.InlineNode_isDeployable(self)

InlineNode_swigregister = _pilot.InlineNode_swigregister
InlineNode_swigregister(InlineNode)

class InlineFuncNode(InlineNode):
    """Proxy of C++ YACS::ENGINE::InlineFuncNode class"""
    __swig_setmethods__ = {}
    for _s in [InlineNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InlineFuncNode, name, value)
    __swig_getmethods__ = {}
    for _s in [InlineNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InlineFuncNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setFname(self, *args):
        """setFname(InlineFuncNode self, std::string const & fname)"""
        return _pilot.InlineFuncNode_setFname(self, *args)

    def getFname(self):
        """getFname(InlineFuncNode self) -> std::string"""
        return _pilot.InlineFuncNode_getFname(self)

    def accept(self, *args):
        """accept(InlineFuncNode self, Visitor visitor)"""
        return _pilot.InlineFuncNode_accept(self, *args)

    __swig_destroy__ = _pilot.delete_InlineFuncNode
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(InlineFuncNode self) -> std::string"""
        return _pilot.InlineFuncNode_typeName(self)

    def checkBasicConsistency(self):
        """checkBasicConsistency(InlineFuncNode self)"""
        return _pilot.InlineFuncNode_checkBasicConsistency(self)

InlineFuncNode_swigregister = _pilot.InlineFuncNode_swigregister
InlineFuncNode_swigregister(InlineFuncNode)

class ServiceNode(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::ServiceNode class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def load(self):
        """load(ServiceNode self)"""
        return _pilot.ServiceNode_load(self)

    def isDeployable(self):
        """isDeployable(ServiceNode self) -> bool"""
        return _pilot.ServiceNode_isDeployable(self)

    def setComponent(self, *args):
        """setComponent(ServiceNode self, ComponentInstance compo)"""
        return _pilot.ServiceNode_setComponent(self, *args)

    def getComponent(self):
        """getComponent(ServiceNode self) -> ComponentInstance"""
        return _pilot.ServiceNode_getComponent(self)

    def getContainer(self):
        """getContainer(ServiceNode self) -> Container"""
        return _pilot.ServiceNode_getContainer(self)

    def setRef(self, *args):
        """setRef(ServiceNode self, std::string const & ref)"""
        return _pilot.ServiceNode_setRef(self, *args)

    def getRef(self):
        """getRef(ServiceNode self) -> std::string"""
        return _pilot.ServiceNode_getRef(self)

    def setMethod(self, *args):
        """setMethod(ServiceNode self, std::string const & method)"""
        return _pilot.ServiceNode_setMethod(self, *args)

    def getMethod(self):
        """getMethod(ServiceNode self) -> std::string"""
        return _pilot.ServiceNode_getMethod(self)

    def createNode(self, *args):
        """createNode(ServiceNode self, std::string const & name) -> ServiceNode"""
        return _pilot.ServiceNode_createNode(self, *args)

    __swig_destroy__ = _pilot.delete_ServiceNode
    __del__ = lambda self : None;
    def accept(self, *args):
        """accept(ServiceNode self, Visitor visitor)"""
        return _pilot.ServiceNode_accept(self, *args)

    def getKind(self):
        """getKind(ServiceNode self) -> std::string"""
        return _pilot.ServiceNode_getKind(self)

    def typeName(self):
        """typeName(ServiceNode self) -> std::string"""
        return _pilot.ServiceNode_typeName(self)

ServiceNode_swigregister = _pilot.ServiceNode_swigregister
ServiceNode_swigregister(ServiceNode)
ServiceNode.KIND = _pilot.cvar.ServiceNode_KIND

class ServiceInlineNode(ServiceNode):
    """Proxy of C++ YACS::ENGINE::ServiceInlineNode class"""
    __swig_setmethods__ = {}
    for _s in [ServiceNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceInlineNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceInlineNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setScript(self, *args):
        """setScript(ServiceInlineNode self, std::string const & script)"""
        return _pilot.ServiceInlineNode_setScript(self, *args)

    def getScript(self):
        """getScript(ServiceInlineNode self) -> std::string"""
        return _pilot.ServiceInlineNode_getScript(self)

    def accept(self, *args):
        """accept(ServiceInlineNode self, Visitor visitor)"""
        return _pilot.ServiceInlineNode_accept(self, *args)

    def typeName(self):
        """typeName(ServiceInlineNode self) -> std::string"""
        return _pilot.ServiceInlineNode_typeName(self)

    __swig_destroy__ = _pilot.delete_ServiceInlineNode
    __del__ = lambda self : None;
ServiceInlineNode_swigregister = _pilot.ServiceInlineNode_swigregister
ServiceInlineNode_swigregister(ServiceInlineNode)

class ServerNode(InlineFuncNode):
    """Proxy of C++ YACS::ENGINE::ServerNode class"""
    __swig_setmethods__ = {}
    for _s in [InlineFuncNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerNode, name, value)
    __swig_getmethods__ = {}
    for _s in [InlineFuncNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def performDuplicationOfPlacement(self, *args):
        """performDuplicationOfPlacement(ServerNode self, Node other)"""
        return _pilot.ServerNode_performDuplicationOfPlacement(self, *args)

    def load(self):
        """load(ServerNode self)"""
        return _pilot.ServerNode_load(self)

    def accept(self, *args):
        """accept(ServerNode self, Visitor visitor)"""
        return _pilot.ServerNode_accept(self, *args)

    def createNode(self, *args):
        """createNode(ServerNode self, std::string const & name) -> ServerNode"""
        return _pilot.ServerNode_createNode(self, *args)

    def getContainer(self):
        """getContainer(ServerNode self) -> Container"""
        return _pilot.ServerNode_getContainer(self)

    def setContainer(self, *args):
        """setContainer(ServerNode self, Container container)"""
        return _pilot.ServerNode_setContainer(self, *args)

    def isDeployable(self):
        """isDeployable(ServerNode self) -> bool"""
        return _pilot.ServerNode_isDeployable(self)

    def getEffectiveKindOfServer(self):
        """getEffectiveKindOfServer(ServerNode self) -> std::string"""
        return _pilot.ServerNode_getEffectiveKindOfServer(self)

    __swig_destroy__ = _pilot.delete_ServerNode
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(ServerNode self) -> std::string"""
        return _pilot.ServerNode_typeName(self)

ServerNode_swigregister = _pilot.ServerNode_swigregister
ServerNode_swigregister(ServerNode)

class DataNode(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::DataNode class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setData(self, *args):
        """
        setData(DataNode self, InputPort port, std::string const & data)
        setData(DataNode self, OutputPort port, std::string const & data)
        """
        return _pilot.DataNode_setData(self, *args)

    def setRef(self, *args):
        """setRef(DataNode self, std::string const & ref)"""
        return _pilot.DataNode_setRef(self, *args)

    def getRef(self):
        """getRef(DataNode self) -> std::string"""
        return _pilot.DataNode_getRef(self)

    __swig_destroy__ = _pilot.delete_DataNode
    __del__ = lambda self : None;
    def typeName(self):
        """typeName(DataNode self) -> std::string"""
        return _pilot.DataNode_typeName(self)

DataNode_swigregister = _pilot.DataNode_swigregister
DataNode_swigregister(DataNode)

class ComposedNode(Node,Scheduler):
    """Proxy of C++ YACS::ENGINE::ComposedNode class"""
    __swig_setmethods__ = {}
    for _s in [Node,Scheduler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComposedNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node,Scheduler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComposedNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_ComposedNode
    __del__ = lambda self : None;
    def isFinished(self):
        """isFinished(ComposedNode self) -> bool"""
        return _pilot.ComposedNode_isFinished(self)

    def init(self, start=True):
        """
        init(ComposedNode self, bool start=True)
        init(ComposedNode self)
        """
        return _pilot.ComposedNode_init(self, start)

    def shutdown(self, *args):
        """shutdown(ComposedNode self, int level)"""
        return _pilot.ComposedNode_shutdown(self, *args)

    def resetState(self, *args):
        """resetState(ComposedNode self, int level)"""
        return _pilot.ComposedNode_resetState(self, *args)

    def getName(self):
        """getName(ComposedNode self) -> std::string"""
        return _pilot.ComposedNode_getName(self)

    def getTaskName(self, *args):
        """getTaskName(ComposedNode self, Task task) -> std::string"""
        return _pilot.ComposedNode_getTaskName(self, *args)

    def getDeploymentTree(self):
        """getDeploymentTree(ComposedNode self) -> DeploymentTree"""
        return _pilot.ComposedNode_getDeploymentTree(self)

    def checkDeploymentTree(self, *args):
        """checkDeploymentTree(ComposedNode self, bool deep) -> DeploymentTree"""
        return _pilot.ComposedNode_checkDeploymentTree(self, *args)

    def getNextTasks(self, *args):
        """getNextTasks(ComposedNode self, bool & isMore) -> std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > >"""
        return _pilot.ComposedNode_getNextTasks(self, *args)

    def isPlacementPredictableB4Run(self):
        """isPlacementPredictableB4Run(ComposedNode self) -> bool"""
        return _pilot.ComposedNode_isPlacementPredictableB4Run(self)

    def notifyFrom(self, *args):
        """notifyFrom(ComposedNode self, Task sender, YACS::Event event)"""
        return _pilot.ComposedNode_notifyFrom(self, *args)

    def edAddDFLink(self, *args):
        """edAddDFLink(ComposedNode self, OutPort start, InPort end) -> bool"""
        return _pilot.ComposedNode_edAddDFLink(self, *args)

    def edAddChild(self, *args):
        """edAddChild(ComposedNode self, Node DISOWNnode) -> bool"""
        return _pilot.ComposedNode_edAddChild(self, *args)

    def edRemoveChild(self, *args):
        """edRemoveChild(ComposedNode self, Node node)"""
        return _pilot.ComposedNode_edRemoveChild(self, *args)

    def edAddLink(self, *args):
        """
        edAddLink(ComposedNode self, OutPort start, InPort end) -> bool
        edAddLink(ComposedNode self, OutGate start, InGate end) -> bool
        """
        return _pilot.ComposedNode_edAddLink(self, *args)

    def edAddCFLink(self, *args):
        """edAddCFLink(ComposedNode self, Node nodeS, Node nodeE) -> bool"""
        return _pilot.ComposedNode_edAddCFLink(self, *args)

    def edRemoveCFLink(self, *args):
        """edRemoveCFLink(ComposedNode self, Node nodeS, Node nodeE)"""
        return _pilot.ComposedNode_edRemoveCFLink(self, *args)

    def edRemoveLink(self, *args):
        """
        edRemoveLink(ComposedNode self, OutPort start, InPort end)
        edRemoveLink(ComposedNode self, OutGate start, InGate end)
        """
        return _pilot.ComposedNode_edRemoveLink(self, *args)

    def isRepeatedUnpredictablySeveralTimes(self):
        """isRepeatedUnpredictablySeveralTimes(ComposedNode self) -> bool"""
        return _pilot.ComposedNode_isRepeatedUnpredictablySeveralTimes(self)

    def edGetDirectDescendants(self):
        """edGetDirectDescendants(ComposedNode self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.ComposedNode_edGetDirectDescendants(self)

    def getRecursiveConstituents(self):
        """getRecursiveConstituents(ComposedNode self) -> std::list< YACS::ENGINE::ElementaryNode *,std::allocator< YACS::ENGINE::ElementaryNode * > >"""
        return _pilot.ComposedNode_getRecursiveConstituents(self)

    def getAllRecursiveNodes(self):
        """getAllRecursiveNodes(ComposedNode self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.ComposedNode_getAllRecursiveNodes(self)

    def getAllRecursiveConstituents(self):
        """getAllRecursiveConstituents(ComposedNode self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.ComposedNode_getAllRecursiveConstituents(self)

    def getInPortName(self, *args):
        """getInPortName(ComposedNode self, InPort arg2) -> std::string"""
        return _pilot.ComposedNode_getInPortName(self, *args)

    def getOutPortName(self, *args):
        """getOutPortName(ComposedNode self, OutPort arg2) -> std::string"""
        return _pilot.ComposedNode_getOutPortName(self, *args)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(ComposedNode self) -> int"""
        return _pilot.ComposedNode_getNumberOfInputPorts(self)

    def getNumberOfOutputPorts(self):
        """getNumberOfOutputPorts(ComposedNode self) -> int"""
        return _pilot.ComposedNode_getNumberOfOutputPorts(self)

    def getSetOfInputPort(self):
        """getSetOfInputPort(ComposedNode self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ComposedNode_getSetOfInputPort(self)

    def getSetOfOutputPort(self):
        """getSetOfOutputPort(ComposedNode self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ComposedNode_getSetOfOutputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(ComposedNode self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ComposedNode_getLocalInputPorts(self)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(ComposedNode self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ComposedNode_getLocalOutputPorts(self)

    def getAllOutPortsLeavingCurrentScope(self):
        """getAllOutPortsLeavingCurrentScope(ComposedNode self) -> std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > >"""
        return _pilot.ComposedNode_getAllOutPortsLeavingCurrentScope(self)

    def getAllInPortsComingFromOutsideOfCurrentScope(self):
        """getAllInPortsComingFromOutsideOfCurrentScope(ComposedNode self) -> std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > >"""
        return _pilot.ComposedNode_getAllInPortsComingFromOutsideOfCurrentScope(self)

    def getSetOfInputDataStreamPort(self):
        """getSetOfInputDataStreamPort(ComposedNode self) -> instreamlist"""
        return _pilot.ComposedNode_getSetOfInputDataStreamPort(self)

    def getSetOfOutputDataStreamPort(self):
        """getSetOfOutputDataStreamPort(ComposedNode self) -> outstreamlist"""
        return _pilot.ComposedNode_getSetOfOutputDataStreamPort(self)

    def getOutPort(self, *args):
        """getOutPort(ComposedNode self, std::string const & name) -> OutPort"""
        return _pilot.ComposedNode_getOutPort(self, *args)

    def getInputPort(self, *args):
        """getInputPort(ComposedNode self, std::string const & name) -> InputPort"""
        return _pilot.ComposedNode_getInputPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(ComposedNode self, std::string const & name) -> OutputPort"""
        return _pilot.ComposedNode_getOutputPort(self, *args)

    def getInputDataStreamPort(self, *args):
        """getInputDataStreamPort(ComposedNode self, std::string const & name) -> InputDataStreamPort"""
        return _pilot.ComposedNode_getInputDataStreamPort(self, *args)

    def getOutputDataStreamPort(self, *args):
        """getOutputDataStreamPort(ComposedNode self, std::string const & name) -> OutputDataStreamPort"""
        return _pilot.ComposedNode_getOutputDataStreamPort(self, *args)

    def getSetOfInternalLinks(self):
        """getSetOfInternalLinks(ComposedNode self) -> linksvec"""
        return _pilot.ComposedNode_getSetOfInternalLinks(self)

    def getSetOfLinksLeavingCurrentScope(self):
        """getSetOfLinksLeavingCurrentScope(ComposedNode self) -> linksvec"""
        return _pilot.ComposedNode_getSetOfLinksLeavingCurrentScope(self)

    def checkConsistency(self, *args):
        """checkConsistency(ComposedNode self, LinkInfo info)"""
        return _pilot.ComposedNode_checkConsistency(self, *args)

    def getSetOfLinksComingInCurrentScope(self):
        """getSetOfLinksComingInCurrentScope(ComposedNode self) -> linkvec"""
        return _pilot.ComposedNode_getSetOfLinksComingInCurrentScope(self)

    def typeName(self):
        """typeName(ComposedNode self) -> std::string"""
        return _pilot.ComposedNode_typeName(self)

    def edUpdateState(self):
        """edUpdateState(ComposedNode self)"""
        return _pilot.ComposedNode_edUpdateState(self)

    def checkBasicConsistency(self):
        """checkBasicConsistency(ComposedNode self)"""
        return _pilot.ComposedNode_checkBasicConsistency(self)

    def getErrorReport(self):
        """getErrorReport(ComposedNode self) -> std::string"""
        return _pilot.ComposedNode_getErrorReport(self)

    def getRootNode(self):
        """getRootNode(ComposedNode self) -> ComposedNode"""
        return _pilot.ComposedNode_getRootNode(self)

    def isNodeAlreadyAggregated(self, *args):
        """isNodeAlreadyAggregated(ComposedNode self, Node node) -> bool"""
        return _pilot.ComposedNode_isNodeAlreadyAggregated(self, *args)

    def isNameAlreadyUsed(self, *args):
        """isNameAlreadyUsed(ComposedNode self, std::string const & name) -> bool"""
        return _pilot.ComposedNode_isNameAlreadyUsed(self, *args)

    def isInMyDescendance(self, *args):
        """isInMyDescendance(ComposedNode self, Node nodeToTest) -> Node"""
        return _pilot.ComposedNode_isInMyDescendance(self, *args)

    def getChildName(self, *args):
        """getChildName(ComposedNode self, Node node) -> std::string"""
        return _pilot.ComposedNode_getChildName(self, *args)

    def getMyQualifiedName(self, *args):
        """getMyQualifiedName(ComposedNode self, Node directSon) -> std::string"""
        return _pilot.ComposedNode_getMyQualifiedName(self, *args)

    def getChildByName(self, *args):
        """getChildByName(ComposedNode self, std::string const & name) -> Node"""
        return _pilot.ComposedNode_getChildByName(self, *args)

    def getLowestCommonAncestor(*args):
        """getLowestCommonAncestor(Node node1, Node node2) -> ComposedNode"""
        return _pilot.ComposedNode_getLowestCommonAncestor(*args)

    if _newclass:getLowestCommonAncestor = staticmethod(getLowestCommonAncestor)
    __swig_getmethods__["getLowestCommonAncestor"] = lambda x: getLowestCommonAncestor
    def loaded(self):
        """loaded(ComposedNode self)"""
        return _pilot.ComposedNode_loaded(self)

    def connected(self):
        """connected(ComposedNode self)"""
        return _pilot.ComposedNode_connected(self)

    def accept(self, *args):
        """accept(ComposedNode self, Visitor visitor)"""
        return _pilot.ComposedNode_accept(self, *args)

    def cleanNodes(self):
        """cleanNodes(ComposedNode self)"""
        return _pilot.ComposedNode_cleanNodes(self)

ComposedNode_swigregister = _pilot.ComposedNode_swigregister
ComposedNode_swigregister(ComposedNode)

def ComposedNode_getLowestCommonAncestor(*args):
  """ComposedNode_getLowestCommonAncestor(Node node1, Node node2) -> ComposedNode"""
  return _pilot.ComposedNode_getLowestCommonAncestor(*args)

class StaticDefinedComposedNode(ComposedNode):
    """Proxy of C++ YACS::ENGINE::StaticDefinedComposedNode class"""
    __swig_setmethods__ = {}
    for _s in [ComposedNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticDefinedComposedNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ComposedNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticDefinedComposedNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isPlacementPredictableB4Run(self):
        """isPlacementPredictableB4Run(StaticDefinedComposedNode self) -> bool"""
        return _pilot.StaticDefinedComposedNode_isPlacementPredictableB4Run(self)

    def isMultiplicitySpecified(self, *args):
        """isMultiplicitySpecified(StaticDefinedComposedNode self, unsigned int & value) -> bool"""
        return _pilot.StaticDefinedComposedNode_isMultiplicitySpecified(self, *args)

    def forceMultiplicity(self, *args):
        """forceMultiplicity(StaticDefinedComposedNode self, unsigned int value)"""
        return _pilot.StaticDefinedComposedNode_forceMultiplicity(self, *args)

    __swig_destroy__ = _pilot.delete_StaticDefinedComposedNode
    __del__ = lambda self : None;
StaticDefinedComposedNode_swigregister = _pilot.StaticDefinedComposedNode_swigregister
StaticDefinedComposedNode_swigregister(StaticDefinedComposedNode)

class Bloc(StaticDefinedComposedNode):
    """Proxy of C++ YACS::ENGINE::Bloc class"""
    __swig_setmethods__ = {}
    for _s in [StaticDefinedComposedNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bloc, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticDefinedComposedNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bloc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::Bloc self, Bloc other, ComposedNode father, bool editionOnly) -> Bloc
        __init__(YACS::ENGINE::Bloc self, std::string const & name) -> Bloc
        """
        this = _pilot.new_Bloc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Bloc
    __del__ = lambda self : None;
    def isFinished(self):
        """isFinished(Bloc self) -> bool"""
        return _pilot.Bloc_isFinished(self)

    def getNumberOfCFLinks(self):
        """getNumberOfCFLinks(Bloc self) -> int"""
        return _pilot.Bloc_getNumberOfCFLinks(self)

    def init(self, start=True):
        """
        init(Bloc self, bool start=True)
        init(Bloc self)
        """
        return _pilot.Bloc_init(self, start)

    def getReadyTasks(self, *args):
        """getReadyTasks(Bloc self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Bloc_getReadyTasks(self, *args)

    def exUpdateState(self):
        """exUpdateState(Bloc self)"""
        return _pilot.Bloc_exUpdateState(self)

    def edAddChild(self, *args):
        """edAddChild(Bloc self, Node DISOWNnode) -> bool"""
        return _pilot.Bloc_edAddChild(self, *args)

    def edRemoveChild(self, *args):
        """edRemoveChild(Bloc self, Node node)"""
        val = _pilot.Bloc_edRemoveChild(self, *args)
        args[1].thisown=1


        return val

    def getChildren(self):
        """getChildren(Bloc self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.Bloc_getChildren(self)

    def edGetDirectDescendants(self):
        """edGetDirectDescendants(Bloc self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.Bloc_edGetDirectDescendants(self)

    def getChildByShortName(self, *args):
        """getChildByShortName(Bloc self, std::string const & name) -> Node"""
        return _pilot.Bloc_getChildByShortName(self, *args)

    def selectRunnableTasks(self, *args):
        """selectRunnableTasks(Bloc self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Bloc_selectRunnableTasks(self, *args)

    def writeDot(self, *args):
        """writeDot(Bloc self, std::ostream & os)"""
        return _pilot.Bloc_writeDot(self, *args)

    def accept(self, *args):
        """accept(Bloc self, Visitor visitor)"""
        return _pilot.Bloc_accept(self, *args)

    def typeName(self):
        """typeName(Bloc self) -> std::string"""
        return _pilot.Bloc_typeName(self)

Bloc_swigregister = _pilot.Bloc_swigregister
Bloc_swigregister(Bloc)

class Proc(Bloc):
    """Proxy of C++ YACS::ENGINE::Proc class"""
    __swig_setmethods__ = {}
    for _s in [Bloc]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Proc, name, value)
    __swig_getmethods__ = {}
    for _s in [Bloc]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Proc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::Proc self, std::string const & name) -> Proc"""
        this = _pilot.new_Proc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Proc
    __del__ = lambda self : None;
    def createType(self, *args):
        """createType(Proc self, std::string const & name, std::string const & kind) -> TypeCode"""
        return _pilot.Proc_createType(self, *args)

    def createInterfaceTc(self, *args):
        """createInterfaceTc(Proc self, std::string const & id, std::string const & name, std::list< YACS::ENGINE::TypeCodeObjref *,std::allocator< YACS::ENGINE::TypeCodeObjref * > > ltc) -> TypeCode"""
        return _pilot.Proc_createInterfaceTc(self, *args)

    def createSequenceTc(self, *args):
        """createSequenceTc(Proc self, std::string const & id, std::string const & name, TypeCode content) -> TypeCode"""
        return _pilot.Proc_createSequenceTc(self, *args)

    def createStructTc(self, *args):
        """createStructTc(Proc self, std::string const & id, std::string const & name) -> TypeCode"""
        return _pilot.Proc_createStructTc(self, *args)

    def getTypeCode(self, *args):
        """getTypeCode(Proc self, std::string const & name) -> TypeCode"""
        return _pilot.Proc_getTypeCode(self, *args)

    def setTypeCode(self, *args):
        """setTypeCode(Proc self, std::string const & name, TypeCode t)"""
        return _pilot.Proc_setTypeCode(self, *args)

    def createContainer(self, *args):
        """
        createContainer(Proc self, std::string const & name, std::string const & kind="") -> Container
        createContainer(Proc self, std::string const & name) -> Container
        """
        return _pilot.Proc_createContainer(self, *args)

    def createComponentInstance(self, *args):
        """
        createComponentInstance(Proc self, std::string const & componame, std::string const & name="", std::string const & kind="") -> ComponentInstance
        createComponentInstance(Proc self, std::string const & componame, std::string const & name="") -> ComponentInstance
        createComponentInstance(Proc self, std::string const & componame) -> ComponentInstance
        """
        return _pilot.Proc_createComponentInstance(self, *args)

    def addComponentInstance(self, *args):
        """
        addComponentInstance(Proc self, ComponentInstance inst, std::string const & name="", bool resetCtr=False)
        addComponentInstance(Proc self, ComponentInstance inst, std::string const & name="")
        addComponentInstance(Proc self, ComponentInstance inst)
        """
        return _pilot.Proc_addComponentInstance(self, *args)

    def removeComponentInstance(self, *args):
        """removeComponentInstance(Proc self, ComponentInstance inst)"""
        return _pilot.Proc_removeComponentInstance(self, *args)

    def removeContainer(self, *args):
        """removeContainer(Proc self, Container cont)"""
        return _pilot.Proc_removeContainer(self, *args)

    def accept(self, *args):
        """accept(Proc self, Visitor visitor)"""
        return _pilot.Proc_accept(self, *args)

    def getProc(self, *args):
        """
        getProc(Proc self) -> Proc
        getProc(Proc self) -> Proc
        """
        return _pilot.Proc_getProc(self, *args)

    def getNodeState(self, *args):
        """getNodeState(Proc self, int numId) -> YACS::StatesForNode"""
        return _pilot.Proc_getNodeState(self, *args)

    def getInPortValue(self, *args):
        """getInPortValue(Proc self, int nodeNumId, std::string portName) -> std::string"""
        return _pilot.Proc_getInPortValue(self, *args)

    def setInPortValue(self, *args):
        """setInPortValue(Proc self, std::string nodeName, std::string portName, std::string value) -> std::string"""
        return _pilot.Proc_setInPortValue(self, *args)

    def getOutPortValue(self, *args):
        """getOutPortValue(Proc self, int nodeNumId, std::string portName) -> std::string"""
        return _pilot.Proc_getOutPortValue(self, *args)

    def getNodeErrorDetails(self, *args):
        """getNodeErrorDetails(Proc self, int nodeNumId) -> std::string"""
        return _pilot.Proc_getNodeErrorDetails(self, *args)

    def getNodeErrorReport(self, *args):
        """getNodeErrorReport(Proc self, int nodeNumId) -> std::string"""
        return _pilot.Proc_getNodeErrorReport(self, *args)

    def getNodeContainerLog(self, *args):
        """getNodeContainerLog(Proc self, int nodeNumId) -> std::string"""
        return _pilot.Proc_getNodeContainerLog(self, *args)

    def getXMLState(self, *args):
        """getXMLState(Proc self, int numId) -> std::string"""
        return _pilot.Proc_getXMLState(self, *args)

    def getNumIds(self):
        """getNumIds(Proc self) -> std::list< int,std::allocator< int > >"""
        return _pilot.Proc_getNumIds(self)

    def getIds(self):
        """getIds(Proc self) -> std::list< std::string,std::allocator< std::string > >"""
        return _pilot.Proc_getIds(self)

    def getLogger(self, *args):
        """getLogger(Proc self, std::string const & name) -> Logger"""
        return _pilot.Proc_getLogger(self, *args)

    def writeDot(self, *args):
        """writeDot(Proc self, std::ostream & os)"""
        return _pilot.Proc_writeDot(self, *args)

    def setName(self, *args):
        """setName(Proc self, std::string const & name)"""
        return _pilot.Proc_setName(self, *args)

    def typeName(self):
        """typeName(Proc self) -> std::string"""
        return _pilot.Proc_typeName(self)

    __swig_setmethods__["nodeMap"] = _pilot.Proc_nodeMap_set
    __swig_getmethods__["nodeMap"] = _pilot.Proc_nodeMap_get
    if _newclass:nodeMap = _swig_property(_pilot.Proc_nodeMap_get, _pilot.Proc_nodeMap_set)
    __swig_setmethods__["serviceMap"] = _pilot.Proc_serviceMap_set
    __swig_getmethods__["serviceMap"] = _pilot.Proc_serviceMap_get
    if _newclass:serviceMap = _swig_property(_pilot.Proc_serviceMap_get, _pilot.Proc_serviceMap_set)
    __swig_setmethods__["inlineMap"] = _pilot.Proc_inlineMap_set
    __swig_getmethods__["inlineMap"] = _pilot.Proc_inlineMap_get
    if _newclass:inlineMap = _swig_property(_pilot.Proc_inlineMap_get, _pilot.Proc_inlineMap_set)
    __swig_setmethods__["typeMap"] = _pilot.Proc_typeMap_set
    __swig_getmethods__["typeMap"] = _pilot.Proc_typeMap_get
    if _newclass:typeMap = _swig_property(_pilot.Proc_typeMap_get, _pilot.Proc_typeMap_set)
    __swig_setmethods__["containerMap"] = _pilot.Proc_containerMap_set
    __swig_getmethods__["containerMap"] = _pilot.Proc_containerMap_get
    if _newclass:containerMap = _swig_property(_pilot.Proc_containerMap_get, _pilot.Proc_containerMap_set)
    __swig_setmethods__["componentInstanceMap"] = _pilot.Proc_componentInstanceMap_set
    __swig_getmethods__["componentInstanceMap"] = _pilot.Proc_componentInstanceMap_get
    if _newclass:componentInstanceMap = _swig_property(_pilot.Proc_componentInstanceMap_get, _pilot.Proc_componentInstanceMap_set)
    __swig_setmethods__["names"] = _pilot.Proc_names_set
    __swig_getmethods__["names"] = _pilot.Proc_names_get
    if _newclass:names = _swig_property(_pilot.Proc_names_get, _pilot.Proc_names_set)
    __swig_setmethods__["_loggers"] = _pilot.Proc__loggers_set
    __swig_getmethods__["_loggers"] = _pilot.Proc__loggers_get
    if _newclass:_loggers = _swig_property(_pilot.Proc__loggers_get, _pilot.Proc__loggers_set)
    def getEdition(self):
        """getEdition(Proc self) -> bool"""
        return _pilot.Proc_getEdition(self)

    def setEdition(self, *args):
        """setEdition(Proc self, bool edition)"""
        return _pilot.Proc_setEdition(self, *args)

    def modified(self):
        """modified(Proc self)"""
        return _pilot.Proc_modified(self)

    def saveSchema(self, *args):
        """saveSchema(Proc self, std::string xmlSchemaFile)"""
        return _pilot.Proc_saveSchema(self, *args)

    def saveState(self, *args):
        """saveState(Proc self, std::string xmlStateFile)"""
        return _pilot.Proc_saveState(self, *args)

Proc_swigregister = _pilot.Proc_swigregister
Proc_swigregister(Proc)


def NbDoneLoader(*args):
  """NbDoneLoader(Loop node, int val)"""
  return _pilot.NbDoneLoader(*args)
class InputPort4DF2DS(InputPort):
    """Proxy of C++ YACS::ENGINE::InputPort4DF2DS class"""
    __swig_setmethods__ = {}
    for _s in [InputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPort4DF2DS, name, value)
    __swig_getmethods__ = {}
    for _s in [InputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPort4DF2DS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::InputPort4DF2DS self, DFToDSForLoop node, TypeCode type) -> InputPort4DF2DS"""
        this = _pilot.new_InputPort4DF2DS(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAllRepresentants(self, *args):
        """getAllRepresentants(InputPort4DF2DS self, std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > > & repr)"""
        return _pilot.InputPort4DF2DS_getAllRepresentants(self, *args)

    def clone(self, *args):
        """clone(InputPort4DF2DS self, Node newHelder) -> InputPort"""
        return _pilot.InputPort4DF2DS_clone(self, *args)

    def get(self):
        """get(InputPort4DF2DS self) -> void *"""
        return _pilot.InputPort4DF2DS_get(self)

    def exRestoreInit(self):
        """exRestoreInit(InputPort4DF2DS self)"""
        return _pilot.InputPort4DF2DS_exRestoreInit(self)

    def exSaveInit(self):
        """exSaveInit(InputPort4DF2DS self)"""
        return _pilot.InputPort4DF2DS_exSaveInit(self)

    def put(self, *args):
        """
        put(InputPort4DF2DS self, void const * data)
        put(InputPort4DF2DS self, Any data)
        """
        return _pilot.InputPort4DF2DS_put(self, *args)

    __swig_destroy__ = _pilot.delete_InputPort4DF2DS
    __del__ = lambda self : None;
InputPort4DF2DS_swigregister = _pilot.InputPort4DF2DS_swigregister
InputPort4DF2DS_swigregister(InputPort4DF2DS)

class DFToDSForLoop(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::DFToDSForLoop class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DFToDSForLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DFToDSForLoop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_DFToDSForLoop
    __del__ = lambda self : None;
DFToDSForLoop_swigregister = _pilot.DFToDSForLoop_swigregister
DFToDSForLoop_swigregister(DFToDSForLoop)

class OutputPort4DS2DF(OutputPort):
    """Proxy of C++ YACS::ENGINE::OutputPort4DS2DF class"""
    __swig_setmethods__ = {}
    for _s in [OutputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputPort4DS2DF, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputPort4DS2DF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::OutputPort4DS2DF self, DSToDFForLoop node, TypeCode type) -> OutputPort4DS2DF"""
        this = _pilot.new_OutputPort4DS2DF(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAllRepresented(self, *args):
        """getAllRepresented(OutputPort4DS2DF self, std::set< YACS::ENGINE::OutPort *,std::less< YACS::ENGINE::OutPort * >,std::allocator< YACS::ENGINE::OutPort * > > & represented)"""
        return _pilot.OutputPort4DS2DF_getAllRepresented(self, *args)

    def clone(self, *args):
        """clone(OutputPort4DS2DF self, Node newHelder) -> OutputPort"""
        return _pilot.OutputPort4DS2DF_clone(self, *args)

    def put(self, *args):
        """
        put(OutputPort4DS2DF self, void const * data)
        put(OutputPort4DS2DF self, Any data)
        """
        return _pilot.OutputPort4DS2DF_put(self, *args)

    __swig_destroy__ = _pilot.delete_OutputPort4DS2DF
    __del__ = lambda self : None;
OutputPort4DS2DF_swigregister = _pilot.OutputPort4DS2DF_swigregister
OutputPort4DS2DF_swigregister(OutputPort4DS2DF)

class InputDataStreamPort4DS2DF(InputDataStreamPort):
    """Proxy of C++ YACS::ENGINE::InputDataStreamPort4DS2DF class"""
    __swig_setmethods__ = {}
    for _s in [InputDataStreamPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputDataStreamPort4DS2DF, name, value)
    __swig_getmethods__ = {}
    for _s in [InputDataStreamPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputDataStreamPort4DS2DF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::InputDataStreamPort4DS2DF self, DSToDFForLoop node, TypeCode type) -> InputDataStreamPort4DS2DF"""
        this = _pilot.new_InputDataStreamPort4DS2DF(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAllRepresentants(self, *args):
        """getAllRepresentants(InputDataStreamPort4DS2DF self, std::set< YACS::ENGINE::InPort *,std::less< YACS::ENGINE::InPort * >,std::allocator< YACS::ENGINE::InPort * > > & repr)"""
        return _pilot.InputDataStreamPort4DS2DF_getAllRepresentants(self, *args)

    __swig_destroy__ = _pilot.delete_InputDataStreamPort4DS2DF
    __del__ = lambda self : None;
InputDataStreamPort4DS2DF_swigregister = _pilot.InputDataStreamPort4DS2DF_swigregister
InputDataStreamPort4DS2DF_swigregister(InputDataStreamPort4DS2DF)

class DSToDFForLoop(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::DSToDFForLoop class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSToDFForLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSToDFForLoop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_DSToDFForLoop
    __del__ = lambda self : None;
DSToDFForLoop_swigregister = _pilot.DSToDFForLoop_swigregister
DSToDFForLoop_swigregister(DSToDFForLoop)

class FakeNodeForLoop(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::FakeNodeForLoop class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FakeNodeForLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FakeNodeForLoop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_FakeNodeForLoop
    __del__ = lambda self : None;
FakeNodeForLoop_swigregister = _pilot.FakeNodeForLoop_swigregister
FakeNodeForLoop_swigregister(FakeNodeForLoop)

class Loop(StaticDefinedComposedNode):
    """Proxy of C++ YACS::ENGINE::Loop class"""
    __swig_setmethods__ = {}
    for _s in [StaticDefinedComposedNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Loop, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticDefinedComposedNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Loop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_Loop
    __del__ = lambda self : None;
    def init(self, start=True):
        """
        init(Loop self, bool start=True)
        init(Loop self)
        """
        return _pilot.Loop_init(self, start)

    def getNbOfTurns(self):
        """getNbOfTurns(Loop self) -> int"""
        return _pilot.Loop_getNbOfTurns(self)

    def edSetNode(self, *args):
        """edSetNode(Loop self, Node DISOWNnode) -> Node"""
        return _pilot.Loop_edSetNode(self, *args)

    def edAddChild(self, *args):
        """edAddChild(Loop self, Node DISOWNnode) -> bool"""
        return _pilot.Loop_edAddChild(self, *args)

    def edRemoveNode(self):
        """edRemoveNode(Loop self) -> Node"""
        return _pilot.Loop_edRemoveNode(self)

    def checkBasicConsistency(self):
        """checkBasicConsistency(Loop self)"""
        return _pilot.Loop_checkBasicConsistency(self)

    def getDecisionPort(self):
        """getDecisionPort(Loop self) -> InputPort"""
        return _pilot.Loop_getDecisionPort(self)

    def getReadyTasks(self, *args):
        """getReadyTasks(Loop self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Loop_getReadyTasks(self, *args)

    def edRemoveChild(self, *args):
        """edRemoveChild(Loop self, Node node)"""
        return _pilot.Loop_edRemoveChild(self, *args)

    def isRepeatedUnpredictablySeveralTimes(self):
        """isRepeatedUnpredictablySeveralTimes(Loop self) -> bool"""
        return _pilot.Loop_isRepeatedUnpredictablySeveralTimes(self)

    def selectRunnableTasks(self, *args):
        """selectRunnableTasks(Loop self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Loop_selectRunnableTasks(self, *args)

    def edGetDirectDescendants(self):
        """edGetDirectDescendants(Loop self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.Loop_edGetDirectDescendants(self)

    def getSetOfInputPort(self):
        """getSetOfInputPort(Loop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.Loop_getSetOfInputPort(self)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(Loop self) -> int"""
        return _pilot.Loop_getNumberOfInputPorts(self)

    def getChildByShortName(self, *args):
        """getChildByShortName(Loop self, std::string const & name) -> Node"""
        return _pilot.Loop_getChildByShortName(self, *args)

    def MappingDF2DS(*args):
        """MappingDF2DS(TypeCode type) -> TypeCode"""
        return _pilot.Loop_MappingDF2DS(*args)

    if _newclass:MappingDF2DS = staticmethod(MappingDF2DS)
    __swig_getmethods__["MappingDF2DS"] = lambda x: MappingDF2DS
    def MappingDS2DF(*args):
        """MappingDS2DF(TypeCode type) -> TypeCode"""
        return _pilot.Loop_MappingDS2DF(*args)

    if _newclass:MappingDS2DF = staticmethod(MappingDS2DF)
    __swig_getmethods__["MappingDS2DF"] = lambda x: MappingDS2DF
    def edAddDFLink(self, *args):
        """edAddDFLink(Loop self, OutPort start, InPort end) -> bool"""
        return _pilot.Loop_edAddDFLink(self, *args)

    def writeDot(self, *args):
        """writeDot(Loop self, std::ostream & os)"""
        return _pilot.Loop_writeDot(self, *args)

    def accept(self, *args):
        """accept(Loop self, Visitor visitor)"""
        return _pilot.Loop_accept(self, *args)

    def typeName(self):
        """typeName(Loop self) -> std::string"""
        return _pilot.Loop_typeName(self)

Loop_swigregister = _pilot.Loop_swigregister
Loop_swigregister(Loop)

def Loop_MappingDF2DS(*args):
  """Loop_MappingDF2DS(TypeCode type) -> TypeCode"""
  return _pilot.Loop_MappingDF2DS(*args)

def Loop_MappingDS2DF(*args):
  """Loop_MappingDS2DF(TypeCode type) -> TypeCode"""
  return _pilot.Loop_MappingDS2DF(*args)

class ForLoop(Loop):
    """Proxy of C++ YACS::ENGINE::ForLoop class"""
    __swig_setmethods__ = {}
    for _s in [Loop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [Loop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::ForLoop self, ForLoop other, ComposedNode father, bool editionOnly) -> ForLoop
        __init__(YACS::ENGINE::ForLoop self, std::string const & name) -> ForLoop
        """
        this = _pilot.new_ForLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    def exUpdateState(self):
        """exUpdateState(ForLoop self)"""
        return _pilot.ForLoop_exUpdateState(self)

    def init(self, start=True):
        """
        init(ForLoop self, bool start=True)
        init(ForLoop self)
        """
        return _pilot.ForLoop_init(self, start)

    def edGetNbOfTimesInputPort(self):
        """edGetNbOfTimesInputPort(ForLoop self) -> InputPort"""
        return _pilot.ForLoop_edGetNbOfTimesInputPort(self)

    def simpleClone(self, *args):
        """
        simpleClone(ForLoop self, ComposedNode father, bool editionOnly=True) -> Node
        simpleClone(ForLoop self, ComposedNode father) -> Node
        """
        return _pilot.ForLoop_simpleClone(self, *args)

    def getInputPort(self, *args):
        """getInputPort(ForLoop self, std::string const & name) -> InputPort"""
        return _pilot.ForLoop_getInputPort(self, *args)

    def getOutPort(self, *args):
        """getOutPort(ForLoop self, std::string const & name) -> OutPort"""
        return _pilot.ForLoop_getOutPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(ForLoop self, std::string const & name) -> OutputPort"""
        return _pilot.ForLoop_getOutputPort(self, *args)

    def getLocalInputPorts(self):
        """getLocalInputPorts(ForLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ForLoop_getLocalInputPorts(self)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(ForLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ForLoop_getLocalOutputPorts(self)

    def getSetOfOutputPort(self):
        """getSetOfOutputPort(ForLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ForLoop_getSetOfOutputPort(self)

    def accept(self, *args):
        """accept(ForLoop self, Visitor visitor)"""
        return _pilot.ForLoop_accept(self, *args)

    def getDecisionPort(self):
        """getDecisionPort(ForLoop self) -> InputPort"""
        return _pilot.ForLoop_getDecisionPort(self)

    def edGetIndexPort(self):
        """edGetIndexPort(ForLoop self) -> OutputPort"""
        return _pilot.ForLoop_edGetIndexPort(self)

    def typeName(self):
        """typeName(ForLoop self) -> std::string"""
        return _pilot.ForLoop_typeName(self)

    __swig_destroy__ = _pilot.delete_ForLoop
    __del__ = lambda self : None;
ForLoop_swigregister = _pilot.ForLoop_swigregister
ForLoop_swigregister(ForLoop)

class DynParaLoop(ComposedNode):
    """Proxy of C++ YACS::ENGINE::DynParaLoop class"""
    __swig_setmethods__ = {}
    for _s in [ComposedNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParaLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [ComposedNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynParaLoop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def edRemoveNode(self):
        """edRemoveNode(DynParaLoop self) -> Node"""
        return _pilot.DynParaLoop_edRemoveNode(self)

    def edRemoveInitNode(self):
        """edRemoveInitNode(DynParaLoop self) -> Node"""
        return _pilot.DynParaLoop_edRemoveInitNode(self)

    def edRemoveFinalizeNode(self):
        """edRemoveFinalizeNode(DynParaLoop self) -> Node"""
        return _pilot.DynParaLoop_edRemoveFinalizeNode(self)

    def edSetNode(self, *args):
        """edSetNode(DynParaLoop self, Node DISOWNnode) -> Node"""
        return _pilot.DynParaLoop_edSetNode(self, *args)

    def edSetInitNode(self, *args):
        """edSetInitNode(DynParaLoop self, Node DISOWNnode) -> Node"""
        return _pilot.DynParaLoop_edSetInitNode(self, *args)

    def edSetFinalizeNode(self, *args):
        """edSetFinalizeNode(DynParaLoop self, Node DISOWNnode) -> Node"""
        return _pilot.DynParaLoop_edSetFinalizeNode(self, *args)

    def edAddDFLink(self, *args):
        """edAddDFLink(DynParaLoop self, OutPort start, InPort end) -> bool"""
        return _pilot.DynParaLoop_edAddDFLink(self, *args)

    def init(self, start=True):
        """
        init(DynParaLoop self, bool start=True)
        init(DynParaLoop self)
        """
        return _pilot.DynParaLoop_init(self, start)

    def edGetNbOfBranchesPort(self):
        """edGetNbOfBranchesPort(DynParaLoop self) -> InputPort"""
        return _pilot.DynParaLoop_edGetNbOfBranchesPort(self)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(DynParaLoop self) -> int"""
        return _pilot.DynParaLoop_getNumberOfInputPorts(self)

    def getNumberOfOutputPorts(self):
        """getNumberOfOutputPorts(DynParaLoop self) -> int"""
        return _pilot.DynParaLoop_getNumberOfOutputPorts(self)

    def getNumberOfEltsConsumed(self):
        """getNumberOfEltsConsumed(DynParaLoop self) -> unsigned int"""
        return _pilot.DynParaLoop_getNumberOfEltsConsumed(self)

    def getSetOfOutputPort(self):
        """getSetOfOutputPort(DynParaLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.DynParaLoop_getSetOfOutputPort(self)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(DynParaLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.DynParaLoop_getLocalOutputPorts(self)

    def edGetSamplePort(self):
        """edGetSamplePort(DynParaLoop self) -> OutputPort"""
        return _pilot.DynParaLoop_edGetSamplePort(self)

    def getOutPort(self, *args):
        """getOutPort(DynParaLoop self, std::string const & name) -> OutPort"""
        return _pilot.DynParaLoop_getOutPort(self, *args)

    def getInputPort(self, *args):
        """getInputPort(DynParaLoop self, std::string const & name) -> InputPort"""
        return _pilot.DynParaLoop_getInputPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(DynParaLoop self, std::string const & name) -> OutputPort"""
        return _pilot.DynParaLoop_getOutputPort(self, *args)

    def isPlacementPredictableB4Run(self):
        """isPlacementPredictableB4Run(DynParaLoop self) -> bool"""
        return _pilot.DynParaLoop_isPlacementPredictableB4Run(self)

    def edRemoveChild(self, *args):
        """edRemoveChild(DynParaLoop self, Node node)"""
        return _pilot.DynParaLoop_edRemoveChild(self, *args)

    def edAddChild(self, *args):
        """edAddChild(DynParaLoop self, Node node) -> bool"""
        return _pilot.DynParaLoop_edAddChild(self, *args)

    def edGetDirectDescendants(self):
        """edGetDirectDescendants(DynParaLoop self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.DynParaLoop_edGetDirectDescendants(self)

    def getSetOfInputPort(self):
        """getSetOfInputPort(DynParaLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.DynParaLoop_getSetOfInputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(DynParaLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.DynParaLoop_getLocalInputPorts(self)

    def getNumberOfBranchesCreatedDyn(self):
        """getNumberOfBranchesCreatedDyn(DynParaLoop self) -> unsigned int"""
        return _pilot.DynParaLoop_getNumberOfBranchesCreatedDyn(self)

    def getChildByShortName(self, *args):
        """getChildByShortName(DynParaLoop self, std::string const & name) -> Node"""
        return _pilot.DynParaLoop_getChildByShortName(self, *args)

    def getChildByNameExec(self, *args):
        """getChildByNameExec(DynParaLoop self, std::string const & name, unsigned int id) -> Node"""
        return _pilot.DynParaLoop_getChildByNameExec(self, *args)

    def getNodes(self):
        """getNodes(DynParaLoop self) -> std::vector< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.DynParaLoop_getNodes(self)

    def isMultiplicitySpecified(self, *args):
        """isMultiplicitySpecified(DynParaLoop self, unsigned int & value) -> bool"""
        return _pilot.DynParaLoop_isMultiplicitySpecified(self, *args)

    def forceMultiplicity(self, *args):
        """forceMultiplicity(DynParaLoop self, unsigned int value)"""
        return _pilot.DynParaLoop_forceMultiplicity(self, *args)

    def checkBasicConsistency(self):
        """checkBasicConsistency(DynParaLoop self)"""
        return _pilot.DynParaLoop_checkBasicConsistency(self)

    def getErrorReport(self):
        """getErrorReport(DynParaLoop self) -> std::string"""
        return _pilot.DynParaLoop_getErrorReport(self)

    def accept(self, *args):
        """accept(DynParaLoop self, Visitor visitor)"""
        return _pilot.DynParaLoop_accept(self, *args)

    def getInitNode(self):
        """getInitNode(DynParaLoop self) -> Node"""
        return _pilot.DynParaLoop_getInitNode(self)

    def getExecNode(self):
        """getExecNode(DynParaLoop self) -> Node"""
        return _pilot.DynParaLoop_getExecNode(self)

    def getFinalizeNode(self):
        """getFinalizeNode(DynParaLoop self) -> Node"""
        return _pilot.DynParaLoop_getFinalizeNode(self)

DynParaLoop_swigregister = _pilot.DynParaLoop_swigregister
DynParaLoop_swigregister(DynParaLoop)

class WhileLoop(Loop):
    """Proxy of C++ YACS::ENGINE::WhileLoop class"""
    __swig_setmethods__ = {}
    for _s in [Loop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WhileLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [Loop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WhileLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::WhileLoop self, WhileLoop other, ComposedNode father, bool editionOnly) -> WhileLoop
        __init__(YACS::ENGINE::WhileLoop self, std::string const & name) -> WhileLoop
        """
        this = _pilot.new_WhileLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    def exUpdateState(self):
        """exUpdateState(WhileLoop self)"""
        return _pilot.WhileLoop_exUpdateState(self)

    def init(self, start=True):
        """
        init(WhileLoop self, bool start=True)
        init(WhileLoop self)
        """
        return _pilot.WhileLoop_init(self, start)

    def edGetConditionPort(self):
        """edGetConditionPort(WhileLoop self) -> InputPort"""
        return _pilot.WhileLoop_edGetConditionPort(self)

    def getInputPort(self, *args):
        """getInputPort(WhileLoop self, std::string const & name) -> InputPort"""
        return _pilot.WhileLoop_getInputPort(self, *args)

    def getLocalInputPorts(self):
        """getLocalInputPorts(WhileLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.WhileLoop_getLocalInputPorts(self)

    def accept(self, *args):
        """accept(WhileLoop self, Visitor visitor)"""
        return _pilot.WhileLoop_accept(self, *args)

    def getDecisionPort(self):
        """getDecisionPort(WhileLoop self) -> InputPort"""
        return _pilot.WhileLoop_getDecisionPort(self)

    def typeName(self):
        """typeName(WhileLoop self) -> std::string"""
        return _pilot.WhileLoop_typeName(self)

    __swig_destroy__ = _pilot.delete_WhileLoop
    __del__ = lambda self : None;
WhileLoop_swigregister = _pilot.WhileLoop_swigregister
WhileLoop_swigregister(WhileLoop)

class InterceptorInputPort(AnyInputPort):
    """Proxy of C++ YACS::ENGINE::InterceptorInputPort class"""
    __swig_setmethods__ = {}
    for _s in [AnyInputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterceptorInputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [AnyInputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterceptorInputPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_InterceptorInputPort
    __del__ = lambda self : None;
InterceptorInputPort_swigregister = _pilot.InterceptorInputPort_swigregister
InterceptorInputPort_swigregister(InterceptorInputPort)

class AnySplitOutputPort(OutputPort):
    """Proxy of C++ YACS::ENGINE::AnySplitOutputPort class"""
    __swig_setmethods__ = {}
    for _s in [OutputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnySplitOutputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnySplitOutputPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_AnySplitOutputPort
    __del__ = lambda self : None;
AnySplitOutputPort_swigregister = _pilot.AnySplitOutputPort_swigregister
AnySplitOutputPort_swigregister(AnySplitOutputPort)

class SeqAnyInputPort(AnyInputPort):
    """Proxy of C++ YACS::ENGINE::SeqAnyInputPort class"""
    __swig_setmethods__ = {}
    for _s in [AnyInputPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeqAnyInputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [AnyInputPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeqAnyInputPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getNumberOfElements(self):
        """getNumberOfElements(SeqAnyInputPort self) -> unsigned int"""
        return _pilot.SeqAnyInputPort_getNumberOfElements(self)

    def dump(self):
        """dump(SeqAnyInputPort self) -> std::string"""
        return _pilot.SeqAnyInputPort_dump(self)

    __swig_destroy__ = _pilot.delete_SeqAnyInputPort
    __del__ = lambda self : None;
SeqAnyInputPort_swigregister = _pilot.SeqAnyInputPort_swigregister
SeqAnyInputPort_swigregister(SeqAnyInputPort)

class SplitterNode(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::SplitterNode class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitterNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SplitterNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_SplitterNode
    __del__ = lambda self : None;
SplitterNode_swigregister = _pilot.SplitterNode_swigregister
SplitterNode_swigregister(SplitterNode)

class FakeNodeForForEachLoop(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::FakeNodeForForEachLoop class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FakeNodeForForEachLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FakeNodeForForEachLoop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_FakeNodeForForEachLoop
    __del__ = lambda self : None;
FakeNodeForForEachLoop_swigregister = _pilot.FakeNodeForForEachLoop_swigregister
FakeNodeForForEachLoop_swigregister(FakeNodeForForEachLoop)

class ForEachLoop(DynParaLoop):
    """Proxy of C++ YACS::ENGINE::ForEachLoop class"""
    __swig_setmethods__ = {}
    for _s in [DynParaLoop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForEachLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [DynParaLoop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForEachLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::ForEachLoop self, std::string const & name, TypeCode typeOfDataSplitted) -> ForEachLoop
        __init__(YACS::ENGINE::ForEachLoop self, ForEachLoop other, ComposedNode father, bool editionOnly) -> ForEachLoop
        """
        this = _pilot.new_ForEachLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_ForEachLoop
    __del__ = lambda self : None;
    def init(self, start=True):
        """
        init(ForEachLoop self, bool start=True)
        init(ForEachLoop self)
        """
        return _pilot.ForEachLoop_init(self, start)

    def exUpdateState(self):
        """exUpdateState(ForEachLoop self)"""
        return _pilot.ForEachLoop_exUpdateState(self)

    def getReadyTasks(self, *args):
        """getReadyTasks(ForEachLoop self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.ForEachLoop_getReadyTasks(self, *args)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(ForEachLoop self) -> int"""
        return _pilot.ForEachLoop_getNumberOfInputPorts(self)

    def checkNoCyclePassingThrough(self, *args):
        """checkNoCyclePassingThrough(ForEachLoop self, Node node)"""
        return _pilot.ForEachLoop_checkNoCyclePassingThrough(self, *args)

    def selectRunnableTasks(self, *args):
        """selectRunnableTasks(ForEachLoop self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.ForEachLoop_selectRunnableTasks(self, *args)

    def getExecCurrentId(self):
        """getExecCurrentId(ForEachLoop self) -> unsigned int"""
        return _pilot.ForEachLoop_getExecCurrentId(self)

    def getSetOfInputPort(self):
        """getSetOfInputPort(ForEachLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ForEachLoop_getSetOfInputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(ForEachLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.ForEachLoop_getLocalInputPorts(self)

    def edGetSeqOfSamplesPort(self):
        """edGetSeqOfSamplesPort(ForEachLoop self) -> InputPort"""
        return _pilot.ForEachLoop_edGetSeqOfSamplesPort(self)

    def getInputPort(self, *args):
        """getInputPort(ForEachLoop self, std::string const & name) -> InputPort"""
        return _pilot.ForEachLoop_getInputPort(self, *args)

    def getOutPort(self, *args):
        """getOutPort(ForEachLoop self, std::string const & name) -> OutPort"""
        return _pilot.ForEachLoop_getOutPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(ForEachLoop self, std::string const & name) -> OutputPort"""
        return _pilot.ForEachLoop_getOutputPort(self, *args)

    def getChildByShortName(self, *args):
        """getChildByShortName(ForEachLoop self, std::string const & name) -> Node"""
        return _pilot.ForEachLoop_getChildByShortName(self, *args)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(ForEachLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.ForEachLoop_getLocalOutputPorts(self)

    def accept(self, *args):
        """accept(ForEachLoop self, Visitor visitor)"""
        return _pilot.ForEachLoop_accept(self, *args)

    def writeDot(self, *args):
        """writeDot(ForEachLoop self, std::ostream & os)"""
        return _pilot.ForEachLoop_writeDot(self, *args)

    def typeName(self):
        """typeName(ForEachLoop self) -> std::string"""
        return _pilot.ForEachLoop_typeName(self)

    def resetState(self, *args):
        """resetState(ForEachLoop self, int level)"""
        return _pilot.ForEachLoop_resetState(self, *args)

ForEachLoop_swigregister = _pilot.ForEachLoop_swigregister
ForEachLoop_swigregister(ForEachLoop)
ForEachLoop.NAME_OF_SPLITTERNODE = _pilot.cvar.ForEachLoop_NAME_OF_SPLITTERNODE

class FakeNodeForOptimizerLoop(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::FakeNodeForOptimizerLoop class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FakeNodeForOptimizerLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FakeNodeForOptimizerLoop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_FakeNodeForOptimizerLoop
    __del__ = lambda self : None;
FakeNodeForOptimizerLoop_swigregister = _pilot.FakeNodeForOptimizerLoop_swigregister
FakeNodeForOptimizerLoop_swigregister(FakeNodeForOptimizerLoop)

class OptimizerLoop(DynParaLoop):
    """Proxy of C++ YACS::ENGINE::OptimizerLoop class"""
    __swig_setmethods__ = {}
    for _s in [DynParaLoop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [DynParaLoop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::OptimizerLoop self, std::string const & name, std::string const & algLibWthOutExt, std::string const & symbolNameToOptimizerAlgBaseInstanceFactory, 
            bool algInitOnFile, bool initAlgo=True, 
            Proc procForTypes=None) -> OptimizerLoop
        __init__(YACS::ENGINE::OptimizerLoop self, std::string const & name, std::string const & algLibWthOutExt, std::string const & symbolNameToOptimizerAlgBaseInstanceFactory, 
            bool algInitOnFile, bool initAlgo=True) -> OptimizerLoop
        __init__(YACS::ENGINE::OptimizerLoop self, std::string const & name, std::string const & algLibWthOutExt, std::string const & symbolNameToOptimizerAlgBaseInstanceFactory, 
            bool algInitOnFile) -> OptimizerLoop
        __init__(YACS::ENGINE::OptimizerLoop self, OptimizerLoop other, ComposedNode father, bool editionOnly) -> OptimizerLoop
        """
        this = _pilot.new_OptimizerLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_OptimizerLoop
    __del__ = lambda self : None;
    def init(self, start=True):
        """
        init(OptimizerLoop self, bool start=True)
        init(OptimizerLoop self)
        """
        return _pilot.OptimizerLoop_init(self, start)

    def exUpdateState(self):
        """exUpdateState(OptimizerLoop self)"""
        return _pilot.OptimizerLoop_exUpdateState(self)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(OptimizerLoop self) -> int"""
        return _pilot.OptimizerLoop_getNumberOfInputPorts(self)

    def edGetPortForOutPool(self):
        """edGetPortForOutPool(OptimizerLoop self) -> InputPort"""
        return _pilot.OptimizerLoop_edGetPortForOutPool(self)

    def edGetAlgoInitPort(self):
        """edGetAlgoInitPort(OptimizerLoop self) -> InputPort"""
        return _pilot.OptimizerLoop_edGetAlgoInitPort(self)

    def edGetAlgoResultPort(self):
        """edGetAlgoResultPort(OptimizerLoop self) -> OutputPort"""
        return _pilot.OptimizerLoop_edGetAlgoResultPort(self)

    def getInputPort(self, *args):
        """getInputPort(OptimizerLoop self, std::string const & name) -> InputPort"""
        return _pilot.OptimizerLoop_getInputPort(self, *args)

    def getSetOfInputPort(self):
        """getSetOfInputPort(OptimizerLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.OptimizerLoop_getSetOfInputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(OptimizerLoop self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.OptimizerLoop_getLocalInputPorts(self)

    def selectRunnableTasks(self, *args):
        """selectRunnableTasks(OptimizerLoop self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.OptimizerLoop_selectRunnableTasks(self, *args)

    def getReadyTasks(self, *args):
        """getReadyTasks(OptimizerLoop self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.OptimizerLoop_getReadyTasks(self, *args)

    def updateStateOnFinishedEventFrom(self, *args):
        """updateStateOnFinishedEventFrom(OptimizerLoop self, Node node) -> YACS::Event"""
        return _pilot.OptimizerLoop_updateStateOnFinishedEventFrom(self, *args)

    def checkNoCyclePassingThrough(self, *args):
        """checkNoCyclePassingThrough(OptimizerLoop self, Node node)"""
        return _pilot.OptimizerLoop_checkNoCyclePassingThrough(self, *args)

    def accept(self, *args):
        """accept(OptimizerLoop self, Visitor visitor)"""
        return _pilot.OptimizerLoop_accept(self, *args)

    def getSymbol(self):
        """getSymbol(OptimizerLoop self) -> std::string"""
        return _pilot.OptimizerLoop_getSymbol(self)

    def getAlgLib(self):
        """getAlgLib(OptimizerLoop self) -> std::string"""
        return _pilot.OptimizerLoop_getAlgLib(self)

    def setAlgorithm(self, *args):
        """
        setAlgorithm(OptimizerLoop self, std::string const & alglib, std::string const & symbol, bool checkLinks=True, Proc procForTypes=None)
        setAlgorithm(OptimizerLoop self, std::string const & alglib, std::string const & symbol, bool checkLinks=True)
        setAlgorithm(OptimizerLoop self, std::string const & alglib, std::string const & symbol)
        """
        return _pilot.OptimizerLoop_setAlgorithm(self, *args)

    def checkBasicConsistency(self):
        """checkBasicConsistency(OptimizerLoop self)"""
        return _pilot.OptimizerLoop_checkBasicConsistency(self)

    def typeName(self):
        """typeName(OptimizerLoop self) -> std::string"""
        return _pilot.OptimizerLoop_typeName(self)

    def getNumberOfOutputPorts(self):
        """getNumberOfOutputPorts(OptimizerLoop self) -> int"""
        return _pilot.OptimizerLoop_getNumberOfOutputPorts(self)

    def getSetOfOutputPort(self):
        """getSetOfOutputPort(OptimizerLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.OptimizerLoop_getSetOfOutputPort(self)

    def getLocalOutputPorts(self):
        """getLocalOutputPorts(OptimizerLoop self) -> std::list< YACS::ENGINE::OutputPort *,std::allocator< YACS::ENGINE::OutputPort * > >"""
        return _pilot.OptimizerLoop_getLocalOutputPorts(self)

    def getOutPort(self, *args):
        """getOutPort(OptimizerLoop self, std::string const & name) -> OutPort"""
        return _pilot.OptimizerLoop_getOutPort(self, *args)

    def getOutputPort(self, *args):
        """getOutputPort(OptimizerLoop self, std::string const & name) -> OutputPort"""
        return _pilot.OptimizerLoop_getOutputPort(self, *args)

    def finalize(self):
        """finalize(OptimizerLoop self) -> YACS::Event"""
        return _pilot.OptimizerLoop_finalize(self)

OptimizerLoop_swigregister = _pilot.OptimizerLoop_swigregister
OptimizerLoop_swigregister(OptimizerLoop)

class CollectorSwOutPort(OutPort):
    """Proxy of C++ YACS::ENGINE::CollectorSwOutPort class"""
    __swig_setmethods__ = {}
    for _s in [OutPort]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectorSwOutPort, name, value)
    __swig_getmethods__ = {}
    for _s in [OutPort]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollectorSwOutPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getHumanReprOfIncompleteCases(self, *args):
        """getHumanReprOfIncompleteCases(CollectorSwOutPort self, std::ostream & stream)"""
        return _pilot.CollectorSwOutPort_getHumanReprOfIncompleteCases(self, *args)

    __swig_destroy__ = _pilot.delete_CollectorSwOutPort
    __del__ = lambda self : None;
CollectorSwOutPort_swigregister = _pilot.CollectorSwOutPort_swigregister
CollectorSwOutPort_swigregister(CollectorSwOutPort)

class FakeNodeForSwitch(ElementaryNode):
    """Proxy of C++ YACS::ENGINE::FakeNodeForSwitch class"""
    __swig_setmethods__ = {}
    for _s in [ElementaryNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FakeNodeForSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementaryNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FakeNodeForSwitch, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_FakeNodeForSwitch
    __del__ = lambda self : None;
FakeNodeForSwitch_swigregister = _pilot.FakeNodeForSwitch_swigregister
FakeNodeForSwitch_swigregister(FakeNodeForSwitch)

class Switch(StaticDefinedComposedNode):
    """Proxy of C++ YACS::ENGINE::Switch class"""
    __swig_setmethods__ = {}
    for _s in [StaticDefinedComposedNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticDefinedComposedNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(YACS::ENGINE::Switch self, Switch other, ComposedNode father, bool editionOnly) -> Switch
        __init__(YACS::ENGINE::Switch self, std::string const & name) -> Switch
        """
        this = _pilot.new_Switch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Switch
    __del__ = lambda self : None;
    def exUpdateState(self):
        """exUpdateState(Switch self)"""
        return _pilot.Switch_exUpdateState(self)

    def init(self, start=True):
        """
        init(Switch self, bool start=True)
        init(Switch self)
        """
        return _pilot.Switch_init(self, start)

    def edSetDefaultNode(self, *args):
        """edSetDefaultNode(Switch self, Node DISOWNnode) -> Node"""
        return _pilot.Switch_edSetDefaultNode(self, *args)

    def edReleaseDefaultNode(self):
        """edReleaseDefaultNode(Switch self) -> Node"""
        return _pilot.Switch_edReleaseDefaultNode(self)

    def edReleaseCase(self, *args):
        """edReleaseCase(Switch self, int caseId) -> Node"""
        return _pilot.Switch_edReleaseCase(self, *args)

    def edGetNode(self, *args):
        """edGetNode(Switch self, int caseId) -> Node"""
        return _pilot.Switch_edGetNode(self, *args)

    def edSetNode(self, *args):
        """edSetNode(Switch self, int caseId, Node DISOWNnode) -> Node"""
        return _pilot.Switch_edSetNode(self, *args)

    def edChangeCase(self, *args):
        """edChangeCase(Switch self, int oldCase, int newCase)"""
        return _pilot.Switch_edChangeCase(self, *args)

    def edAddChild(self, *args):
        """edAddChild(Switch self, Node DISOWNnode) -> bool"""
        return _pilot.Switch_edAddChild(self, *args)

    def getMaxCase(self):
        """getMaxCase(Switch self) -> int"""
        return _pilot.Switch_getMaxCase(self)

    def getReadyTasks(self, *args):
        """getReadyTasks(Switch self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Switch_getReadyTasks(self, *args)

    def selectRunnableTasks(self, *args):
        """selectRunnableTasks(Switch self, std::vector< YACS::ENGINE::Task *,std::allocator< YACS::ENGINE::Task * > > & tasks)"""
        return _pilot.Switch_selectRunnableTasks(self, *args)

    def edGetDirectDescendants(self):
        """edGetDirectDescendants(Switch self) -> std::list< YACS::ENGINE::Node *,std::allocator< YACS::ENGINE::Node * > >"""
        return _pilot.Switch_edGetDirectDescendants(self)

    def edGetConditionPort(self):
        """edGetConditionPort(Switch self) -> InputPort"""
        return _pilot.Switch_edGetConditionPort(self)

    def writeDot(self, *args):
        """writeDot(Switch self, std::ostream & os)"""
        return _pilot.Switch_writeDot(self, *args)

    def getNumberOfInputPorts(self):
        """getNumberOfInputPorts(Switch self) -> int"""
        return _pilot.Switch_getNumberOfInputPorts(self)

    def edRemoveChild(self, *args):
        """edRemoveChild(Switch self, Node node)"""
        return _pilot.Switch_edRemoveChild(self, *args)

    def getSetOfInputPort(self):
        """getSetOfInputPort(Switch self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.Switch_getSetOfInputPort(self)

    def getLocalInputPorts(self):
        """getLocalInputPorts(Switch self) -> std::list< YACS::ENGINE::InputPort *,std::allocator< YACS::ENGINE::InputPort * > >"""
        return _pilot.Switch_getLocalInputPorts(self)

    def getEffectiveState(self, *args):
        """
        getEffectiveState(Switch self) -> YACS::StatesForNode
        getEffectiveState(Switch self, Node node) -> YACS::StatesForNode
        """
        return _pilot.Switch_getEffectiveState(self, *args)

    def getOutPort(self, *args):
        """getOutPort(Switch self, std::string const & name) -> OutPort"""
        return _pilot.Switch_getOutPort(self, *args)

    def getInputPort(self, *args):
        """getInputPort(Switch self, std::string const & name) -> InputPort"""
        return _pilot.Switch_getInputPort(self, *args)

    def getChildByShortName(self, *args):
        """getChildByShortName(Switch self, std::string const & name) -> Node"""
        return _pilot.Switch_getChildByShortName(self, *args)

    def getMyQualifiedName(self, *args):
        """getMyQualifiedName(Switch self, Node directSon) -> std::string"""
        return _pilot.Switch_getMyQualifiedName(self, *args)

    def getCaseId(self, *args):
        """getCaseId(Switch self, Node node) -> std::string"""
        return _pilot.Switch_getCaseId(self, *args)

    def accept(self, *args):
        """accept(Switch self, Visitor visitor)"""
        return _pilot.Switch_accept(self, *args)

    def getRankOfNode(self, *args):
        """getRankOfNode(Switch self, Node node) -> int"""
        return _pilot.Switch_getRankOfNode(self, *args)

    def typeName(self):
        """typeName(Switch self) -> std::string"""
        return _pilot.Switch_typeName(self)

Switch_swigregister = _pilot.Switch_swigregister
Switch_swigregister(Switch)
Switch.DEFAULT_NODE_NAME = _pilot.cvar.Switch_DEFAULT_NODE_NAME
Switch.SELECTOR_INPUTPORT_NAME = _pilot.cvar.Switch_SELECTOR_INPUTPORT_NAME
Switch.ID_FOR_DEFAULT_NODE = _pilot.cvar.Switch_ID_FOR_DEFAULT_NODE

class Visitor(_object):
    """Proxy of C++ YACS::ENGINE::Visitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Visitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def visitBloc(self, *args):
        """visitBloc(Visitor self, Bloc node)"""
        return _pilot.Visitor_visitBloc(self, *args)

    def visitElementaryNode(self, *args):
        """visitElementaryNode(Visitor self, ElementaryNode node)"""
        return _pilot.Visitor_visitElementaryNode(self, *args)

    def visitForEachLoop(self, *args):
        """visitForEachLoop(Visitor self, ForEachLoop node)"""
        return _pilot.Visitor_visitForEachLoop(self, *args)

    def visitOptimizerLoop(self, *args):
        """visitOptimizerLoop(Visitor self, OptimizerLoop node)"""
        return _pilot.Visitor_visitOptimizerLoop(self, *args)

    def visitDynParaLoop(self, *args):
        """visitDynParaLoop(Visitor self, DynParaLoop node)"""
        return _pilot.Visitor_visitDynParaLoop(self, *args)

    def visitForLoop(self, *args):
        """visitForLoop(Visitor self, ForLoop node)"""
        return _pilot.Visitor_visitForLoop(self, *args)

    def visitInlineNode(self, *args):
        """visitInlineNode(Visitor self, InlineNode node)"""
        return _pilot.Visitor_visitInlineNode(self, *args)

    def visitInlineFuncNode(self, *args):
        """visitInlineFuncNode(Visitor self, InlineFuncNode node)"""
        return _pilot.Visitor_visitInlineFuncNode(self, *args)

    def visitLoop(self, *args):
        """visitLoop(Visitor self, Loop node)"""
        return _pilot.Visitor_visitLoop(self, *args)

    def visitProc(self, *args):
        """visitProc(Visitor self, Proc node)"""
        return _pilot.Visitor_visitProc(self, *args)

    def visitServiceNode(self, *args):
        """visitServiceNode(Visitor self, ServiceNode node)"""
        return _pilot.Visitor_visitServiceNode(self, *args)

    def visitServerNode(self, *args):
        """visitServerNode(Visitor self, ServerNode node)"""
        return _pilot.Visitor_visitServerNode(self, *args)

    def visitServiceInlineNode(self, *args):
        """visitServiceInlineNode(Visitor self, ServiceInlineNode node)"""
        return _pilot.Visitor_visitServiceInlineNode(self, *args)

    def visitSwitch(self, *args):
        """visitSwitch(Visitor self, Switch node)"""
        return _pilot.Visitor_visitSwitch(self, *args)

    def visitWhileLoop(self, *args):
        """visitWhileLoop(Visitor self, WhileLoop node)"""
        return _pilot.Visitor_visitWhileLoop(self, *args)

    def visitPresetNode(self, *args):
        """visitPresetNode(Visitor self, DataNode node)"""
        return _pilot.Visitor_visitPresetNode(self, *args)

    def visitOutNode(self, *args):
        """visitOutNode(Visitor self, DataNode node)"""
        return _pilot.Visitor_visitOutNode(self, *args)

    def visitStudyInNode(self, *args):
        """visitStudyInNode(Visitor self, DataNode node)"""
        return _pilot.Visitor_visitStudyInNode(self, *args)

    def visitStudyOutNode(self, *args):
        """visitStudyOutNode(Visitor self, DataNode node)"""
        return _pilot.Visitor_visitStudyOutNode(self, *args)

    __swig_destroy__ = _pilot.delete_Visitor
    __del__ = lambda self : None;
Visitor_swigregister = _pilot.Visitor_swigregister
Visitor_swigregister(Visitor)

class DataLinkInfo(_object):
    """Proxy of C++ YACS::ENGINE::DataLinkInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataLinkInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataLinkInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_from"] = _pilot.DataLinkInfo__from_set
    __swig_getmethods__["_from"] = _pilot.DataLinkInfo__from_get
    if _newclass:_from = _swig_property(_pilot.DataLinkInfo__from_get, _pilot.DataLinkInfo__from_set)
    __swig_setmethods__["to"] = _pilot.DataLinkInfo_to_set
    __swig_getmethods__["to"] = _pilot.DataLinkInfo_to_get
    if _newclass:to = _swig_property(_pilot.DataLinkInfo_to_get, _pilot.DataLinkInfo_to_set)
    __swig_setmethods__["outp"] = _pilot.DataLinkInfo_outp_set
    __swig_getmethods__["outp"] = _pilot.DataLinkInfo_outp_get
    if _newclass:outp = _swig_property(_pilot.DataLinkInfo_outp_get, _pilot.DataLinkInfo_outp_set)
    __swig_setmethods__["inp"] = _pilot.DataLinkInfo_inp_set
    __swig_getmethods__["inp"] = _pilot.DataLinkInfo_inp_get
    if _newclass:inp = _swig_property(_pilot.DataLinkInfo_inp_get, _pilot.DataLinkInfo_inp_set)
    __swig_setmethods__["toDelete"] = _pilot.DataLinkInfo_toDelete_set
    __swig_getmethods__["toDelete"] = _pilot.DataLinkInfo_toDelete_get
    if _newclass:toDelete = _swig_property(_pilot.DataLinkInfo_toDelete_get, _pilot.DataLinkInfo_toDelete_set)
    def __init__(self): 
        """__init__(YACS::ENGINE::DataLinkInfo self) -> DataLinkInfo"""
        this = _pilot.new_DataLinkInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_DataLinkInfo
    __del__ = lambda self : None;
DataLinkInfo_swigregister = _pilot.DataLinkInfo_swigregister
DataLinkInfo_swigregister(DataLinkInfo)

class StreamLinkInfo(_object):
    """Proxy of C++ YACS::ENGINE::StreamLinkInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamLinkInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamLinkInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_from"] = _pilot.StreamLinkInfo__from_set
    __swig_getmethods__["_from"] = _pilot.StreamLinkInfo__from_get
    if _newclass:_from = _swig_property(_pilot.StreamLinkInfo__from_get, _pilot.StreamLinkInfo__from_set)
    __swig_setmethods__["to"] = _pilot.StreamLinkInfo_to_set
    __swig_getmethods__["to"] = _pilot.StreamLinkInfo_to_get
    if _newclass:to = _swig_property(_pilot.StreamLinkInfo_to_get, _pilot.StreamLinkInfo_to_set)
    __swig_setmethods__["outp"] = _pilot.StreamLinkInfo_outp_set
    __swig_getmethods__["outp"] = _pilot.StreamLinkInfo_outp_get
    if _newclass:outp = _swig_property(_pilot.StreamLinkInfo_outp_get, _pilot.StreamLinkInfo_outp_set)
    __swig_setmethods__["inp"] = _pilot.StreamLinkInfo_inp_set
    __swig_getmethods__["inp"] = _pilot.StreamLinkInfo_inp_get
    if _newclass:inp = _swig_property(_pilot.StreamLinkInfo_inp_get, _pilot.StreamLinkInfo_inp_set)
    __swig_setmethods__["toDelete"] = _pilot.StreamLinkInfo_toDelete_set
    __swig_getmethods__["toDelete"] = _pilot.StreamLinkInfo_toDelete_get
    if _newclass:toDelete = _swig_property(_pilot.StreamLinkInfo_toDelete_get, _pilot.StreamLinkInfo_toDelete_set)
    def __init__(self): 
        """__init__(YACS::ENGINE::StreamLinkInfo self) -> StreamLinkInfo"""
        this = _pilot.new_StreamLinkInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_StreamLinkInfo
    __del__ = lambda self : None;
StreamLinkInfo_swigregister = _pilot.StreamLinkInfo_swigregister
StreamLinkInfo_swigregister(StreamLinkInfo)

class VisitorSaveSchema(Visitor):
    """Proxy of C++ YACS::ENGINE::VisitorSaveSchema class"""
    __swig_setmethods__ = {}
    for _s in [Visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisitorSaveSchema, name, value)
    __swig_getmethods__ = {}
    for _s in [Visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisitorSaveSchema, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::VisitorSaveSchema self, ComposedNode root) -> VisitorSaveSchema"""
        this = _pilot.new_VisitorSaveSchema(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_VisitorSaveSchema
    __del__ = lambda self : None;
    def openFileSchema(self, *args):
        """openFileSchema(VisitorSaveSchema self, std::string xmlDump)"""
        return _pilot.VisitorSaveSchema_openFileSchema(self, *args)

    def closeFileSchema(self):
        """closeFileSchema(VisitorSaveSchema self)"""
        return _pilot.VisitorSaveSchema_closeFileSchema(self)

    def visitBloc(self, *args):
        """visitBloc(VisitorSaveSchema self, Bloc node)"""
        return _pilot.VisitorSaveSchema_visitBloc(self, *args)

    def visitElementaryNode(self, *args):
        """visitElementaryNode(VisitorSaveSchema self, ElementaryNode node)"""
        return _pilot.VisitorSaveSchema_visitElementaryNode(self, *args)

    def visitForEachLoop(self, *args):
        """visitForEachLoop(VisitorSaveSchema self, ForEachLoop node)"""
        return _pilot.VisitorSaveSchema_visitForEachLoop(self, *args)

    def visitOptimizerLoop(self, *args):
        """visitOptimizerLoop(VisitorSaveSchema self, OptimizerLoop node)"""
        return _pilot.VisitorSaveSchema_visitOptimizerLoop(self, *args)

    def visitDynParaLoop(self, *args):
        """visitDynParaLoop(VisitorSaveSchema self, DynParaLoop node)"""
        return _pilot.VisitorSaveSchema_visitDynParaLoop(self, *args)

    def visitForLoop(self, *args):
        """visitForLoop(VisitorSaveSchema self, ForLoop node)"""
        return _pilot.VisitorSaveSchema_visitForLoop(self, *args)

    def visitInlineNode(self, *args):
        """visitInlineNode(VisitorSaveSchema self, InlineNode node)"""
        return _pilot.VisitorSaveSchema_visitInlineNode(self, *args)

    def visitInlineFuncNode(self, *args):
        """visitInlineFuncNode(VisitorSaveSchema self, InlineFuncNode node)"""
        return _pilot.VisitorSaveSchema_visitInlineFuncNode(self, *args)

    def visitLoop(self, *args):
        """visitLoop(VisitorSaveSchema self, Loop node)"""
        return _pilot.VisitorSaveSchema_visitLoop(self, *args)

    def visitProc(self, *args):
        """visitProc(VisitorSaveSchema self, Proc node)"""
        return _pilot.VisitorSaveSchema_visitProc(self, *args)

    def visitServiceNode(self, *args):
        """visitServiceNode(VisitorSaveSchema self, ServiceNode node)"""
        return _pilot.VisitorSaveSchema_visitServiceNode(self, *args)

    def visitServerNode(self, *args):
        """visitServerNode(VisitorSaveSchema self, ServerNode node)"""
        return _pilot.VisitorSaveSchema_visitServerNode(self, *args)

    def visitServiceInlineNode(self, *args):
        """visitServiceInlineNode(VisitorSaveSchema self, ServiceInlineNode node)"""
        return _pilot.VisitorSaveSchema_visitServiceInlineNode(self, *args)

    def visitSwitch(self, *args):
        """visitSwitch(VisitorSaveSchema self, Switch node)"""
        return _pilot.VisitorSaveSchema_visitSwitch(self, *args)

    def visitWhileLoop(self, *args):
        """visitWhileLoop(VisitorSaveSchema self, WhileLoop node)"""
        return _pilot.VisitorSaveSchema_visitWhileLoop(self, *args)

    def visitPresetNode(self, *args):
        """visitPresetNode(VisitorSaveSchema self, DataNode node)"""
        return _pilot.VisitorSaveSchema_visitPresetNode(self, *args)

    def visitOutNode(self, *args):
        """visitOutNode(VisitorSaveSchema self, DataNode node)"""
        return _pilot.VisitorSaveSchema_visitOutNode(self, *args)

    def visitStudyInNode(self, *args):
        """visitStudyInNode(VisitorSaveSchema self, DataNode node)"""
        return _pilot.VisitorSaveSchema_visitStudyInNode(self, *args)

    def visitStudyOutNode(self, *args):
        """visitStudyOutNode(VisitorSaveSchema self, DataNode node)"""
        return _pilot.VisitorSaveSchema_visitStudyOutNode(self, *args)

VisitorSaveSchema_swigregister = _pilot.VisitorSaveSchema_swigregister
VisitorSaveSchema_swigregister(VisitorSaveSchema)

class SchemaSave(_object):
    """Proxy of C++ YACS::ENGINE::SchemaSave class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaSave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaSave, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::SchemaSave self, Proc proc) -> SchemaSave"""
        this = _pilot.new_SchemaSave(*args)
        try: self.this.append(this)
        except: self.this = this
    def save(self, *args):
        """save(SchemaSave self, std::string xmlSchemaFile)"""
        return _pilot.SchemaSave_save(self, *args)

    __swig_destroy__ = _pilot.delete_SchemaSave
    __del__ = lambda self : None;
SchemaSave_swigregister = _pilot.SchemaSave_swigregister
SchemaSave_swigregister(SchemaSave)

class ComponentDefinition(_object):
    """Proxy of C++ YACS::ENGINE::ComponentDefinition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentDefinition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::ComponentDefinition self, std::string const & name) -> ComponentDefinition"""
        this = _pilot.new_ComponentDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self):
        """getName(ComponentDefinition self) -> std::string const &"""
        return _pilot.ComponentDefinition_getName(self)

    __swig_destroy__ = _pilot.delete_ComponentDefinition
    __del__ = lambda self : None;
    __swig_setmethods__["_serviceMap"] = _pilot.ComponentDefinition__serviceMap_set
    __swig_getmethods__["_serviceMap"] = _pilot.ComponentDefinition__serviceMap_get
    if _newclass:_serviceMap = _swig_property(_pilot.ComponentDefinition__serviceMap_get, _pilot.ComponentDefinition__serviceMap_set)
ComponentDefinition_swigregister = _pilot.ComponentDefinition_swigregister
ComponentDefinition_swigregister(ComponentDefinition)

class Catalog(RefCounter):
    """Proxy of C++ YACS::ENGINE::Catalog class"""
    __swig_setmethods__ = {}
    for _s in [RefCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Catalog, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Catalog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(YACS::ENGINE::Catalog self, std::string const & name) -> Catalog"""
        this = _pilot.new_Catalog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Catalog
    __del__ = lambda self : None;
    def getName(self):
        """getName(Catalog self) -> std::string const &"""
        return _pilot.Catalog_getName(self)

    def getErrors(self):
        """getErrors(Catalog self) -> std::string"""
        return _pilot.Catalog_getErrors(self)

    def setErrors(self, *args):
        """setErrors(Catalog self, std::string const & errors)"""
        return _pilot.Catalog_setErrors(self, *args)

    __swig_setmethods__["_typeMap"] = _pilot.Catalog__typeMap_set
    __swig_getmethods__["_typeMap"] = _pilot.Catalog__typeMap_get
    if _newclass:_typeMap = _swig_property(_pilot.Catalog__typeMap_get, _pilot.Catalog__typeMap_set)
    __swig_setmethods__["_componentMap"] = _pilot.Catalog__componentMap_set
    __swig_getmethods__["_componentMap"] = _pilot.Catalog__componentMap_get
    if _newclass:_componentMap = _swig_property(_pilot.Catalog__componentMap_get, _pilot.Catalog__componentMap_set)
    __swig_setmethods__["_nodeMap"] = _pilot.Catalog__nodeMap_set
    __swig_getmethods__["_nodeMap"] = _pilot.Catalog__nodeMap_get
    if _newclass:_nodeMap = _swig_property(_pilot.Catalog__nodeMap_get, _pilot.Catalog__nodeMap_set)
    __swig_setmethods__["_composednodeMap"] = _pilot.Catalog__composednodeMap_set
    __swig_getmethods__["_composednodeMap"] = _pilot.Catalog__composednodeMap_get
    if _newclass:_composednodeMap = _swig_property(_pilot.Catalog__composednodeMap_get, _pilot.Catalog__composednodeMap_set)
    def getNodeFromNodeMap(self, *args):
        """getNodeFromNodeMap(Catalog self, std::string name) -> Node"""
        return _pilot.Catalog_getNodeFromNodeMap(self, *args)

Catalog_swigregister = _pilot.Catalog_swigregister
Catalog_swigregister(Catalog)

class CatalogLoader(_object):
    """Proxy of C++ YACS::ENGINE::CatalogLoader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CatalogLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CatalogLoader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pilot.delete_CatalogLoader
    __del__ = lambda self : None;
    def newLoader(self, *args):
        """newLoader(CatalogLoader self, std::string const & path) -> CatalogLoader"""
        return _pilot.CatalogLoader_newLoader(self, *args)

    def loadCata(self, *args):
        """loadCata(CatalogLoader self, Catalog cata)"""
        return _pilot.CatalogLoader_loadCata(self, *args)

    def load(self, *args):
        """load(CatalogLoader self, Catalog cata, std::string const & path)"""
        return _pilot.CatalogLoader_load(self, *args)

CatalogLoader_swigregister = _pilot.CatalogLoader_swigregister
CatalogLoader_swigregister(CatalogLoader)

class Pool(_object):
    """Proxy of C++ YACS::ENGINE::Pool class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pool, name)
    __repr__ = _swig_repr
    def getCurrentId(self):
        """getCurrentId(Pool self) -> int"""
        return _pilot.Pool_getCurrentId(self)

    def getCurrentInSample(self):
        """getCurrentInSample(Pool self) -> Any"""
        return _pilot.Pool_getCurrentInSample(self)

    def getCurrentOutSample(self):
        """getCurrentOutSample(Pool self) -> Any"""
        return _pilot.Pool_getCurrentOutSample(self)

    def getOutSample(self, *args):
        """getOutSample(Pool self, int id) -> Any"""
        return _pilot.Pool_getOutSample(self, *args)

    def pushInSample(self, *args):
        """
        pushInSample(Pool self, int id, Any inSample, unsigned char priority=0)
        pushInSample(Pool self, int id, Any inSample)
        """
        return _pilot.Pool_pushInSample(self, *args)

    def destroyAll(self):
        """destroyAll(Pool self)"""
        return _pilot.Pool_destroyAll(self)

    def __init__(self): 
        """__init__(YACS::ENGINE::Pool self) -> Pool"""
        this = _pilot.new_Pool()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pilot.delete_Pool
    __del__ = lambda self : None;
Pool_swigregister = _pilot.Pool_swigregister
Pool_swigregister(Pool)

class AlternateThreadPT(_object):
    """Proxy of C++ YACS::BASES::AlternateThreadPT class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlternateThreadPT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlternateThreadPT, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UNEXISTING = _pilot.AlternateThreadPT_UNEXISTING
    NORMAL_CYCLE = _pilot.AlternateThreadPT_NORMAL_CYCLE
    TERMINATION_REQUESTED = _pilot.AlternateThreadPT_TERMINATION_REQUESTED
    READY_TO_JOIN = _pilot.AlternateThreadPT_READY_TO_JOIN
    __swig_destroy__ = _pilot.delete_AlternateThreadPT
    __del__ = lambda self : None;
    def start(self):
        """start(AlternateThreadPT self)"""
        return _pilot.AlternateThreadPT_start(self)

    def signalSlaveAndWait(self):
        """signalSlaveAndWait(AlternateThreadPT self)"""
        return _pilot.AlternateThreadPT_signalSlaveAndWait(self)

    def terminateSlaveThread(self):
        """terminateSlaveThread(AlternateThreadPT self)"""
        return _pilot.AlternateThreadPT_terminateSlaveThread(self)

    def signalMasterAndWait(self):
        """signalMasterAndWait(AlternateThreadPT self)"""
        return _pilot.AlternateThreadPT_signalMasterAndWait(self)

    def isTerminationRequested(self):
        """isTerminationRequested(AlternateThreadPT self) -> bool"""
        return _pilot.AlternateThreadPT_isTerminationRequested(self)

    def getThreadStatus(self):
        """getThreadStatus(AlternateThreadPT self) -> YACS::BASES::AlternateThreadPT::ThreadStatus"""
        return _pilot.AlternateThreadPT_getThreadStatus(self)

AlternateThreadPT_swigregister = _pilot.AlternateThreadPT_swigregister
AlternateThreadPT_swigregister(AlternateThreadPT)

class OptimizerAlgBase(RefCounter):
    """Proxy of C++ YACS::ENGINE::OptimizerAlgBase class"""
    __swig_setmethods__ = {}
    for _s in [RefCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerAlgBase, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerAlgBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getTCForInProxy(self):
        """getTCForInProxy(OptimizerAlgBase self) -> TypeCode"""
        return _pilot.OptimizerAlgBase_getTCForInProxy(self)

    def getTCForOutProxy(self):
        """getTCForOutProxy(OptimizerAlgBase self) -> TypeCode"""
        return _pilot.OptimizerAlgBase_getTCForOutProxy(self)

    def getTCForAlgoInitProxy(self):
        """getTCForAlgoInitProxy(OptimizerAlgBase self) -> TypeCode"""
        return _pilot.OptimizerAlgBase_getTCForAlgoInitProxy(self)

    def getTCForAlgoResultProxy(self):
        """getTCForAlgoResultProxy(OptimizerAlgBase self) -> TypeCode"""
        return _pilot.OptimizerAlgBase_getTCForAlgoResultProxy(self)

    def initializeProxy(self, *args):
        """initializeProxy(OptimizerAlgBase self, Any input)"""
        return _pilot.OptimizerAlgBase_initializeProxy(self, *args)

    def startProxy(self):
        """startProxy(OptimizerAlgBase self)"""
        return _pilot.OptimizerAlgBase_startProxy(self)

    def takeDecisionProxy(self):
        """takeDecisionProxy(OptimizerAlgBase self)"""
        return _pilot.OptimizerAlgBase_takeDecisionProxy(self)

    def finishProxy(self):
        """finishProxy(OptimizerAlgBase self)"""
        return _pilot.OptimizerAlgBase_finishProxy(self)

    def getAlgoResultProxy(self):
        """getAlgoResultProxy(OptimizerAlgBase self) -> Any"""
        return _pilot.OptimizerAlgBase_getAlgoResultProxy(self)

    def setPool(self, *args):
        """setPool(OptimizerAlgBase self, Pool pool)"""
        return _pilot.OptimizerAlgBase_setPool(self, *args)

    def setProc(self, *args):
        """setProc(OptimizerAlgBase self, Proc proc)"""
        return _pilot.OptimizerAlgBase_setProc(self, *args)

    def getProc(self):
        """getProc(OptimizerAlgBase self) -> Proc"""
        return _pilot.OptimizerAlgBase_getProc(self)

    def hasError(self):
        """hasError(OptimizerAlgBase self) -> bool"""
        return _pilot.OptimizerAlgBase_hasError(self)

    def getError(self):
        """getError(OptimizerAlgBase self) -> std::string const &"""
        return _pilot.OptimizerAlgBase_getError(self)

    def setError(self, *args):
        """setError(OptimizerAlgBase self, std::string const & message)"""
        return _pilot.OptimizerAlgBase_setError(self, *args)

OptimizerAlgBase_swigregister = _pilot.OptimizerAlgBase_swigregister
OptimizerAlgBase_swigregister(OptimizerAlgBase)

# This file is compatible with both classic and new-style classes.



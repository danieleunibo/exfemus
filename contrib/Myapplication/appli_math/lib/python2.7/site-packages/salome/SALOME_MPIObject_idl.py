# Python stubs generated by omniidl from /dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_MPIObject.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "Engines"
#
__name__ = "Engines"
_0_Engines = omniORB.openModule("Engines", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_MPIObject.idl")
_0_Engines__POA = omniORB.openModule("Engines__POA", r"/dn60/series7x/KERNEL/CentOS63-64/KERNEL_SRC/idl/SALOME_MPIObject.idl")


# typedef ... IORTab
class IORTab:
    _NP_RepositoryId = "IDL:Engines/IORTab:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Engines.IORTab = IORTab
_0_Engines._d_IORTab  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], 0)
_0_Engines._ad_IORTab = (omniORB.tcInternal.tv_alias, IORTab._NP_RepositoryId, "IORTab", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], 0))
_0_Engines._tc_IORTab = omniORB.tcInternal.createTypeCode(_0_Engines._ad_IORTab)
omniORB.registerType(IORTab._NP_RepositoryId, _0_Engines._ad_IORTab, _0_Engines._tc_IORTab)
del IORTab

# interface MPIObject
_0_Engines._d_MPIObject = (omniORB.tcInternal.tv_objref, "IDL:Engines/MPIObject:1.0", "MPIObject")
omniORB.typeMapping["IDL:Engines/MPIObject:1.0"] = _0_Engines._d_MPIObject
_0_Engines.MPIObject = omniORB.newEmptyClass()
class MPIObject :
    _NP_RepositoryId = _0_Engines._d_MPIObject[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Engines.MPIObject = MPIObject
_0_Engines._tc_MPIObject = omniORB.tcInternal.createTypeCode(_0_Engines._d_MPIObject)
omniORB.registerType(MPIObject._NP_RepositoryId, _0_Engines._d_MPIObject, _0_Engines._tc_MPIObject)

# MPIObject operations and attributes
MPIObject._d__get_tior = ((),(omniORB.typeMapping["IDL:Engines/IORTab:1.0"],),None)
MPIObject._d__set_tior = ((omniORB.typeMapping["IDL:Engines/IORTab:1.0"],),(),None)

# MPIObject object reference
class _objref_MPIObject (CORBA.Object):
    _NP_RepositoryId = MPIObject._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_tior(self, *args):
        return _omnipy.invoke(self, "_get_tior", _0_Engines.MPIObject._d__get_tior, args)

    def _set_tior(self, *args):
        return _omnipy.invoke(self, "_set_tior", _0_Engines.MPIObject._d__set_tior, args)

    __methods__ = ["_get_tior", "_set_tior"] + CORBA.Object.__methods__

omniORB.registerObjref(MPIObject._NP_RepositoryId, _objref_MPIObject)
_0_Engines._objref_MPIObject = _objref_MPIObject
del MPIObject, _objref_MPIObject

# MPIObject skeleton
__name__ = "Engines__POA"
class MPIObject (PortableServer.Servant):
    _NP_RepositoryId = _0_Engines.MPIObject._NP_RepositoryId


    _omni_op_d = {"_get_tior": _0_Engines.MPIObject._d__get_tior, "_set_tior": _0_Engines.MPIObject._d__set_tior}

MPIObject._omni_skeleton = MPIObject
_0_Engines__POA.MPIObject = MPIObject
omniORB.registerSkeleton(MPIObject._NP_RepositoryId, MPIObject)
del MPIObject
__name__ = "Engines"

#
# End of module "Engines"
#
__name__ = "SALOME_MPIObject_idl"

_exported_modules = ( "Engines", )

# The end.

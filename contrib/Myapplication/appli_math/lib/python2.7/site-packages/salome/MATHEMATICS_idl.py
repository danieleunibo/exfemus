# Python stubs generated by omniidl from MATHEMATICS.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "SALOME_GenericObj.idl"
import SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOME_Exception.idl"
import SALOME_Exception_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOMEDS.idl"
import SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("SALOMEDS__POA")
# #include "SALOME_PyNode.idl"
import SALOME_PyNode_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Component.idl"
import SALOME_Component_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Ports.idl"
import SALOME_Ports_idl
_0_Ports = omniORB.openModule("Ports")
_0_Ports__POA = omniORB.openModule("Ports__POA")
# #include "DSC_Engines.idl"
import DSC_Engines_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_PACOExtension.idl"
import SALOME_PACOExtension_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Comm.idl"
import SALOME_Comm_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOME_Parametric.idl"
import SALOME_Parametric_idl
_0_SALOME_TYPES = omniORB.openModule("SALOME_TYPES")
_0_SALOME_TYPES__POA = omniORB.openModule("SALOME_TYPES__POA")

#
# Start of module "MATHEMATICS_ORB"
#
__name__ = "MATHEMATICS_ORB"
_0_MATHEMATICS_ORB = omniORB.openModule("MATHEMATICS_ORB", r"MATHEMATICS.idl")
_0_MATHEMATICS_ORB__POA = omniORB.openModule("MATHEMATICS_ORB__POA", r"MATHEMATICS.idl")


# typedef ... stringvec
class stringvec:
    _NP_RepositoryId = "IDL:MATHEMATICS_ORB/stringvec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_MATHEMATICS_ORB.stringvec = stringvec
_0_MATHEMATICS_ORB._d_stringvec  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_MATHEMATICS_ORB._ad_stringvec = (omniORB.tcInternal.tv_alias, stringvec._NP_RepositoryId, "stringvec", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_MATHEMATICS_ORB._tc_stringvec = omniORB.tcInternal.createTypeCode(_0_MATHEMATICS_ORB._ad_stringvec)
omniORB.registerType(stringvec._NP_RepositoryId, _0_MATHEMATICS_ORB._ad_stringvec, _0_MATHEMATICS_ORB._tc_stringvec)
del stringvec

# typedef ... dblevec
class dblevec:
    _NP_RepositoryId = "IDL:MATHEMATICS_ORB/dblevec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_MATHEMATICS_ORB.dblevec = dblevec
_0_MATHEMATICS_ORB._d_dblevec  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_MATHEMATICS_ORB._ad_dblevec = (omniORB.tcInternal.tv_alias, dblevec._NP_RepositoryId, "dblevec", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_MATHEMATICS_ORB._tc_dblevec = omniORB.tcInternal.createTypeCode(_0_MATHEMATICS_ORB._ad_dblevec)
omniORB.registerType(dblevec._NP_RepositoryId, _0_MATHEMATICS_ORB._ad_dblevec, _0_MATHEMATICS_ORB._tc_dblevec)
del dblevec

# typedef ... intvec
class intvec:
    _NP_RepositoryId = "IDL:MATHEMATICS_ORB/intvec:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_MATHEMATICS_ORB.intvec = intvec
_0_MATHEMATICS_ORB._d_intvec  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)
_0_MATHEMATICS_ORB._ad_intvec = (omniORB.tcInternal.tv_alias, intvec._NP_RepositoryId, "intvec", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_MATHEMATICS_ORB._tc_intvec = omniORB.tcInternal.createTypeCode(_0_MATHEMATICS_ORB._ad_intvec)
omniORB.registerType(intvec._NP_RepositoryId, _0_MATHEMATICS_ORB._ad_intvec, _0_MATHEMATICS_ORB._tc_intvec)
del intvec

# typedef ... dataref
class dataref (_0_Engines.dataref):
    _NP_RepositoryId = "IDL:MATHEMATICS_ORB/dataref:1.0"

_0_MATHEMATICS_ORB.dataref = dataref
_0_MATHEMATICS_ORB._d_dataref  = omniORB.typeMapping["IDL:Engines/dataref:1.0"]
_0_MATHEMATICS_ORB._ad_dataref = (omniORB.tcInternal.tv_alias, dataref._NP_RepositoryId, "dataref", omniORB.typeMapping["IDL:Engines/dataref:1.0"])
_0_MATHEMATICS_ORB._tc_dataref = omniORB.tcInternal.createTypeCode(_0_MATHEMATICS_ORB._ad_dataref)
omniORB.registerType(dataref._NP_RepositoryId, _0_MATHEMATICS_ORB._ad_dataref, _0_MATHEMATICS_ORB._tc_dataref)
del dataref

# interface MATH_Gen
_0_MATHEMATICS_ORB._d_MATH_Gen = (omniORB.tcInternal.tv_objref, "IDL:MATHEMATICS_ORB/MATH_Gen:1.0", "MATH_Gen")
omniORB.typeMapping["IDL:MATHEMATICS_ORB/MATH_Gen:1.0"] = _0_MATHEMATICS_ORB._d_MATH_Gen
_0_MATHEMATICS_ORB.MATH_Gen = omniORB.newEmptyClass()
class MATH_Gen (_0_Engines.EngineComponent):
    _NP_RepositoryId = _0_MATHEMATICS_ORB._d_MATH_Gen[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_MATHEMATICS_ORB.MATH_Gen = MATH_Gen
_0_MATHEMATICS_ORB._tc_MATH_Gen = omniORB.tcInternal.createTypeCode(_0_MATHEMATICS_ORB._d_MATH_Gen)
omniORB.registerType(MATH_Gen._NP_RepositoryId, _0_MATHEMATICS_ORB._d_MATH_Gen, _0_MATHEMATICS_ORB._tc_MATH_Gen)

# MATH_Gen operations and attributes
MATH_Gen._d_sum = ((omniORB.typeMapping["IDL:MATHEMATICS_ORB/dblevec:1.0"], ), (omniORB.tcInternal.tv_double, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
MATH_Gen._d_squareroot = ((omniORB.tcInternal.tv_double, ), (omniORB.tcInternal.tv_double, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
MATH_Gen._d_plus = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
MATH_Gen._d_minus = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
MATH_Gen._d_times = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
MATH_Gen._d_sinx = ((omniORB.tcInternal.tv_double, ), (omniORB.tcInternal.tv_double, ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})

# MATH_Gen object reference
class _objref_MATH_Gen (_0_Engines._objref_EngineComponent):
    _NP_RepositoryId = MATH_Gen._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_EngineComponent.__init__(self)

    def sum(self, *args):
        return _omnipy.invoke(self, "sum", _0_MATHEMATICS_ORB.MATH_Gen._d_sum, args)

    def squareroot(self, *args):
        return _omnipy.invoke(self, "squareroot", _0_MATHEMATICS_ORB.MATH_Gen._d_squareroot, args)

    def plus(self, *args):
        return _omnipy.invoke(self, "plus", _0_MATHEMATICS_ORB.MATH_Gen._d_plus, args)

    def minus(self, *args):
        return _omnipy.invoke(self, "minus", _0_MATHEMATICS_ORB.MATH_Gen._d_minus, args)

    def times(self, *args):
        return _omnipy.invoke(self, "times", _0_MATHEMATICS_ORB.MATH_Gen._d_times, args)

    def sinx(self, *args):
        return _omnipy.invoke(self, "sinx", _0_MATHEMATICS_ORB.MATH_Gen._d_sinx, args)

    __methods__ = ["sum", "squareroot", "plus", "minus", "times", "sinx"] + _0_Engines._objref_EngineComponent.__methods__

omniORB.registerObjref(MATH_Gen._NP_RepositoryId, _objref_MATH_Gen)
_0_MATHEMATICS_ORB._objref_MATH_Gen = _objref_MATH_Gen
del MATH_Gen, _objref_MATH_Gen

# MATH_Gen skeleton
__name__ = "MATHEMATICS_ORB__POA"
class MATH_Gen (_0_Engines__POA.EngineComponent):
    _NP_RepositoryId = _0_MATHEMATICS_ORB.MATH_Gen._NP_RepositoryId


    _omni_op_d = {"sum": _0_MATHEMATICS_ORB.MATH_Gen._d_sum, "squareroot": _0_MATHEMATICS_ORB.MATH_Gen._d_squareroot, "plus": _0_MATHEMATICS_ORB.MATH_Gen._d_plus, "minus": _0_MATHEMATICS_ORB.MATH_Gen._d_minus, "times": _0_MATHEMATICS_ORB.MATH_Gen._d_times, "sinx": _0_MATHEMATICS_ORB.MATH_Gen._d_sinx}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)

MATH_Gen._omni_skeleton = MATH_Gen
_0_MATHEMATICS_ORB__POA.MATH_Gen = MATH_Gen
omniORB.registerSkeleton(MATH_Gen._NP_RepositoryId, MATH_Gen)
del MATH_Gen
__name__ = "MATHEMATICS_ORB"

#
# End of module "MATHEMATICS_ORB"
#
__name__ = "MATHEMATICS_idl"

_exported_modules = ( "MATHEMATICS_ORB", )

# The end.

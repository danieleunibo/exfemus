// Copyright (C) 2006-2013  CEA/DEN, EDF R&D
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef __YACSGUI_IDL__
#define __YACSGUI_IDL__

#include "SALOME_Component.idl"
#include "SALOMEDS.idl"
#include "SALOME_Exception.idl"

  // SALOME Engine interface for execution in a SALOME Container

module YACS_ORB
{
  enum executionMode { CONTINUE, STEPBYSTEP, STOPBEFORENODES };

  typedef sequence<string> stringArray;
  typedef sequence<long> longArray;

  interface Observer
  {
    void notifyObserver(in long numid , in string event);
  };

  interface ProcExec
  {
    long getNodeState(in long numid);
    string getXMLState(in long numid);
    string getInPortValue(in long nodeNumid, in string portName);
    string setInPortValue(in string nodeName, in string portName, in string value);
    string getOutPortValue(in long nodeNumid, in string portName);
    string getErrorDetails(in long nodeNumid);
    string getErrorReport(in long nodeNumid);
    string getContainerLog(in long nodeNumid);
    void shutdownProc(in long level);
    long getExecutorState();
    void getIds(out longArray numids,out stringArray names);
    longArray getNumIds();
    stringArray getNames();

    void Run();
    void RunFromState(in string xmlfile);
    void RestartFromState(in string xmlfile);
    void addObserver(in Observer obs,in long numid, in string event);
    void setExecMode(in executionMode mode);
    void setListOfBreakPoints(in stringArray listOfBreakPoints);
    stringArray getTasksToLoad();
    boolean setStepsToExecute(in stringArray listToExecute);
    boolean resumeCurrentBreakPoint();
    boolean isNotFinished();
    void stopExecution();
    boolean saveState(in string xmlFile);
    void setStopOnError(in boolean dumpRequested, in string xmlFile);
    void unsetStopOnError();
  };

  interface YACS_Gen : Engines::EngineComponent, SALOMEDS::Driver
  {
    ProcExec LoadProc(in string xmlFile);
    string convertSupervFile(in string xmlFile);
  };

};

#endif
